<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="22333"><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (4 samples, 0.02%)</title><rect x="0.0045%" y="277" width="0.0179%" height="15" fill="rgb(217,150,40)" fg:x="1" fg:w="4"/><text x="0.2545%" y="287.50"></text></g><g><title>clock_gettime (14 samples, 0.06%)</title><rect x="0.1702%" y="229" width="0.0627%" height="15" fill="rgb(246,151,37)" fg:x="38" fg:w="14"/><text x="0.4202%" y="239.50"></text></g><g><title>_mach_boottime_usec (12 samples, 0.05%)</title><rect x="0.1791%" y="213" width="0.0537%" height="15" fill="rgb(225,120,37)" fg:x="40" fg:w="12"/><text x="0.4291%" y="223.50"></text></g><g><title>gettimeofday (11 samples, 0.05%)</title><rect x="0.1836%" y="197" width="0.0493%" height="15" fill="rgb(253,155,20)" fg:x="41" fg:w="11"/><text x="0.4336%" y="207.50"></text></g><g><title>__commpage_gettimeofday_internal (9 samples, 0.04%)</title><rect x="0.1925%" y="181" width="0.0403%" height="15" fill="rgb(223,121,0)" fg:x="43" fg:w="9"/><text x="0.4425%" y="191.50"></text></g><g><title>mach_absolute_time (9 samples, 0.04%)</title><rect x="0.1925%" y="165" width="0.0403%" height="15" fill="rgb(226,185,10)" fg:x="43" fg:w="9"/><text x="0.4425%" y="175.50"></text></g><g><title>pthread_mutex_lock (4 samples, 0.02%)</title><rect x="0.2508%" y="229" width="0.0179%" height="15" fill="rgb(208,75,8)" fg:x="56" fg:w="4"/><text x="0.5008%" y="239.50"></text></g><g><title>gettimeofday (9 samples, 0.04%)</title><rect x="0.2910%" y="213" width="0.0403%" height="15" fill="rgb(253,155,20)" fg:x="65" fg:w="9"/><text x="0.5410%" y="223.50"></text></g><g><title>__commpage_gettimeofday_internal (9 samples, 0.04%)</title><rect x="0.2910%" y="197" width="0.0403%" height="15" fill="rgb(223,121,0)" fg:x="65" fg:w="9"/><text x="0.5410%" y="207.50"></text></g><g><title>mach_absolute_time (9 samples, 0.04%)</title><rect x="0.2910%" y="181" width="0.0403%" height="15" fill="rgb(226,185,10)" fg:x="65" fg:w="9"/><text x="0.5410%" y="191.50"></text></g><g><title>_st_localsub (23 samples, 0.10%)</title><rect x="0.3403%" y="197" width="0.1030%" height="15" fill="rgb(238,136,6)" fg:x="76" fg:w="23"/><text x="0.5903%" y="207.50"></text></g><g><title>timesub (10 samples, 0.04%)</title><rect x="0.3985%" y="181" width="0.0448%" height="15" fill="rgb(205,180,15)" fg:x="89" fg:w="10"/><text x="0.6485%" y="191.50"></text></g><g><title>__findenv_locked (23 samples, 0.10%)</title><rect x="0.4522%" y="165" width="0.1030%" height="15" fill="rgb(219,72,22)" fg:x="101" fg:w="23"/><text x="0.7022%" y="175.50"></text></g><g><title>_st_tzset_basic (27 samples, 0.12%)</title><rect x="0.4433%" y="197" width="0.1209%" height="15" fill="rgb(221,12,51)" fg:x="99" fg:w="27"/><text x="0.6933%" y="207.50"></text></g><g><title>getenv_copy_np (27 samples, 0.12%)</title><rect x="0.4433%" y="181" width="0.1209%" height="15" fill="rgb(230,47,18)" fg:x="99" fg:w="27"/><text x="0.6933%" y="191.50"></text></g><g><title>0x1a329c69c (6 samples, 0.03%)</title><rect x="0.6672%" y="149" width="0.0269%" height="15" fill="rgb(233,2,36)" fg:x="149" fg:w="6"/><text x="0.9172%" y="159.50"></text></g><g><title>DYLD-STUB$$os_unfair_lock_lock_with_options (4 samples, 0.02%)</title><rect x="0.7254%" y="133" width="0.0179%" height="15" fill="rgb(232,203,35)" fg:x="162" fg:w="4"/><text x="0.9754%" y="143.50"></text></g><g><title>os_set_32_ptr_find (3 samples, 0.01%)</title><rect x="0.7433%" y="133" width="0.0134%" height="15" fill="rgb(219,46,25)" fg:x="166" fg:w="3"/><text x="0.9933%" y="143.50"></text></g><g><title>0x1a329c810 (17 samples, 0.08%)</title><rect x="0.6940%" y="149" width="0.0761%" height="15" fill="rgb(218,217,47)" fg:x="155" fg:w="17"/><text x="0.9440%" y="159.50"></text></g><g><title>os_unfair_lock_lock_with_options (3 samples, 0.01%)</title><rect x="0.7567%" y="133" width="0.0134%" height="15" fill="rgb(243,211,5)" fg:x="169" fg:w="3"/><text x="1.0067%" y="143.50"></text></g><g><title>afterSleep (141 samples, 0.63%)</title><rect x="0.1478%" y="245" width="0.6314%" height="15" fill="rgb(234,218,32)" fg:x="33" fg:w="141"/><text x="0.3978%" y="255.50"></text></g><g><title>updateCachedTime (114 samples, 0.51%)</title><rect x="0.2687%" y="229" width="0.5105%" height="15" fill="rgb(212,135,13)" fg:x="60" fg:w="114"/><text x="0.5187%" y="239.50"></text></g><g><title>localtime_r (100 samples, 0.45%)</title><rect x="0.3313%" y="213" width="0.4478%" height="15" fill="rgb(238,54,15)" fg:x="74" fg:w="100"/><text x="0.5813%" y="223.50"></text></g><g><title>tzsetwall_basic (44 samples, 0.20%)</title><rect x="0.5821%" y="197" width="0.1970%" height="15" fill="rgb(239,195,21)" fg:x="130" fg:w="44"/><text x="0.8321%" y="207.50"></text></g><g><title>notify_check_tz (38 samples, 0.17%)</title><rect x="0.6090%" y="181" width="0.1702%" height="15" fill="rgb(246,176,47)" fg:x="136" fg:w="38"/><text x="0.8590%" y="191.50"></text></g><g><title>notify_check (37 samples, 0.17%)</title><rect x="0.6134%" y="165" width="0.1657%" height="15" fill="rgb(212,173,18)" fg:x="137" fg:w="37"/><text x="0.8634%" y="175.50"></text></g><g><title>__commpage_gettimeofday_internal (4 samples, 0.02%)</title><rect x="0.8821%" y="197" width="0.0179%" height="15" fill="rgb(223,121,0)" fg:x="197" fg:w="4"/><text x="1.1321%" y="207.50"></text></g><g><title>mach_absolute_time (4 samples, 0.02%)</title><rect x="0.8821%" y="181" width="0.0179%" height="15" fill="rgb(226,185,10)" fg:x="197" fg:w="4"/><text x="1.1321%" y="191.50"></text></g><g><title>activeExpireCycle (6 samples, 0.03%)</title><rect x="0.8776%" y="229" width="0.0269%" height="15" fill="rgb(219,83,32)" fg:x="196" fg:w="6"/><text x="1.1276%" y="239.50"></text></g><g><title>gettimeofday (5 samples, 0.02%)</title><rect x="0.8821%" y="213" width="0.0224%" height="15" fill="rgb(253,155,20)" fg:x="197" fg:w="5"/><text x="1.1321%" y="223.50"></text></g><g><title>__commpage_gettimeofday_internal (31 samples, 0.14%)</title><rect x="0.9269%" y="181" width="0.1388%" height="15" fill="rgb(223,121,0)" fg:x="207" fg:w="31"/><text x="1.1769%" y="191.50"></text></g><g><title>mach_absolute_time (29 samples, 0.13%)</title><rect x="0.9358%" y="165" width="0.1299%" height="15" fill="rgb(226,185,10)" fg:x="209" fg:w="29"/><text x="1.1858%" y="175.50"></text></g><g><title>gettimeofday (33 samples, 0.15%)</title><rect x="0.9269%" y="197" width="0.1478%" height="15" fill="rgb(253,155,20)" fg:x="207" fg:w="33"/><text x="1.1769%" y="207.50"></text></g><g><title>clock_gettime (39 samples, 0.17%)</title><rect x="0.9045%" y="229" width="0.1746%" height="15" fill="rgb(246,151,37)" fg:x="202" fg:w="39"/><text x="1.1545%" y="239.50"></text></g><g><title>_mach_boottime_usec (38 samples, 0.17%)</title><rect x="0.9090%" y="213" width="0.1702%" height="15" fill="rgb(225,120,37)" fg:x="203" fg:w="38"/><text x="1.1590%" y="223.50"></text></g><g><title>freeClientsInAsyncFreeQueue (3 samples, 0.01%)</title><rect x="1.0791%" y="229" width="0.0134%" height="15" fill="rgb(237,18,28)" fg:x="241" fg:w="3"/><text x="1.3291%" y="239.50"></text></g><g><title>clientHasPendingReplies (8 samples, 0.04%)</title><rect x="1.4329%" y="197" width="0.0358%" height="15" fill="rgb(241,33,8)" fg:x="320" fg:w="8"/><text x="1.6829%" y="207.50"></text></g><g><title>connSocketWrite (12,558 samples, 56.23%)</title><rect x="1.4687%" y="197" width="56.2307%" height="15" fill="rgb(253,209,8)" fg:x="328" fg:w="12558"/><text x="1.7187%" y="207.50">connSocketWrite</text></g><g><title>write (12,553 samples, 56.21%)</title><rect x="1.4911%" y="181" width="56.2083%" height="15" fill="rgb(237,166,9)" fg:x="333" fg:w="12553"/><text x="1.7411%" y="191.50">write</text></g><g><title>updateClientMemUsageAndBucket (18 samples, 0.08%)</title><rect x="57.6994%" y="197" width="0.0806%" height="15" fill="rgb(207,48,25)" fg:x="12886" fg:w="18"/><text x="57.9494%" y="207.50"></text></g><g><title>pthread_self (7 samples, 0.03%)</title><rect x="57.7486%" y="181" width="0.0313%" height="15" fill="rgb(207,222,5)" fg:x="12897" fg:w="7"/><text x="57.9986%" y="191.50"></text></g><g><title>handleClientsWithPendingWrites (12,816 samples, 57.39%)</title><rect x="1.0926%" y="229" width="57.3859%" height="15" fill="rgb(207,222,39)" fg:x="244" fg:w="12816"/><text x="1.3426%" y="239.50">handleClientsWithPendingWrites</text></g><g><title>writeToClient (12,788 samples, 57.26%)</title><rect x="1.2179%" y="213" width="57.2606%" height="15" fill="rgb(223,69,15)" fg:x="272" fg:w="12788"/><text x="1.4679%" y="223.50">writeToClient</text></g><g><title>write (156 samples, 0.70%)</title><rect x="57.7800%" y="197" width="0.6985%" height="15" fill="rgb(237,166,9)" fg:x="12904" fg:w="156"/><text x="58.0300%" y="207.50"></text></g><g><title>tlsProcessPendingData (3 samples, 0.01%)</title><rect x="58.4964%" y="229" width="0.0134%" height="15" fill="rgb(227,204,18)" fg:x="13064" fg:w="3"/><text x="58.7464%" y="239.50"></text></g><g><title>beforeSleep (12,898 samples, 57.75%)</title><rect x="0.7791%" y="245" width="57.7531%" height="15" fill="rgb(218,208,18)" fg:x="174" fg:w="12898"/><text x="1.0291%" y="255.50">beforeSleep</text></g><g><title>writeToClient (3 samples, 0.01%)</title><rect x="58.5188%" y="229" width="0.0134%" height="15" fill="rgb(223,69,15)" fg:x="13069" fg:w="3"/><text x="58.7688%" y="239.50"></text></g><g><title>gettimeofday (12 samples, 0.05%)</title><rect x="58.5591%" y="213" width="0.0537%" height="15" fill="rgb(253,155,20)" fg:x="13078" fg:w="12"/><text x="58.8091%" y="223.50"></text></g><g><title>__commpage_gettimeofday_internal (12 samples, 0.05%)</title><rect x="58.5591%" y="197" width="0.0537%" height="15" fill="rgb(223,121,0)" fg:x="13078" fg:w="12"/><text x="58.8091%" y="207.50"></text></g><g><title>mach_absolute_time (10 samples, 0.04%)</title><rect x="58.5680%" y="181" width="0.0448%" height="15" fill="rgb(226,185,10)" fg:x="13080" fg:w="10"/><text x="58.8180%" y="191.50"></text></g><g><title>_mach_boottime_usec (13 samples, 0.06%)</title><rect x="58.5591%" y="229" width="0.0582%" height="15" fill="rgb(225,120,37)" fg:x="13078" fg:w="13"/><text x="58.8091%" y="239.50"></text></g><g><title>clock_gettime (20 samples, 0.09%)</title><rect x="58.5322%" y="245" width="0.0896%" height="15" fill="rgb(246,151,37)" fg:x="13072" fg:w="20"/><text x="58.7822%" y="255.50"></text></g><g><title>connSocketAcceptHandler (8 samples, 0.04%)</title><rect x="58.6218%" y="245" width="0.0358%" height="15" fill="rgb(222,17,14)" fg:x="13092" fg:w="8"/><text x="58.8718%" y="255.50"></text></g><g><title>anetTcpAccept (7 samples, 0.03%)</title><rect x="58.6262%" y="229" width="0.0313%" height="15" fill="rgb(234,217,6)" fg:x="13093" fg:w="7"/><text x="58.8762%" y="239.50"></text></g><g><title>__accept (7 samples, 0.03%)</title><rect x="58.6262%" y="213" width="0.0313%" height="15" fill="rgb(239,189,6)" fg:x="13093" fg:w="7"/><text x="58.8762%" y="223.50"></text></g><g><title>freeClient (3 samples, 0.01%)</title><rect x="58.7651%" y="229" width="0.0134%" height="15" fill="rgb(244,187,0)" fg:x="13124" fg:w="3"/><text x="59.0151%" y="239.50"></text></g><g><title>_sdsMakeRoomFor (7 samples, 0.03%)</title><rect x="59.0651%" y="213" width="0.0313%" height="15" fill="rgb(213,185,11)" fg:x="13191" fg:w="7"/><text x="59.3151%" y="223.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.04%)</title><rect x="59.0964%" y="213" width="0.0358%" height="15" fill="rgb(226,77,8)" fg:x="13198" fg:w="8"/><text x="59.3464%" y="223.50"></text></g><g><title>connSocketRead (7,400 samples, 33.13%)</title><rect x="59.1322%" y="213" width="33.1348%" height="15" fill="rgb(242,72,27)" fg:x="13206" fg:w="7400"/><text x="59.3822%" y="223.50">connSocketRead</text></g><g><title>read (7,392 samples, 33.10%)</title><rect x="59.1680%" y="197" width="33.0990%" height="15" fill="rgb(209,69,29)" fg:x="13214" fg:w="7392"/><text x="59.4180%" y="207.50">read</text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.06%)</title><rect x="92.4775%" y="197" width="0.0582%" height="15" fill="rgb(246,75,33)" fg:x="20653" fg:w="13"/><text x="92.7275%" y="207.50"></text></g><g><title>DYLD-STUB$$strchr (14 samples, 0.06%)</title><rect x="92.5357%" y="197" width="0.0627%" height="15" fill="rgb(238,154,35)" fg:x="20666" fg:w="14"/><text x="92.7857%" y="207.50"></text></g><g><title>_platform_strchr (10 samples, 0.04%)</title><rect x="92.5984%" y="197" width="0.0448%" height="15" fill="rgb(208,154,30)" fg:x="20680" fg:w="10"/><text x="92.8484%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="92.7059%" y="165" width="0.0134%" height="15" fill="rgb(213,192,6)" fg:x="20704" fg:w="3"/><text x="92.9559%" y="175.50"></text></g><g><title>sdsnewplacement (22 samples, 0.10%)</title><rect x="92.6700%" y="181" width="0.0985%" height="15" fill="rgb(221,193,46)" fg:x="20696" fg:w="22"/><text x="92.9200%" y="191.50"></text></g><g><title>_platform_memmove (11 samples, 0.05%)</title><rect x="92.7193%" y="165" width="0.0493%" height="15" fill="rgb(229,3,50)" fg:x="20707" fg:w="11"/><text x="92.9693%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.06%)</title><rect x="92.8044%" y="165" width="0.0582%" height="15" fill="rgb(246,75,33)" fg:x="20726" fg:w="13"/><text x="93.0544%" y="175.50"></text></g><g><title>_malloc_zone_malloc (11 samples, 0.05%)</title><rect x="92.8715%" y="165" width="0.0493%" height="15" fill="rgb(227,101,24)" fg:x="20741" fg:w="11"/><text x="93.1215%" y="175.50"></text></g><g><title>_tlv_get_addr (7 samples, 0.03%)</title><rect x="92.9208%" y="165" width="0.0313%" height="15" fill="rgb(226,77,8)" fg:x="20752" fg:w="7"/><text x="93.1708%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (9 samples, 0.04%)</title><rect x="92.9521%" y="165" width="0.0403%" height="15" fill="rgb(214,103,16)" fg:x="20759" fg:w="9"/><text x="93.2021%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_tiny (26 samples, 0.12%)</title><rect x="92.9924%" y="165" width="0.1164%" height="15" fill="rgb(230,62,6)" fg:x="20768" fg:w="26"/><text x="93.2424%" y="175.50"></text></g><g><title>malloc_size (34 samples, 0.15%)</title><rect x="93.1133%" y="165" width="0.1522%" height="15" fill="rgb(235,148,42)" fg:x="20795" fg:w="34"/><text x="93.3633%" y="175.50"></text></g><g><title>xzm_malloc_zone_size (26 samples, 0.12%)</title><rect x="93.1492%" y="149" width="0.1164%" height="15" fill="rgb(240,58,39)" fg:x="20803" fg:w="26"/><text x="93.3992%" y="159.50"></text></g><g><title>createEmbeddedStringObject (140 samples, 0.63%)</title><rect x="92.6432%" y="197" width="0.6269%" height="15" fill="rgb(212,78,1)" fg:x="20690" fg:w="140"/><text x="92.8932%" y="207.50"></text></g><g><title>zmalloc_usable (112 samples, 0.50%)</title><rect x="92.7685%" y="181" width="0.5015%" height="15" fill="rgb(254,70,3)" fg:x="20718" fg:w="112"/><text x="93.0185%" y="191.50"></text></g><g><title>createStringObject (6 samples, 0.03%)</title><rect x="93.2700%" y="197" width="0.0269%" height="15" fill="rgb(218,158,24)" fg:x="20830" fg:w="6"/><text x="93.5200%" y="207.50"></text></g><g><title>ACLCheckAllUserCommandPerm (20 samples, 0.09%)</title><rect x="93.6014%" y="181" width="0.0896%" height="15" fill="rgb(226,64,0)" fg:x="20904" fg:w="20"/><text x="93.8514%" y="191.50"></text></g><g><title>ACLSelectorCheckCmd (12 samples, 0.05%)</title><rect x="93.6372%" y="165" width="0.0537%" height="15" fill="rgb(241,90,9)" fg:x="20912" fg:w="12"/><text x="93.8872%" y="175.50"></text></g><g><title>DYLD-STUB$$gettimeofday (4 samples, 0.02%)</title><rect x="93.8208%" y="165" width="0.0179%" height="15" fill="rgb(214,163,24)" fg:x="20953" fg:w="4"/><text x="94.0708%" y="175.50"></text></g><g><title>postExecutionUnitOperations (4 samples, 0.02%)</title><rect x="93.8477%" y="149" width="0.0179%" height="15" fill="rgb(234,21,27)" fg:x="20959" fg:w="4"/><text x="94.0977%" y="159.50"></text></g><g><title>afterCommand (11 samples, 0.05%)</title><rect x="93.8387%" y="165" width="0.0493%" height="15" fill="rgb(232,88,19)" fg:x="20957" fg:w="11"/><text x="94.0887%" y="175.50"></text></g><g><title>trackingHandlePendingKeyInvalidations (5 samples, 0.02%)</title><rect x="93.8656%" y="149" width="0.0224%" height="15" fill="rgb(228,228,3)" fg:x="20963" fg:w="5"/><text x="94.1156%" y="159.50"></text></g><g><title>alsoPropagate (3 samples, 0.01%)</title><rect x="93.8880%" y="165" width="0.0134%" height="15" fill="rgb(222,66,4)" fg:x="20968" fg:w="3"/><text x="94.1380%" y="175.50"></text></g><g><title>shouldPropagate (3 samples, 0.01%)</title><rect x="93.8880%" y="149" width="0.0134%" height="15" fill="rgb(245,152,20)" fg:x="20968" fg:w="3"/><text x="94.1380%" y="159.50"></text></g><g><title>clusterSlotStatsAddCpuDuration (4 samples, 0.02%)</title><rect x="93.9014%" y="165" width="0.0179%" height="15" fill="rgb(212,178,38)" fg:x="20971" fg:w="4"/><text x="94.1514%" y="175.50"></text></g><g><title>_addReplyToBufferOrList (6 samples, 0.03%)</title><rect x="93.9820%" y="133" width="0.0269%" height="15" fill="rgb(219,86,26)" fg:x="20989" fg:w="6"/><text x="94.2320%" y="143.50"></text></g><g><title>addReply (23 samples, 0.10%)</title><rect x="94.0089%" y="133" width="0.1030%" height="15" fill="rgb(251,224,42)" fg:x="20995" fg:w="23"/><text x="94.2589%" y="143.50"></text></g><g><title>putClientInPendingWriteQueue (5 samples, 0.02%)</title><rect x="94.0895%" y="117" width="0.0224%" height="15" fill="rgb(250,174,30)" fg:x="21013" fg:w="5"/><text x="94.3395%" y="127.50"></text></g><g><title>addReplyOrErrorObject (4 samples, 0.02%)</title><rect x="94.1119%" y="133" width="0.0179%" height="15" fill="rgb(239,138,15)" fg:x="21018" fg:w="4"/><text x="94.3619%" y="143.50"></text></g><g><title>_dictRehashStepIfNeeded (4 samples, 0.02%)</title><rect x="94.6626%" y="101" width="0.0179%" height="15" fill="rgb(246,223,5)" fg:x="21141" fg:w="4"/><text x="94.9126%" y="111.50"></text></g><g><title>dictGenHashFunction (11 samples, 0.05%)</title><rect x="94.6805%" y="101" width="0.0493%" height="15" fill="rgb(205,41,2)" fg:x="21145" fg:w="11"/><text x="94.9305%" y="111.50"></text></g><g><title>dictRehash (3 samples, 0.01%)</title><rect x="94.7298%" y="101" width="0.0134%" height="15" fill="rgb(223,113,24)" fg:x="21156" fg:w="3"/><text x="94.9798%" y="111.50"></text></g><g><title>rehashEntriesInBucketAtIndex (3 samples, 0.01%)</title><rect x="94.7298%" y="85" width="0.0134%" height="15" fill="rgb(226,12,36)" fg:x="21156" fg:w="3"/><text x="94.9798%" y="95.50"></text></g><g><title>dictSdsCompareKV (60 samples, 0.27%)</title><rect x="94.7432%" y="101" width="0.2687%" height="15" fill="rgb(224,137,50)" fg:x="21159" fg:w="60"/><text x="94.9932%" y="111.50"></text></g><g><title>_platform_memcmp (7 samples, 0.03%)</title><rect x="94.9805%" y="85" width="0.0313%" height="15" fill="rgb(246,44,11)" fg:x="21212" fg:w="7"/><text x="95.2305%" y="95.50"></text></g><g><title>dictFindLinkInternal (190 samples, 0.85%)</title><rect x="94.1701%" y="117" width="0.8508%" height="15" fill="rgb(245,145,28)" fg:x="21031" fg:w="190"/><text x="94.4201%" y="127.50"></text></g><g><title>getKeySlot (5 samples, 0.02%)</title><rect x="95.0208%" y="117" width="0.0224%" height="15" fill="rgb(229,101,19)" fg:x="21221" fg:w="5"/><text x="95.2708%" y="127.50"></text></g><g><title>kvstoreDictFindLink (6 samples, 0.03%)</title><rect x="95.0432%" y="117" width="0.0269%" height="15" fill="rgb(207,62,29)" fg:x="21226" fg:w="6"/><text x="95.2932%" y="127.50"></text></g><g><title>lookupKey (211 samples, 0.94%)</title><rect x="94.1342%" y="133" width="0.9448%" height="15" fill="rgb(212,137,12)" fg:x="21023" fg:w="211"/><text x="94.3842%" y="143.50"></text></g><g><title>getGenericCommand (258 samples, 1.16%)</title><rect x="93.9283%" y="165" width="1.1552%" height="15" fill="rgb(239,0,17)" fg:x="20977" fg:w="258"/><text x="94.1783%" y="175.50"></text></g><g><title>lookupKeyReadOrReply (250 samples, 1.12%)</title><rect x="93.9641%" y="149" width="1.1194%" height="15" fill="rgb(205,206,3)" fg:x="20985" fg:w="250"/><text x="94.2141%" y="159.50"></text></g><g><title>__commpage_gettimeofday (3 samples, 0.01%)</title><rect x="95.1014%" y="149" width="0.0134%" height="15" fill="rgb(209,200,5)" fg:x="21239" fg:w="3"/><text x="95.3514%" y="159.50"></text></g><g><title>__commpage_gettimeofday_internal (144 samples, 0.64%)</title><rect x="95.1149%" y="149" width="0.6448%" height="15" fill="rgb(223,121,0)" fg:x="21242" fg:w="144"/><text x="95.3649%" y="159.50"></text></g><g><title>mach_absolute_time (139 samples, 0.62%)</title><rect x="95.1372%" y="133" width="0.6224%" height="15" fill="rgb(226,185,10)" fg:x="21247" fg:w="139"/><text x="95.3872%" y="143.50"></text></g><g><title>gettimeofday (153 samples, 0.69%)</title><rect x="95.0835%" y="165" width="0.6851%" height="15" fill="rgb(253,155,20)" fg:x="21235" fg:w="153"/><text x="95.3335%" y="175.50"></text></g><g><title>hdr_record_values (3 samples, 0.01%)</title><rect x="95.7775%" y="165" width="0.0134%" height="15" fill="rgb(222,189,51)" fg:x="21390" fg:w="3"/><text x="96.0275%" y="175.50"></text></g><g><title>setCommand (3 samples, 0.01%)</title><rect x="95.8044%" y="165" width="0.0134%" height="15" fill="rgb(207,55,46)" fg:x="21396" fg:w="3"/><text x="96.0544%" y="175.50"></text></g><g><title>_addReplyToBufferOrList (3 samples, 0.01%)</title><rect x="95.8223%" y="149" width="0.0134%" height="15" fill="rgb(219,86,26)" fg:x="21400" fg:w="3"/><text x="96.0723%" y="159.50"></text></g><g><title>addReply (4 samples, 0.02%)</title><rect x="95.8358%" y="149" width="0.0179%" height="15" fill="rgb(251,224,42)" fg:x="21403" fg:w="4"/><text x="96.0858%" y="159.50"></text></g><g><title>dictSdsCompareKV (10 samples, 0.04%)</title><rect x="95.9298%" y="117" width="0.0448%" height="15" fill="rgb(224,137,50)" fg:x="21424" fg:w="10"/><text x="96.1798%" y="127.50"></text></g><g><title>_platform_memcmp (4 samples, 0.02%)</title><rect x="95.9567%" y="101" width="0.0179%" height="15" fill="rgb(246,44,11)" fg:x="21430" fg:w="4"/><text x="96.2067%" y="111.50"></text></g><g><title>dictFindLinkInternal (27 samples, 0.12%)</title><rect x="95.8581%" y="133" width="0.1209%" height="15" fill="rgb(245,145,28)" fg:x="21408" fg:w="27"/><text x="96.1081%" y="143.50"></text></g><g><title>lookupKey (30 samples, 0.13%)</title><rect x="95.8581%" y="149" width="0.1343%" height="15" fill="rgb(212,137,12)" fg:x="21408" fg:w="30"/><text x="96.1081%" y="159.50"></text></g><g><title>_xzm_free (3 samples, 0.01%)</title><rect x="96.0283%" y="101" width="0.0134%" height="15" fill="rgb(211,172,22)" fg:x="21446" fg:w="3"/><text x="96.2783%" y="111.50"></text></g><g><title>sdsnewplacement (6 samples, 0.03%)</title><rect x="96.0462%" y="101" width="0.0269%" height="15" fill="rgb(221,193,46)" fg:x="21450" fg:w="6"/><text x="96.2962%" y="111.50"></text></g><g><title>_platform_memmove (3 samples, 0.01%)</title><rect x="96.0596%" y="85" width="0.0134%" height="15" fill="rgb(229,3,50)" fg:x="21453" fg:w="3"/><text x="96.3096%" y="95.50"></text></g><g><title>kvobjSet (18 samples, 0.08%)</title><rect x="96.0149%" y="117" width="0.0806%" height="15" fill="rgb(213,177,11)" fg:x="21443" fg:w="18"/><text x="96.2649%" y="127.50"></text></g><g><title>zmalloc_usable (5 samples, 0.02%)</title><rect x="96.0731%" y="101" width="0.0224%" height="15" fill="rgb(254,70,3)" fg:x="21456" fg:w="5"/><text x="96.3231%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (3 samples, 0.01%)</title><rect x="96.0820%" y="85" width="0.0134%" height="15" fill="rgb(236,1,49)" fg:x="21458" fg:w="3"/><text x="96.3320%" y="95.50"></text></g><g><title>kvstoreDictSetAtLink (14 samples, 0.06%)</title><rect x="96.0955%" y="117" width="0.0627%" height="15" fill="rgb(221,157,27)" fg:x="21461" fg:w="14"/><text x="96.3455%" y="127.50"></text></g><g><title>dictSetKeyAtLink (12 samples, 0.05%)</title><rect x="96.1044%" y="101" width="0.0537%" height="15" fill="rgb(236,83,52)" fg:x="21463" fg:w="12"/><text x="96.3544%" y="111.50"></text></g><g><title>dictInsertKeyAtLink (8 samples, 0.04%)</title><rect x="96.1223%" y="85" width="0.0358%" height="15" fill="rgb(217,148,4)" fg:x="21467" fg:w="8"/><text x="96.3723%" y="95.50"></text></g><g><title>zmalloc (8 samples, 0.04%)</title><rect x="96.1223%" y="69" width="0.0358%" height="15" fill="rgb(219,91,52)" fg:x="21467" fg:w="8"/><text x="96.3723%" y="79.50"></text></g><g><title>malloc_size (5 samples, 0.02%)</title><rect x="96.1358%" y="53" width="0.0224%" height="15" fill="rgb(235,148,42)" fg:x="21470" fg:w="5"/><text x="96.3858%" y="63.50"></text></g><g><title>xzm_malloc_zone_size (3 samples, 0.01%)</title><rect x="96.1447%" y="37" width="0.0134%" height="15" fill="rgb(240,58,39)" fg:x="21472" fg:w="3"/><text x="96.3947%" y="47.50"></text></g><g><title>dbAddInternal (37 samples, 0.17%)</title><rect x="95.9970%" y="133" width="0.1657%" height="15" fill="rgb(240,207,27)" fg:x="21439" fg:w="37"/><text x="96.2470%" y="143.50"></text></g><g><title>setGenericCommand (79 samples, 0.35%)</title><rect x="95.8178%" y="165" width="0.3537%" height="15" fill="rgb(215,98,37)" fg:x="21399" fg:w="79"/><text x="96.0678%" y="175.50"></text></g><g><title>setKeyByLink (40 samples, 0.18%)</title><rect x="95.9925%" y="149" width="0.1791%" height="15" fill="rgb(253,88,19)" fg:x="21438" fg:w="40"/><text x="96.2425%" y="159.50"></text></g><g><title>call (558 samples, 2.50%)</title><rect x="93.7044%" y="181" width="2.4985%" height="15" fill="rgb(234,162,51)" fg:x="20927" fg:w="558"/><text x="93.9544%" y="191.50">ca..</text></g><g><title>slowlogPushCurrentCommand (7 samples, 0.03%)</title><rect x="96.1716%" y="165" width="0.0313%" height="15" fill="rgb(253,104,5)" fg:x="21478" fg:w="7"/><text x="96.4216%" y="175.50"></text></g><g><title>commandCheckArity (3 samples, 0.01%)</title><rect x="96.2029%" y="181" width="0.0134%" height="15" fill="rgb(242,190,3)" fg:x="21485" fg:w="3"/><text x="96.4529%" y="191.50"></text></g><g><title>commandCheckExistence (3 samples, 0.01%)</title><rect x="96.2164%" y="181" width="0.0134%" height="15" fill="rgb(235,16,26)" fg:x="21488" fg:w="3"/><text x="96.4664%" y="191.50"></text></g><g><title>_free (4 samples, 0.02%)</title><rect x="96.2835%" y="149" width="0.0179%" height="15" fill="rgb(243,145,5)" fg:x="21503" fg:w="4"/><text x="96.5335%" y="159.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (3 samples, 0.01%)</title><rect x="96.4582%" y="133" width="0.0134%" height="15" fill="rgb(214,78,35)" fg:x="21542" fg:w="3"/><text x="96.7082%" y="143.50"></text></g><g><title>__bzero (3 samples, 0.01%)</title><rect x="96.4716%" y="133" width="0.0134%" height="15" fill="rgb(226,151,36)" fg:x="21545" fg:w="3"/><text x="96.7216%" y="143.50"></text></g><g><title>_xzm_free (45 samples, 0.20%)</title><rect x="96.3014%" y="149" width="0.2015%" height="15" fill="rgb(211,172,22)" fg:x="21507" fg:w="45"/><text x="96.5514%" y="159.50"></text></g><g><title>_platform_memset (4 samples, 0.02%)</title><rect x="96.4850%" y="133" width="0.0179%" height="15" fill="rgb(217,168,42)" fg:x="21548" fg:w="4"/><text x="96.7350%" y="143.50"></text></g><g><title>decrRefCount (11 samples, 0.05%)</title><rect x="96.5029%" y="149" width="0.0493%" height="15" fill="rgb(230,52,51)" fg:x="21552" fg:w="11"/><text x="96.7529%" y="159.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="96.5970%" y="133" width="0.0224%" height="15" fill="rgb(226,77,8)" fg:x="21573" fg:w="5"/><text x="96.8470%" y="143.50"></text></g><g><title>commandProcessed (116 samples, 0.52%)</title><rect x="96.2298%" y="181" width="0.5194%" height="15" fill="rgb(231,207,19)" fg:x="21491" fg:w="116"/><text x="96.4798%" y="191.50"></text></g><g><title>resetClientInternal (113 samples, 0.51%)</title><rect x="96.2432%" y="165" width="0.5060%" height="15" fill="rgb(226,23,47)" fg:x="21494" fg:w="113"/><text x="96.4932%" y="175.50"></text></g><g><title>zfree (43 samples, 0.19%)</title><rect x="96.5567%" y="149" width="0.1925%" height="15" fill="rgb(212,30,12)" fg:x="21564" fg:w="43"/><text x="96.8067%" y="159.50"></text></g><g><title>malloc_size (29 samples, 0.13%)</title><rect x="96.6194%" y="133" width="0.1299%" height="15" fill="rgb(235,148,42)" fg:x="21578" fg:w="29"/><text x="96.8694%" y="143.50"></text></g><g><title>xzm_malloc_zone_size (17 samples, 0.08%)</title><rect x="96.6731%" y="117" width="0.0761%" height="15" fill="rgb(240,58,39)" fg:x="21590" fg:w="17"/><text x="96.9231%" y="127.50"></text></g><g><title>evictClients (4 samples, 0.02%)</title><rect x="96.7492%" y="181" width="0.0179%" height="15" fill="rgb(221,5,1)" fg:x="21607" fg:w="4"/><text x="96.9992%" y="191.50"></text></g><g><title>getCommandFlags (4 samples, 0.02%)</title><rect x="96.7671%" y="181" width="0.0179%" height="15" fill="rgb(207,103,36)" fg:x="21611" fg:w="4"/><text x="97.0171%" y="191.50"></text></g><g><title>dictGenCaseHashFunction (4 samples, 0.02%)</title><rect x="96.8432%" y="133" width="0.0179%" height="15" fill="rgb(218,160,53)" fg:x="21628" fg:w="4"/><text x="97.0932%" y="143.50"></text></g><g><title>strcasecmp (3 samples, 0.01%)</title><rect x="96.8701%" y="117" width="0.0134%" height="15" fill="rgb(235,39,50)" fg:x="21634" fg:w="3"/><text x="97.1201%" y="127.50"></text></g><g><title>dictSdsKeyCaseCompare (5 samples, 0.02%)</title><rect x="96.8656%" y="133" width="0.0224%" height="15" fill="rgb(254,57,33)" fg:x="21633" fg:w="5"/><text x="97.1156%" y="143.50"></text></g><g><title>dictFetchValue (22 samples, 0.10%)</title><rect x="96.7940%" y="165" width="0.0985%" height="15" fill="rgb(229,74,51)" fg:x="21617" fg:w="22"/><text x="97.0440%" y="175.50"></text></g><g><title>dictFindLinkInternal (21 samples, 0.09%)</title><rect x="96.7985%" y="149" width="0.0940%" height="15" fill="rgb(245,145,28)" fg:x="21618" fg:w="21"/><text x="97.0485%" y="159.50"></text></g><g><title>lookupCommandLogic (25 samples, 0.11%)</title><rect x="96.7850%" y="181" width="0.1119%" height="15" fill="rgb(232,82,45)" fg:x="21615" fg:w="25"/><text x="97.0350%" y="191.50"></text></g><g><title>moduleCallCommandFilters (3 samples, 0.01%)</title><rect x="96.8970%" y="181" width="0.0134%" height="15" fill="rgb(225,181,22)" fg:x="21640" fg:w="3"/><text x="97.1470%" y="191.50"></text></g><g><title>strcasecmp_l (10 samples, 0.04%)</title><rect x="96.9283%" y="181" width="0.0448%" height="15" fill="rgb(208,138,54)" fg:x="21647" fg:w="10"/><text x="97.1783%" y="191.50"></text></g><g><title>updateClientMemUsageAndBucket (9 samples, 0.04%)</title><rect x="96.9731%" y="181" width="0.0403%" height="15" fill="rgb(207,48,25)" fg:x="21657" fg:w="9"/><text x="97.2231%" y="191.50"></text></g><g><title>processCommandAndResetClient (828 samples, 3.71%)</title><rect x="93.3148%" y="197" width="3.7075%" height="15" fill="rgb(227,82,25)" fg:x="20840" fg:w="828"/><text x="93.5648%" y="207.50">proc..</text></g><g><title>sdsrange (3 samples, 0.01%)</title><rect x="97.0313%" y="197" width="0.0134%" height="15" fill="rgb(215,82,47)" fg:x="21670" fg:w="3"/><text x="97.2813%" y="207.50"></text></g><g><title>sdssubstr (9 samples, 0.04%)</title><rect x="97.0447%" y="197" width="0.0403%" height="15" fill="rgb(209,49,8)" fg:x="21673" fg:w="9"/><text x="97.2947%" y="207.50"></text></g><g><title>processInputBuffer (1,081 samples, 4.84%)</title><rect x="92.2760%" y="213" width="4.8404%" height="15" fill="rgb(246,155,31)" fg:x="20608" fg:w="1081"/><text x="92.5260%" y="223.50">proces..</text></g><g><title>updateClientMemUsageAndBucket (7 samples, 0.03%)</title><rect x="97.0850%" y="197" width="0.0313%" height="15" fill="rgb(207,48,25)" fg:x="21682" fg:w="7"/><text x="97.3350%" y="207.50"></text></g><g><title>pthread_self (4 samples, 0.02%)</title><rect x="97.0985%" y="181" width="0.0179%" height="15" fill="rgb(207,222,5)" fg:x="21685" fg:w="4"/><text x="97.3485%" y="191.50"></text></g><g><title>read (70 samples, 0.31%)</title><rect x="97.1164%" y="213" width="0.3134%" height="15" fill="rgb(209,69,29)" fg:x="21689" fg:w="70"/><text x="97.3664%" y="223.50"></text></g><g><title>resetReusableQueryBuf (16 samples, 0.07%)</title><rect x="97.4298%" y="213" width="0.0716%" height="15" fill="rgb(252,174,29)" fg:x="21759" fg:w="16"/><text x="97.6798%" y="223.50"></text></g><g><title>_tlv_get_addr (11 samples, 0.05%)</title><rect x="97.4522%" y="197" width="0.0493%" height="15" fill="rgb(226,77,8)" fg:x="21764" fg:w="11"/><text x="97.7022%" y="207.50"></text></g><g><title>sdsIncrLen (6 samples, 0.03%)</title><rect x="97.5015%" y="213" width="0.0269%" height="15" fill="rgb(246,34,45)" fg:x="21775" fg:w="6"/><text x="97.7515%" y="223.50"></text></g><g><title>connSocketEventHandler (8,682 samples, 38.88%)</title><rect x="58.6576%" y="245" width="38.8752%" height="15" fill="rgb(205,41,20)" fg:x="13100" fg:w="8682"/><text x="58.9076%" y="255.50">connSocketEventHandler</text></g><g><title>readQueryFromClient (8,655 samples, 38.75%)</title><rect x="58.7785%" y="229" width="38.7543%" height="15" fill="rgb(220,13,26)" fg:x="13127" fg:w="8655"/><text x="59.0285%" y="239.50">readQueryFromClient</text></g><g><title>kevent (520 samples, 2.33%)</title><rect x="97.5328%" y="245" width="2.3284%" height="15" fill="rgb(208,215,22)" fg:x="21782" fg:w="520"/><text x="97.7828%" y="255.50">k..</text></g><g><title>task_for_pid (5 samples, 0.02%)</title><rect x="99.8701%" y="213" width="0.0224%" height="15" fill="rgb(227,113,0)" fg:x="22304" fg:w="5"/><text x="100.1201%" y="223.50"></text></g><g><title>cronUpdateMemoryStats (7 samples, 0.03%)</title><rect x="99.8701%" y="229" width="0.0313%" height="15" fill="rgb(226,174,8)" fg:x="22304" fg:w="7"/><text x="100.1201%" y="239.50"></text></g><g><title>dictGenHashFunction (3 samples, 0.01%)</title><rect x="99.9104%" y="181" width="0.0134%" height="15" fill="rgb(205,41,2)" fg:x="22313" fg:w="3"/><text x="100.1604%" y="191.50"></text></g><g><title>serverCron (15 samples, 0.07%)</title><rect x="99.8612%" y="245" width="0.0672%" height="15" fill="rgb(245,109,53)" fg:x="22302" fg:w="15"/><text x="100.1112%" y="255.50"></text></g><g><title>kvstoreIncrementallyRehash (6 samples, 0.03%)</title><rect x="99.9015%" y="229" width="0.0269%" height="15" fill="rgb(237,184,28)" fg:x="22311" fg:w="6"/><text x="100.1515%" y="239.50"></text></g><g><title>dictRehash (6 samples, 0.03%)</title><rect x="99.9015%" y="213" width="0.0269%" height="15" fill="rgb(223,113,24)" fg:x="22311" fg:w="6"/><text x="100.1515%" y="223.50"></text></g><g><title>rehashEntriesInBucketAtIndex (6 samples, 0.03%)</title><rect x="99.9015%" y="197" width="0.0269%" height="15" fill="rgb(226,12,36)" fg:x="22311" fg:w="6"/><text x="100.1515%" y="207.50"></text></g><g><title>aeProcessEvents (22,313 samples, 99.91%)</title><rect x="0.0224%" y="261" width="99.9104%" height="15" fill="rgb(232,132,35)" fg:x="5" fg:w="22313"/><text x="0.2724%" y="271.50">aeProcessEvents</text></g><g><title>connTypeRegister (3 samples, 0.01%)</title><rect x="99.9328%" y="261" width="0.0134%" height="15" fill="rgb(242,52,38)" fg:x="22318" fg:w="3"/><text x="100.1828%" y="271.50"></text></g><g><title>tlsInit (3 samples, 0.01%)</title><rect x="99.9328%" y="245" width="0.0134%" height="15" fill="rgb(207,138,6)" fg:x="22318" fg:w="3"/><text x="100.1828%" y="255.50"></text></g><g><title>kevent (11 samples, 0.05%)</title><rect x="99.9463%" y="261" width="0.0493%" height="15" fill="rgb(208,215,22)" fg:x="22321" fg:w="11"/><text x="100.1963%" y="271.50"></text></g><g><title>all (22,333 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="22333"/><text x="0.2500%" y="319.50"></text></g><g><title>start (22,333 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(243,214,39)" fg:x="0" fg:w="22333"/><text x="0.2500%" y="303.50">start</text></g><g><title>main (22,328 samples, 99.98%)</title><rect x="0.0224%" y="277" width="99.9776%" height="15" fill="rgb(238,28,47)" fg:x="5" fg:w="22328"/><text x="0.2724%" y="287.50">main</text></g></svg></svg>