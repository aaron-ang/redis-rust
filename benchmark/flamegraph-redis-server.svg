<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="50923"><g><title>_st_localsub (12 samples, 0.02%)</title><rect x="0.0511%" y="181" width="0.0236%" height="15" fill="rgb(227,0,7)" fg:x="26" fg:w="12"/><text x="0.3011%" y="191.50"></text></g><g><title>_st_tzset_basic (9 samples, 0.02%)</title><rect x="0.0746%" y="181" width="0.0177%" height="15" fill="rgb(217,0,24)" fg:x="38" fg:w="9"/><text x="0.3246%" y="191.50"></text></g><g><title>getenv_copy_np (9 samples, 0.02%)</title><rect x="0.0746%" y="165" width="0.0177%" height="15" fill="rgb(221,193,54)" fg:x="38" fg:w="9"/><text x="0.3246%" y="175.50"></text></g><g><title>__findenv_locked (9 samples, 0.02%)</title><rect x="0.0746%" y="149" width="0.0177%" height="15" fill="rgb(248,212,6)" fg:x="38" fg:w="9"/><text x="0.3246%" y="159.50"></text></g><g><title>afterSleep (43 samples, 0.08%)</title><rect x="0.0393%" y="229" width="0.0844%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="43"/><text x="0.2893%" y="239.50"></text></g><g><title>updateCachedTime (41 samples, 0.08%)</title><rect x="0.0432%" y="213" width="0.0805%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="41"/><text x="0.2932%" y="223.50"></text></g><g><title>localtime_r (37 samples, 0.07%)</title><rect x="0.0511%" y="197" width="0.0727%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="37"/><text x="0.3011%" y="207.50"></text></g><g><title>tzsetwall_basic (14 samples, 0.03%)</title><rect x="0.0962%" y="181" width="0.0275%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="14"/><text x="0.3462%" y="191.50"></text></g><g><title>notify_check_tz (13 samples, 0.03%)</title><rect x="0.0982%" y="165" width="0.0255%" height="15" fill="rgb(218,30,26)" fg:x="50" fg:w="13"/><text x="0.3482%" y="175.50"></text></g><g><title>notify_check (13 samples, 0.03%)</title><rect x="0.0982%" y="149" width="0.0255%" height="15" fill="rgb(220,122,19)" fg:x="50" fg:w="13"/><text x="0.3482%" y="159.50"></text></g><g><title>connSocketWritev (19 samples, 0.04%)</title><rect x="0.2553%" y="165" width="0.0373%" height="15" fill="rgb(250,228,42)" fg:x="130" fg:w="19"/><text x="0.5053%" y="175.50"></text></g><g><title>writev (19 samples, 0.04%)</title><rect x="0.2553%" y="149" width="0.0373%" height="15" fill="rgb(240,193,28)" fg:x="130" fg:w="19"/><text x="0.5053%" y="159.50"></text></g><g><title>_writevToClient (20 samples, 0.04%)</title><rect x="0.2553%" y="181" width="0.0393%" height="15" fill="rgb(216,20,37)" fg:x="130" fg:w="20"/><text x="0.5053%" y="191.50"></text></g><g><title>connSocketWrite (17,411 samples, 34.19%)</title><rect x="0.3005%" y="181" width="34.1908%" height="15" fill="rgb(206,188,39)" fg:x="153" fg:w="17411"/><text x="0.5505%" y="191.50">connSocketWrite</text></g><g><title>write (17,397 samples, 34.16%)</title><rect x="0.3279%" y="165" width="34.1633%" height="15" fill="rgb(217,207,13)" fg:x="167" fg:w="17397"/><text x="0.5779%" y="175.50">write</text></g><g><title>updateClientMemUsageAndBucket (16 samples, 0.03%)</title><rect x="34.4913%" y="181" width="0.0314%" height="15" fill="rgb(231,73,38)" fg:x="17564" fg:w="16"/><text x="34.7413%" y="191.50"></text></g><g><title>handleClientsWithPendingWrites (17,647 samples, 34.65%)</title><rect x="0.1473%" y="213" width="34.6543%" height="15" fill="rgb(225,20,46)" fg:x="75" fg:w="17647"/><text x="0.3973%" y="223.50">handleClientsWithPendingWrites</text></g><g><title>writeToClient (17,623 samples, 34.61%)</title><rect x="0.1944%" y="197" width="34.6072%" height="15" fill="rgb(210,31,41)" fg:x="99" fg:w="17623"/><text x="0.4444%" y="207.50">writeToClient</text></g><g><title>write (142 samples, 0.28%)</title><rect x="34.5227%" y="181" width="0.2789%" height="15" fill="rgb(221,200,47)" fg:x="17580" fg:w="142"/><text x="34.7727%" y="191.50"></text></g><g><title>beforeSleep (17,664 samples, 34.69%)</title><rect x="0.1237%" y="229" width="34.6877%" height="15" fill="rgb(226,26,5)" fg:x="63" fg:w="17664"/><text x="0.3737%" y="239.50">beforeSleep</text></g><g><title>connSocketAcceptHandler (8 samples, 0.02%)</title><rect x="34.8173%" y="229" width="0.0157%" height="15" fill="rgb(249,33,26)" fg:x="17730" fg:w="8"/><text x="35.0673%" y="239.50"></text></g><g><title>_sdsMakeRoomFor (11 samples, 0.02%)</title><rect x="34.9862%" y="197" width="0.0216%" height="15" fill="rgb(235,183,28)" fg:x="17816" fg:w="11"/><text x="35.2362%" y="207.50"></text></g><g><title>connSocketRead (9,761 samples, 19.17%)</title><rect x="35.0136%" y="197" width="19.1682%" height="15" fill="rgb(221,5,38)" fg:x="17830" fg:w="9761"/><text x="35.2636%" y="207.50">connSocketRead</text></g><g><title>read (9,748 samples, 19.14%)</title><rect x="35.0392%" y="181" width="19.1426%" height="15" fill="rgb(247,18,42)" fg:x="17843" fg:w="9748"/><text x="35.2892%" y="191.50">read</text></g><g><title>createEmbeddedStringObject (16 samples, 0.03%)</title><rect x="54.1818%" y="197" width="0.0314%" height="15" fill="rgb(241,131,45)" fg:x="27591" fg:w="16"/><text x="54.4318%" y="207.50"></text></g><g><title>processCommandAndResetClient (22 samples, 0.04%)</title><rect x="54.2132%" y="197" width="0.0432%" height="15" fill="rgb(249,31,29)" fg:x="27607" fg:w="22"/><text x="54.4632%" y="207.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (94 samples, 0.18%)</title><rect x="54.8082%" y="181" width="0.1846%" height="15" fill="rgb(225,111,53)" fg:x="27910" fg:w="94"/><text x="55.0582%" y="191.50"></text></g><g><title>ACLCheckAllUserCommandPerm (11 samples, 0.02%)</title><rect x="54.9928%" y="181" width="0.0216%" height="15" fill="rgb(238,160,17)" fg:x="28004" fg:w="11"/><text x="55.2428%" y="191.50"></text></g><g><title>DYLD-STUB$$strchr (22 samples, 0.04%)</title><rect x="55.0144%" y="181" width="0.0432%" height="15" fill="rgb(214,148,48)" fg:x="28015" fg:w="22"/><text x="55.2644%" y="191.50"></text></g><g><title>_platform_strchr (233 samples, 0.46%)</title><rect x="55.0576%" y="181" width="0.4576%" height="15" fill="rgb(232,36,49)" fg:x="28037" fg:w="233"/><text x="55.3076%" y="191.50"></text></g><g><title>malloc_size (19 samples, 0.04%)</title><rect x="55.5820%" y="165" width="0.0373%" height="15" fill="rgb(209,103,24)" fg:x="28304" fg:w="19"/><text x="55.8320%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (15 samples, 0.03%)</title><rect x="55.7155%" y="149" width="0.0295%" height="15" fill="rgb(229,88,8)" fg:x="28372" fg:w="15"/><text x="55.9655%" y="159.50"></text></g><g><title>sdsnewplacement (245 samples, 0.48%)</title><rect x="55.6193%" y="165" width="0.4811%" height="15" fill="rgb(213,181,19)" fg:x="28323" fg:w="245"/><text x="55.8693%" y="175.50"></text></g><g><title>_platform_memmove (181 samples, 0.36%)</title><rect x="55.7449%" y="149" width="0.3554%" height="15" fill="rgb(254,191,54)" fg:x="28387" fg:w="181"/><text x="55.9949%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (82 samples, 0.16%)</title><rect x="56.2477%" y="149" width="0.1610%" height="15" fill="rgb(241,83,37)" fg:x="28643" fg:w="82"/><text x="56.4977%" y="159.50"></text></g><g><title>DYLD-STUB$$malloc (14 samples, 0.03%)</title><rect x="56.4087%" y="149" width="0.0275%" height="15" fill="rgb(233,36,39)" fg:x="28725" fg:w="14"/><text x="56.6587%" y="159.50"></text></g><g><title>DYLD-STUB$$malloc_size (13 samples, 0.03%)</title><rect x="56.4362%" y="149" width="0.0255%" height="15" fill="rgb(226,3,54)" fg:x="28739" fg:w="13"/><text x="56.6862%" y="159.50"></text></g><g><title>_malloc_zone_malloc (103 samples, 0.20%)</title><rect x="56.4617%" y="149" width="0.2023%" height="15" fill="rgb(245,192,40)" fg:x="28752" fg:w="103"/><text x="56.7117%" y="159.50"></text></g><g><title>_tlv_get_addr (75 samples, 0.15%)</title><rect x="56.6640%" y="149" width="0.1473%" height="15" fill="rgb(238,167,29)" fg:x="28855" fg:w="75"/><text x="56.9140%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (49 samples, 0.10%)</title><rect x="56.8113%" y="149" width="0.0962%" height="15" fill="rgb(232,182,51)" fg:x="28930" fg:w="49"/><text x="57.0613%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (247 samples, 0.49%)</title><rect x="56.9095%" y="149" width="0.4850%" height="15" fill="rgb(231,60,39)" fg:x="28980" fg:w="247"/><text x="57.1595%" y="159.50"></text></g><g><title>malloc (6 samples, 0.01%)</title><rect x="57.3945%" y="149" width="0.0118%" height="15" fill="rgb(208,69,12)" fg:x="29227" fg:w="6"/><text x="57.6445%" y="159.50"></text></g><g><title>malloc_size (285 samples, 0.56%)</title><rect x="57.4063%" y="149" width="0.5597%" height="15" fill="rgb(235,93,37)" fg:x="29233" fg:w="285"/><text x="57.6563%" y="159.50"></text></g><g><title>xzm_malloc_zone_size (207 samples, 0.41%)</title><rect x="57.5595%" y="133" width="0.4065%" height="15" fill="rgb(213,116,39)" fg:x="29311" fg:w="207"/><text x="57.8095%" y="143.50"></text></g><g><title>createEmbeddedStringObject (1,241 samples, 2.44%)</title><rect x="55.5329%" y="181" width="2.4370%" height="15" fill="rgb(222,207,29)" fg:x="28279" fg:w="1241"/><text x="55.7829%" y="191.50">cr..</text></g><g><title>zmalloc_usable (952 samples, 1.87%)</title><rect x="56.1004%" y="165" width="1.8695%" height="15" fill="rgb(206,96,30)" fg:x="28568" fg:w="952"/><text x="56.3504%" y="175.50">z..</text></g><g><title>sdsnewplacement (68 samples, 0.13%)</title><rect x="58.0170%" y="149" width="0.1335%" height="15" fill="rgb(218,138,4)" fg:x="29544" fg:w="68"/><text x="58.2670%" y="159.50"></text></g><g><title>_platform_memmove (59 samples, 0.12%)</title><rect x="58.0347%" y="133" width="0.1159%" height="15" fill="rgb(250,191,14)" fg:x="29553" fg:w="59"/><text x="58.2847%" y="143.50"></text></g><g><title>_xzm_chunk_list_pop (9 samples, 0.02%)</title><rect x="58.4962%" y="101" width="0.0177%" height="15" fill="rgb(239,60,40)" fg:x="29788" fg:w="9"/><text x="58.7462%" y="111.50"></text></g><g><title>_xzm_segment_group_alloc_segment (8 samples, 0.02%)</title><rect x="58.5335%" y="85" width="0.0157%" height="15" fill="rgb(206,27,48)" fg:x="29807" fg:w="8"/><text x="58.7835%" y="95.50"></text></g><g><title>_xzm_xzone_find_and_malloc_from_freelist_chunk (41 samples, 0.08%)</title><rect x="58.4922%" y="117" width="0.0805%" height="15" fill="rgb(225,35,8)" fg:x="29786" fg:w="41"/><text x="58.7422%" y="127.50"></text></g><g><title>xzm_segment_group_alloc_chunk (26 samples, 0.05%)</title><rect x="58.5217%" y="101" width="0.0511%" height="15" fill="rgb(250,213,24)" fg:x="29801" fg:w="26"/><text x="58.7717%" y="111.50"></text></g><g><title>_xzm_segment_group_find_and_allocate_chunk (12 samples, 0.02%)</title><rect x="58.5492%" y="85" width="0.0236%" height="15" fill="rgb(247,123,22)" fg:x="29815" fg:w="12"/><text x="58.7992%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (197 samples, 0.39%)</title><rect x="58.1937%" y="133" width="0.3869%" height="15" fill="rgb(231,138,38)" fg:x="29634" fg:w="197"/><text x="58.4437%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (32 samples, 0.06%)</title><rect x="58.5806%" y="133" width="0.0628%" height="15" fill="rgb(231,145,46)" fg:x="29831" fg:w="32"/><text x="58.8306%" y="143.50"></text></g><g><title>_sdsnewlen (340 samples, 0.67%)</title><rect x="58.0033%" y="165" width="0.6677%" height="15" fill="rgb(251,118,11)" fg:x="29537" fg:w="340"/><text x="58.2533%" y="175.50"></text></g><g><title>zmalloc_usable (265 samples, 0.52%)</title><rect x="58.1505%" y="149" width="0.5204%" height="15" fill="rgb(217,147,25)" fg:x="29612" fg:w="265"/><text x="58.4005%" y="159.50"></text></g><g><title>malloc_size (14 samples, 0.03%)</title><rect x="58.6434%" y="133" width="0.0275%" height="15" fill="rgb(247,81,37)" fg:x="29863" fg:w="14"/><text x="58.8934%" y="143.50"></text></g><g><title>xzm_malloc_zone_size (9 samples, 0.02%)</title><rect x="58.6533%" y="117" width="0.0177%" height="15" fill="rgb(209,12,38)" fg:x="29868" fg:w="9"/><text x="58.9033%" y="127.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="58.6886%" y="149" width="0.0118%" height="15" fill="rgb(227,1,9)" fg:x="29886" fg:w="6"/><text x="58.9386%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (23 samples, 0.05%)</title><rect x="58.7220%" y="149" width="0.0452%" height="15" fill="rgb(248,47,43)" fg:x="29903" fg:w="23"/><text x="58.9720%" y="159.50"></text></g><g><title>createStringObject (423 samples, 0.83%)</title><rect x="57.9699%" y="181" width="0.8307%" height="15" fill="rgb(221,10,30)" fg:x="29520" fg:w="423"/><text x="58.2199%" y="191.50"></text></g><g><title>zmalloc (65 samples, 0.13%)</title><rect x="58.6729%" y="165" width="0.1276%" height="15" fill="rgb(210,229,1)" fg:x="29878" fg:w="65"/><text x="58.9229%" y="175.50"></text></g><g><title>malloc_size (16 samples, 0.03%)</title><rect x="58.7691%" y="149" width="0.0314%" height="15" fill="rgb(222,148,37)" fg:x="29927" fg:w="16"/><text x="59.0191%" y="159.50"></text></g><g><title>xzm_malloc_zone_size (6 samples, 0.01%)</title><rect x="58.7888%" y="133" width="0.0118%" height="15" fill="rgb(234,67,33)" fg:x="29937" fg:w="6"/><text x="59.0388%" y="143.50"></text></g><g><title>evictClients (16 samples, 0.03%)</title><rect x="58.8005%" y="181" width="0.0314%" height="15" fill="rgb(247,98,35)" fg:x="29943" fg:w="16"/><text x="59.0505%" y="191.50"></text></g><g><title>getCommandFlags (8 samples, 0.02%)</title><rect x="58.8320%" y="181" width="0.0157%" height="15" fill="rgb(247,138,52)" fg:x="29959" fg:w="8"/><text x="59.0820%" y="191.50"></text></g><g><title>moduleCallCommandFilters (8 samples, 0.02%)</title><rect x="58.8516%" y="181" width="0.0157%" height="15" fill="rgb(213,79,30)" fg:x="29969" fg:w="8"/><text x="59.1016%" y="191.50"></text></g><g><title>ACLCheckAllUserCommandPerm (51 samples, 0.10%)</title><rect x="59.4682%" y="165" width="0.1002%" height="15" fill="rgb(246,177,23)" fg:x="30283" fg:w="51"/><text x="59.7182%" y="175.50"></text></g><g><title>ACLSelectorCheckCmd (21 samples, 0.04%)</title><rect x="59.5271%" y="149" width="0.0412%" height="15" fill="rgb(230,62,27)" fg:x="30313" fg:w="21"/><text x="59.7771%" y="159.50"></text></g><g><title>ACLSelectorCheckCmd (19 samples, 0.04%)</title><rect x="59.5684%" y="165" width="0.0373%" height="15" fill="rgb(216,154,8)" fg:x="30334" fg:w="19"/><text x="59.8184%" y="175.50"></text></g><g><title>DYLD-STUB$$gettimeofday (17 samples, 0.03%)</title><rect x="59.9788%" y="149" width="0.0334%" height="15" fill="rgb(244,35,45)" fg:x="30543" fg:w="17"/><text x="60.2288%" y="159.50"></text></g><g><title>addReplyBulk (10 samples, 0.02%)</title><rect x="60.0259%" y="149" width="0.0196%" height="15" fill="rgb(251,115,12)" fg:x="30567" fg:w="10"/><text x="60.2759%" y="159.50"></text></g><g><title>postExecutionUnitOperations (30 samples, 0.06%)</title><rect x="60.1123%" y="133" width="0.0589%" height="15" fill="rgb(240,54,50)" fg:x="30611" fg:w="30"/><text x="60.3623%" y="143.50"></text></g><g><title>afterCommand (80 samples, 0.16%)</title><rect x="60.0456%" y="149" width="0.1571%" height="15" fill="rgb(233,84,52)" fg:x="30577" fg:w="80"/><text x="60.2956%" y="159.50"></text></g><g><title>trackingHandlePendingKeyInvalidations (16 samples, 0.03%)</title><rect x="60.1712%" y="133" width="0.0314%" height="15" fill="rgb(207,117,47)" fg:x="30641" fg:w="16"/><text x="60.4212%" y="143.50"></text></g><g><title>clusterSlotStatsAddCpuDuration (14 samples, 0.03%)</title><rect x="60.2105%" y="149" width="0.0275%" height="15" fill="rgb(249,43,39)" fg:x="30661" fg:w="14"/><text x="60.4605%" y="159.50"></text></g><g><title>enterExecutionUnit (8 samples, 0.02%)</title><rect x="60.2380%" y="149" width="0.0157%" height="15" fill="rgb(209,38,44)" fg:x="30675" fg:w="8"/><text x="60.4880%" y="159.50"></text></g><g><title>freeClientOriginalArgv (8 samples, 0.02%)</title><rect x="60.2557%" y="149" width="0.0157%" height="15" fill="rgb(236,212,23)" fg:x="30684" fg:w="8"/><text x="60.5057%" y="159.50"></text></g><g><title>getCommand (6 samples, 0.01%)</title><rect x="60.2714%" y="149" width="0.0118%" height="15" fill="rgb(242,79,21)" fg:x="30692" fg:w="6"/><text x="60.5214%" y="159.50"></text></g><g><title>_addReplyToBufferOrList (103 samples, 0.20%)</title><rect x="60.3244%" y="133" width="0.2023%" height="15" fill="rgb(211,96,35)" fg:x="30719" fg:w="103"/><text x="60.5744%" y="143.50"></text></g><g><title>_platform_memmove (19 samples, 0.04%)</title><rect x="60.4894%" y="117" width="0.0373%" height="15" fill="rgb(253,215,40)" fg:x="30803" fg:w="19"/><text x="60.7394%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (9 samples, 0.02%)</title><rect x="78.3791%" y="101" width="0.0177%" height="15" fill="rgb(211,81,21)" fg:x="39913" fg:w="9"/><text x="78.6291%" y="111.50"></text></g><g><title>_addReplyToBufferOrList (1,307 samples, 2.57%)</title><rect x="78.1121%" y="117" width="2.5666%" height="15" fill="rgb(208,190,38)" fg:x="39777" fg:w="1307"/><text x="78.3621%" y="127.50">_a..</text></g><g><title>_platform_memmove (1,162 samples, 2.28%)</title><rect x="78.3968%" y="101" width="2.2819%" height="15" fill="rgb(235,213,38)" fg:x="39922" fg:w="1162"/><text x="78.6468%" y="111.50">_..</text></g><g><title>addReplyBulk (10,321 samples, 20.27%)</title><rect x="60.5267%" y="133" width="20.2679%" height="15" fill="rgb(237,122,38)" fg:x="30822" fg:w="10321"/><text x="60.7767%" y="143.50">addReplyBulk</text></g><g><title>ull2string (53 samples, 0.10%)</title><rect x="80.6905%" y="117" width="0.1041%" height="15" fill="rgb(244,218,35)" fg:x="41090" fg:w="53"/><text x="80.9405%" y="127.50"></text></g><g><title>digits10 (38 samples, 0.07%)</title><rect x="80.7199%" y="101" width="0.0746%" height="15" fill="rgb(240,68,47)" fg:x="41105" fg:w="38"/><text x="80.9699%" y="111.50"></text></g><g><title>lookupKey (9 samples, 0.02%)</title><rect x="80.7945%" y="133" width="0.0177%" height="15" fill="rgb(210,16,53)" fg:x="41143" fg:w="9"/><text x="81.0445%" y="143.50"></text></g><g><title>_addReplyToBufferOrList (47 samples, 0.09%)</title><rect x="80.8397%" y="117" width="0.0923%" height="15" fill="rgb(235,124,12)" fg:x="41166" fg:w="47"/><text x="81.0897%" y="127.50"></text></g><g><title>_platform_memmove (28 samples, 0.05%)</title><rect x="80.8770%" y="101" width="0.0550%" height="15" fill="rgb(224,169,11)" fg:x="41185" fg:w="28"/><text x="81.1270%" y="111.50"></text></g><g><title>clientHasPendingReplies (12 samples, 0.02%)</title><rect x="81.0125%" y="101" width="0.0236%" height="15" fill="rgb(250,166,2)" fg:x="41254" fg:w="12"/><text x="81.2625%" y="111.50"></text></g><g><title>addReply (54 samples, 0.11%)</title><rect x="80.9320%" y="117" width="0.1060%" height="15" fill="rgb(242,216,29)" fg:x="41213" fg:w="54"/><text x="81.1820%" y="127.50"></text></g><g><title>addReplyOrErrorObject (13 samples, 0.03%)</title><rect x="81.0380%" y="117" width="0.0255%" height="15" fill="rgb(230,116,27)" fg:x="41267" fg:w="13"/><text x="81.2880%" y="127.50"></text></g><g><title>dictFindLinkInternal (7 samples, 0.01%)</title><rect x="81.0636%" y="117" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="41280" fg:w="7"/><text x="81.3136%" y="127.50"></text></g><g><title>dictGenHashFunction (20 samples, 0.04%)</title><rect x="84.0072%" y="53" width="0.0393%" height="15" fill="rgb(253,11,6)" fg:x="42779" fg:w="20"/><text x="84.2572%" y="63.50"></text></g><g><title>_dictRehashStepIfNeeded (69 samples, 0.14%)</title><rect x="83.9267%" y="85" width="0.1355%" height="15" fill="rgb(247,143,39)" fg:x="42738" fg:w="69"/><text x="84.1767%" y="95.50"></text></g><g><title>rehashEntriesInBucketAtIndex (46 samples, 0.09%)</title><rect x="83.9719%" y="69" width="0.0903%" height="15" fill="rgb(236,97,10)" fg:x="42761" fg:w="46"/><text x="84.2219%" y="79.50"></text></g><g><title>dictGenHashFunction (112 samples, 0.22%)</title><rect x="84.0681%" y="85" width="0.2199%" height="15" fill="rgb(233,208,19)" fg:x="42810" fg:w="112"/><text x="84.3181%" y="95.50"></text></g><g><title>dictGenHashFunction (30 samples, 0.06%)</title><rect x="84.3214%" y="53" width="0.0589%" height="15" fill="rgb(216,164,2)" fg:x="42939" fg:w="30"/><text x="84.5714%" y="63.50"></text></g><g><title>dictRehash (55 samples, 0.11%)</title><rect x="84.2880%" y="85" width="0.1080%" height="15" fill="rgb(220,129,5)" fg:x="42922" fg:w="55"/><text x="84.5380%" y="95.50"></text></g><g><title>rehashEntriesInBucketAtIndex (53 samples, 0.10%)</title><rect x="84.2920%" y="69" width="0.1041%" height="15" fill="rgb(242,17,10)" fg:x="42924" fg:w="53"/><text x="84.5420%" y="79.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.01%)</title><rect x="86.9214%" y="69" width="0.0118%" height="15" fill="rgb(242,107,0)" fg:x="44263" fg:w="6"/><text x="87.1714%" y="79.50"></text></g><g><title>_platform_memcmp (666 samples, 1.31%)</title><rect x="86.9332%" y="69" width="1.3079%" height="15" fill="rgb(251,28,31)" fg:x="44269" fg:w="666"/><text x="87.1832%" y="79.50"></text></g><g><title>dictSdsCompareKV (1,962 samples, 3.85%)</title><rect x="84.3960%" y="85" width="3.8529%" height="15" fill="rgb(233,223,10)" fg:x="42977" fg:w="1962"/><text x="84.6460%" y="95.50">dict..</text></g><g><title>dictFindLinkInternal (3,614 samples, 7.10%)</title><rect x="81.1676%" y="101" width="7.0970%" height="15" fill="rgb(215,21,27)" fg:x="41333" fg:w="3614"/><text x="81.4176%" y="111.50">dictFindLi..</text></g><g><title>dictSdsHash (8 samples, 0.02%)</title><rect x="88.2489%" y="85" width="0.0157%" height="15" fill="rgb(232,23,21)" fg:x="44939" fg:w="8"/><text x="88.4989%" y="95.50"></text></g><g><title>expireIfNeeded (28 samples, 0.05%)</title><rect x="88.2646%" y="101" width="0.0550%" height="15" fill="rgb(244,5,23)" fg:x="44947" fg:w="28"/><text x="88.5146%" y="111.50"></text></g><g><title>keyIsExpired (14 samples, 0.03%)</title><rect x="88.2921%" y="85" width="0.0275%" height="15" fill="rgb(226,81,46)" fg:x="44961" fg:w="14"/><text x="88.5421%" y="95.50"></text></g><g><title>getKeySlot (11 samples, 0.02%)</title><rect x="88.3196%" y="101" width="0.0216%" height="15" fill="rgb(247,70,30)" fg:x="44975" fg:w="11"/><text x="88.5696%" y="111.50"></text></g><g><title>kvstoreDictFindLink (13 samples, 0.03%)</title><rect x="88.3412%" y="101" width="0.0255%" height="15" fill="rgb(212,68,19)" fg:x="44986" fg:w="13"/><text x="88.5912%" y="111.50"></text></g><g><title>lookupKey (3,733 samples, 7.33%)</title><rect x="81.0773%" y="117" width="7.3307%" height="15" fill="rgb(240,187,13)" fg:x="41287" fg:w="3733"/><text x="81.3273%" y="127.50">lookupKey</text></g><g><title>notifyKeyspaceEvent (21 samples, 0.04%)</title><rect x="88.3667%" y="101" width="0.0412%" height="15" fill="rgb(223,113,26)" fg:x="44999" fg:w="21"/><text x="88.6167%" y="111.50"></text></g><g><title>lookupKeyReadOrReply (3,883 samples, 7.63%)</title><rect x="80.8122%" y="133" width="7.6252%" height="15" fill="rgb(206,192,2)" fg:x="41152" fg:w="3883"/><text x="81.0622%" y="143.50">lookupKeyR..</text></g><g><title>notifyKeyspaceEvent (15 samples, 0.03%)</title><rect x="88.4080%" y="117" width="0.0295%" height="15" fill="rgb(241,108,4)" fg:x="45020" fg:w="15"/><text x="88.6580%" y="127.50"></text></g><g><title>getGenericCommand (14,348 samples, 28.18%)</title><rect x="60.2832%" y="149" width="28.1759%" height="15" fill="rgb(247,173,49)" fg:x="30698" fg:w="14348"/><text x="60.5332%" y="159.50">getGenericCommand</text></g><g><title>ull2string (11 samples, 0.02%)</title><rect x="88.4374%" y="133" width="0.0216%" height="15" fill="rgb(224,114,35)" fg:x="45035" fg:w="11"/><text x="88.6874%" y="143.50"></text></g><g><title>DYLD-STUB$$__commpage_gettimeofday (10 samples, 0.02%)</title><rect x="88.5494%" y="133" width="0.0196%" height="15" fill="rgb(245,159,27)" fg:x="45092" fg:w="10"/><text x="88.7994%" y="143.50"></text></g><g><title>__commpage_gettimeofday_internal (1,169 samples, 2.30%)</title><rect x="88.5710%" y="133" width="2.2956%" height="15" fill="rgb(245,172,44)" fg:x="45103" fg:w="1169"/><text x="88.8210%" y="143.50">_..</text></g><g><title>mach_absolute_time (1,113 samples, 2.19%)</title><rect x="88.6809%" y="117" width="2.1857%" height="15" fill="rgb(236,23,11)" fg:x="45159" fg:w="1113"/><text x="88.9309%" y="127.50">m..</text></g><g><title>gettimeofday (1,233 samples, 2.42%)</title><rect x="88.4590%" y="149" width="2.4213%" height="15" fill="rgb(205,117,38)" fg:x="45046" fg:w="1233"/><text x="88.7090%" y="159.50">ge..</text></g><g><title>mach_absolute_time (7 samples, 0.01%)</title><rect x="90.8666%" y="133" width="0.0137%" height="15" fill="rgb(237,72,25)" fg:x="46272" fg:w="7"/><text x="91.1166%" y="143.50"></text></g><g><title>hdr_record_values (30 samples, 0.06%)</title><rect x="90.8862%" y="149" width="0.0589%" height="15" fill="rgb(244,70,9)" fg:x="46282" fg:w="30"/><text x="91.1362%" y="159.50"></text></g><g><title>lookupKeyReadOrReply (10 samples, 0.02%)</title><rect x="90.9471%" y="149" width="0.0196%" height="15" fill="rgb(217,125,39)" fg:x="46313" fg:w="10"/><text x="91.1971%" y="159.50"></text></g><g><title>replicationFeedMonitors (12 samples, 0.02%)</title><rect x="90.9766%" y="149" width="0.0236%" height="15" fill="rgb(235,36,10)" fg:x="46328" fg:w="12"/><text x="91.2266%" y="159.50"></text></g><g><title>_addReplyToBufferOrList (15 samples, 0.03%)</title><rect x="91.0276%" y="133" width="0.0295%" height="15" fill="rgb(251,123,47)" fg:x="46354" fg:w="15"/><text x="91.2776%" y="143.50"></text></g><g><title>_platform_memmove (6 samples, 0.01%)</title><rect x="91.0453%" y="117" width="0.0118%" height="15" fill="rgb(221,13,13)" fg:x="46363" fg:w="6"/><text x="91.2953%" y="127.50"></text></g><g><title>addReply (7 samples, 0.01%)</title><rect x="91.0571%" y="133" width="0.0137%" height="15" fill="rgb(238,131,9)" fg:x="46369" fg:w="7"/><text x="91.3071%" y="143.50"></text></g><g><title>_dictRehashStepIfNeeded (15 samples, 0.03%)</title><rect x="91.3909%" y="101" width="0.0295%" height="15" fill="rgb(211,50,8)" fg:x="46539" fg:w="15"/><text x="91.6409%" y="111.50"></text></g><g><title>rehashEntriesInBucketAtIndex (11 samples, 0.02%)</title><rect x="91.3988%" y="85" width="0.0216%" height="15" fill="rgb(245,182,24)" fg:x="46543" fg:w="11"/><text x="91.6488%" y="95.50"></text></g><g><title>dictGenHashFunction (15 samples, 0.03%)</title><rect x="91.4204%" y="101" width="0.0295%" height="15" fill="rgb(242,14,37)" fg:x="46554" fg:w="15"/><text x="91.6704%" y="111.50"></text></g><g><title>dictSdsCompareKV (221 samples, 0.43%)</title><rect x="91.4597%" y="101" width="0.4340%" height="15" fill="rgb(246,228,12)" fg:x="46574" fg:w="221"/><text x="91.7097%" y="111.50"></text></g><g><title>_platform_memcmp (81 samples, 0.16%)</title><rect x="91.7346%" y="85" width="0.1591%" height="15" fill="rgb(213,55,15)" fg:x="46714" fg:w="81"/><text x="91.9846%" y="95.50"></text></g><g><title>dictFindLinkInternal (410 samples, 0.81%)</title><rect x="91.0924%" y="117" width="0.8051%" height="15" fill="rgb(209,9,3)" fg:x="46387" fg:w="410"/><text x="91.3424%" y="127.50"></text></g><g><title>lookupKey (426 samples, 0.84%)</title><rect x="91.0826%" y="133" width="0.8366%" height="15" fill="rgb(230,59,30)" fg:x="46382" fg:w="426"/><text x="91.3326%" y="143.50"></text></g><g><title>initObjectLRUOrLFU (6 samples, 0.01%)</title><rect x="91.9702%" y="101" width="0.0118%" height="15" fill="rgb(209,121,21)" fg:x="46834" fg:w="6"/><text x="92.2202%" y="111.50"></text></g><g><title>_xzm_free (12 samples, 0.02%)</title><rect x="91.9918%" y="85" width="0.0236%" height="15" fill="rgb(220,109,13)" fg:x="46845" fg:w="12"/><text x="92.2418%" y="95.50"></text></g><g><title>sdsnewplacement (27 samples, 0.05%)</title><rect x="92.0311%" y="69" width="0.0530%" height="15" fill="rgb(232,18,1)" fg:x="46865" fg:w="27"/><text x="92.2811%" y="79.50"></text></g><g><title>_platform_memmove (14 samples, 0.03%)</title><rect x="92.0566%" y="53" width="0.0275%" height="15" fill="rgb(215,41,42)" fg:x="46878" fg:w="14"/><text x="92.3066%" y="63.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (9 samples, 0.02%)</title><rect x="92.0939%" y="53" width="0.0177%" height="15" fill="rgb(224,123,36)" fg:x="46897" fg:w="9"/><text x="92.3439%" y="63.50"></text></g><g><title>kvobjCreate (60 samples, 0.12%)</title><rect x="92.0193%" y="85" width="0.1178%" height="15" fill="rgb(240,125,3)" fg:x="46859" fg:w="60"/><text x="92.2693%" y="95.50"></text></g><g><title>zmalloc_usable (27 samples, 0.05%)</title><rect x="92.0841%" y="69" width="0.0530%" height="15" fill="rgb(205,98,50)" fg:x="46892" fg:w="27"/><text x="92.3341%" y="79.50"></text></g><g><title>malloc_size (8 samples, 0.02%)</title><rect x="92.1214%" y="53" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="46911" fg:w="8"/><text x="92.3714%" y="63.50"></text></g><g><title>xzm_malloc_zone_size (6 samples, 0.01%)</title><rect x="92.1254%" y="37" width="0.0118%" height="15" fill="rgb(238,207,15)" fg:x="46913" fg:w="6"/><text x="92.3754%" y="47.50"></text></g><g><title>kvobjSet (89 samples, 0.17%)</title><rect x="91.9820%" y="101" width="0.1748%" height="15" fill="rgb(213,199,42)" fg:x="46840" fg:w="89"/><text x="92.2320%" y="111.50"></text></g><g><title>zfree (10 samples, 0.02%)</title><rect x="92.1371%" y="85" width="0.0196%" height="15" fill="rgb(235,201,11)" fg:x="46919" fg:w="10"/><text x="92.3871%" y="95.50"></text></g><g><title>kvstoreDictSetAtLink (28 samples, 0.05%)</title><rect x="92.1568%" y="101" width="0.0550%" height="15" fill="rgb(207,46,11)" fg:x="46929" fg:w="28"/><text x="92.4068%" y="111.50"></text></g><g><title>dictSetKeyAtLink (24 samples, 0.05%)</title><rect x="92.1646%" y="85" width="0.0471%" height="15" fill="rgb(241,35,35)" fg:x="46933" fg:w="24"/><text x="92.4146%" y="95.50"></text></g><g><title>dictInsertKeyAtLink (19 samples, 0.04%)</title><rect x="92.1745%" y="69" width="0.0373%" height="15" fill="rgb(243,32,47)" fg:x="46938" fg:w="19"/><text x="92.4245%" y="79.50"></text></g><g><title>zmalloc (12 samples, 0.02%)</title><rect x="92.1882%" y="53" width="0.0236%" height="15" fill="rgb(247,202,23)" fg:x="46945" fg:w="12"/><text x="92.4382%" y="63.50"></text></g><g><title>dbAddInternal (142 samples, 0.28%)</title><rect x="91.9467%" y="117" width="0.2789%" height="15" fill="rgb(219,102,11)" fg:x="46822" fg:w="142"/><text x="92.1967%" y="127.50"></text></g><g><title>_xzm_free (15 samples, 0.03%)</title><rect x="92.2471%" y="101" width="0.0295%" height="15" fill="rgb(243,110,44)" fg:x="46975" fg:w="15"/><text x="92.4971%" y="111.50"></text></g><g><title>_xzm_free (791 samples, 1.55%)</title><rect x="92.2942%" y="85" width="1.5533%" height="15" fill="rgb(222,74,54)" fg:x="46999" fg:w="791"/><text x="92.5442%" y="95.50"></text></g><g><title>decrRefCount (834 samples, 1.64%)</title><rect x="92.2766%" y="101" width="1.6378%" height="15" fill="rgb(216,99,12)" fg:x="46990" fg:w="834"/><text x="92.5266%" y="111.50"></text></g><g><title>zfree (34 samples, 0.07%)</title><rect x="93.8476%" y="85" width="0.0668%" height="15" fill="rgb(226,22,26)" fg:x="47790" fg:w="34"/><text x="94.0976%" y="95.50"></text></g><g><title>malloc_size (33 samples, 0.06%)</title><rect x="93.8495%" y="69" width="0.0648%" height="15" fill="rgb(217,163,10)" fg:x="47791" fg:w="33"/><text x="94.0995%" y="79.50"></text></g><g><title>xzm_malloc_zone_size (30 samples, 0.06%)</title><rect x="93.8554%" y="53" width="0.0589%" height="15" fill="rgb(213,25,53)" fg:x="47794" fg:w="30"/><text x="94.1054%" y="63.50"></text></g><g><title>stringObjectLen (890 samples, 1.75%)</title><rect x="93.9281%" y="101" width="1.7477%" height="15" fill="rgb(252,105,26)" fg:x="47831" fg:w="890"/><text x="94.1781%" y="111.50"></text></g><g><title>updateKeysizesHist (86 samples, 0.17%)</title><rect x="95.6758%" y="101" width="0.1689%" height="15" fill="rgb(220,39,43)" fg:x="48721" fg:w="86"/><text x="95.9258%" y="111.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.01%)</title><rect x="95.8486%" y="85" width="0.0118%" height="15" fill="rgb(229,68,48)" fg:x="48809" fg:w="6"/><text x="96.0986%" y="95.50"></text></g><g><title>dbSetValue (1,860 samples, 3.65%)</title><rect x="92.2255%" y="117" width="3.6526%" height="15" fill="rgb(252,8,32)" fg:x="46964" fg:w="1860"/><text x="92.4755%" y="127.50">dbSe..</text></g><g><title>zfree (17 samples, 0.03%)</title><rect x="95.8447%" y="101" width="0.0334%" height="15" fill="rgb(223,20,43)" fg:x="48807" fg:w="17"/><text x="96.0947%" y="111.50"></text></g><g><title>malloc_size (9 samples, 0.02%)</title><rect x="95.8604%" y="85" width="0.0177%" height="15" fill="rgb(229,81,49)" fg:x="48815" fg:w="9"/><text x="96.1104%" y="95.50"></text></g><g><title>xzm_malloc_zone_size (7 samples, 0.01%)</title><rect x="95.8643%" y="69" width="0.0137%" height="15" fill="rgb(236,28,36)" fg:x="48817" fg:w="7"/><text x="96.1143%" y="79.50"></text></g><g><title>setKeyByLink (2,025 samples, 3.98%)</title><rect x="91.9270%" y="133" width="3.9766%" height="15" fill="rgb(249,185,26)" fg:x="46812" fg:w="2025"/><text x="92.1770%" y="143.50">setK..</text></g><g><title>setGenericCommand (2,493 samples, 4.90%)</title><rect x="91.0100%" y="149" width="4.8956%" height="15" fill="rgb(249,174,33)" fg:x="46345" fg:w="2493"/><text x="91.2600%" y="159.50">setGen..</text></g><g><title>slowlogPushCurrentCommand (14 samples, 0.03%)</title><rect x="95.9075%" y="149" width="0.0275%" height="15" fill="rgb(233,201,37)" fg:x="48839" fg:w="14"/><text x="96.1575%" y="159.50"></text></g><g><title>call (18,497 samples, 36.32%)</title><rect x="59.6194%" y="165" width="36.3235%" height="15" fill="rgb(221,78,26)" fg:x="30360" fg:w="18497"/><text x="59.8694%" y="175.50">call</text></g><g><title>commandCheckArity (16 samples, 0.03%)</title><rect x="95.9429%" y="165" width="0.0314%" height="15" fill="rgb(250,127,30)" fg:x="48857" fg:w="16"/><text x="96.1929%" y="175.50"></text></g><g><title>commandCheckExistence (6 samples, 0.01%)</title><rect x="95.9743%" y="165" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="48873" fg:w="6"/><text x="96.2243%" y="175.50"></text></g><g><title>_xzm_free (25 samples, 0.05%)</title><rect x="96.0234%" y="149" width="0.0491%" height="15" fill="rgb(229,67,23)" fg:x="48898" fg:w="25"/><text x="96.2734%" y="159.50"></text></g><g><title>_free (52 samples, 0.10%)</title><rect x="96.2119%" y="133" width="0.1021%" height="15" fill="rgb(249,83,47)" fg:x="48994" fg:w="52"/><text x="96.4619%" y="143.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (13 samples, 0.03%)</title><rect x="96.7775%" y="117" width="0.0255%" height="15" fill="rgb(215,43,3)" fg:x="49282" fg:w="13"/><text x="97.0275%" y="127.50"></text></g><g><title>_xzm_free (306 samples, 0.60%)</title><rect x="96.3199%" y="133" width="0.6009%" height="15" fill="rgb(238,154,13)" fg:x="49049" fg:w="306"/><text x="96.5699%" y="143.50"></text></g><g><title>_platform_memset (56 samples, 0.11%)</title><rect x="96.8109%" y="117" width="0.1100%" height="15" fill="rgb(219,56,2)" fg:x="49299" fg:w="56"/><text x="97.0609%" y="127.50"></text></g><g><title>decrRefCount (85 samples, 0.17%)</title><rect x="96.9208%" y="133" width="0.1669%" height="15" fill="rgb(233,0,4)" fg:x="49355" fg:w="85"/><text x="97.1708%" y="143.50"></text></g><g><title>malloc_size (21 samples, 0.04%)</title><rect x="97.0878%" y="133" width="0.0412%" height="15" fill="rgb(235,30,7)" fg:x="49440" fg:w="21"/><text x="97.3378%" y="143.50"></text></g><g><title>DYLD-STUB$$malloc_size (10 samples, 0.02%)</title><rect x="97.2134%" y="117" width="0.0196%" height="15" fill="rgb(250,79,13)" fg:x="49504" fg:w="10"/><text x="97.4634%" y="127.50"></text></g><g><title>_tlv_get_addr (56 samples, 0.11%)</title><rect x="97.2331%" y="117" width="0.1100%" height="15" fill="rgb(211,146,34)" fg:x="49514" fg:w="56"/><text x="97.4831%" y="127.50"></text></g><g><title>commandProcessed (913 samples, 1.79%)</title><rect x="95.9861%" y="165" width="1.7929%" height="15" fill="rgb(228,22,38)" fg:x="48879" fg:w="913"/><text x="96.2361%" y="175.50">c..</text></g><g><title>resetClientInternal (867 samples, 1.70%)</title><rect x="96.0764%" y="149" width="1.7026%" height="15" fill="rgb(235,168,5)" fg:x="48925" fg:w="867"/><text x="96.3264%" y="159.50"></text></g><g><title>zfree (330 samples, 0.65%)</title><rect x="97.1310%" y="133" width="0.6480%" height="15" fill="rgb(221,155,16)" fg:x="49462" fg:w="330"/><text x="97.3810%" y="143.50"></text></g><g><title>malloc_size (222 samples, 0.44%)</title><rect x="97.3430%" y="117" width="0.4360%" height="15" fill="rgb(215,215,53)" fg:x="49570" fg:w="222"/><text x="97.5930%" y="127.50"></text></g><g><title>xzm_malloc_zone_size (149 samples, 0.29%)</title><rect x="97.4864%" y="101" width="0.2926%" height="15" fill="rgb(223,4,10)" fg:x="49643" fg:w="149"/><text x="97.7364%" y="111.50"></text></g><g><title>evictClients (15 samples, 0.03%)</title><rect x="97.7790%" y="165" width="0.0295%" height="15" fill="rgb(234,103,6)" fg:x="49792" fg:w="15"/><text x="98.0290%" y="175.50"></text></g><g><title>getCommandFlags (49 samples, 0.10%)</title><rect x="97.8104%" y="165" width="0.0962%" height="15" fill="rgb(227,97,0)" fg:x="49808" fg:w="49"/><text x="98.0604%" y="175.50"></text></g><g><title>getGenericCommand (8 samples, 0.02%)</title><rect x="97.9066%" y="165" width="0.0157%" height="15" fill="rgb(234,150,53)" fg:x="49857" fg:w="8"/><text x="98.1566%" y="175.50"></text></g><g><title>dictGenCaseHashFunction (15 samples, 0.03%)</title><rect x="98.0186%" y="117" width="0.0295%" height="15" fill="rgb(228,201,54)" fg:x="49914" fg:w="15"/><text x="98.2686%" y="127.50"></text></g><g><title>dictSdsCaseHash (10 samples, 0.02%)</title><rect x="98.0480%" y="117" width="0.0196%" height="15" fill="rgb(222,22,37)" fg:x="49929" fg:w="10"/><text x="98.2980%" y="127.50"></text></g><g><title>strcasecmp (10 samples, 0.02%)</title><rect x="98.0873%" y="101" width="0.0196%" height="15" fill="rgb(237,53,32)" fg:x="49949" fg:w="10"/><text x="98.3373%" y="111.50"></text></g><g><title>dictSdsKeyCaseCompare (54 samples, 0.11%)</title><rect x="98.0677%" y="117" width="0.1060%" height="15" fill="rgb(233,25,53)" fg:x="49939" fg:w="54"/><text x="98.3177%" y="127.50"></text></g><g><title>strcasecmp_l (34 samples, 0.07%)</title><rect x="98.1069%" y="101" width="0.0668%" height="15" fill="rgb(210,40,34)" fg:x="49959" fg:w="34"/><text x="98.3569%" y="111.50"></text></g><g><title>dictFetchValue (117 samples, 0.23%)</title><rect x="97.9518%" y="149" width="0.2298%" height="15" fill="rgb(241,220,44)" fg:x="49880" fg:w="117"/><text x="98.2018%" y="159.50"></text></g><g><title>dictFindLinkInternal (109 samples, 0.21%)</title><rect x="97.9675%" y="133" width="0.2140%" height="15" fill="rgb(235,28,35)" fg:x="49888" fg:w="109"/><text x="98.2175%" y="143.50"></text></g><g><title>lookupCommandLogic (134 samples, 0.26%)</title><rect x="97.9224%" y="165" width="0.2631%" height="15" fill="rgb(210,56,17)" fg:x="49865" fg:w="134"/><text x="98.1724%" y="175.50"></text></g><g><title>moduleCallCommandFilters (13 samples, 0.03%)</title><rect x="98.1855%" y="165" width="0.0255%" height="15" fill="rgb(224,130,29)" fg:x="49999" fg:w="13"/><text x="98.4355%" y="175.50"></text></g><g><title>resetClientInternal (15 samples, 0.03%)</title><rect x="98.2169%" y="165" width="0.0295%" height="15" fill="rgb(235,212,8)" fg:x="50015" fg:w="15"/><text x="98.4669%" y="175.50"></text></g><g><title>slowlogPushCurrentCommand (6 samples, 0.01%)</title><rect x="98.2503%" y="165" width="0.0118%" height="15" fill="rgb(223,33,50)" fg:x="50032" fg:w="6"/><text x="98.5003%" y="175.50"></text></g><g><title>strcasecmp (47 samples, 0.09%)</title><rect x="98.2621%" y="165" width="0.0923%" height="15" fill="rgb(219,149,13)" fg:x="50038" fg:w="47"/><text x="98.5121%" y="175.50"></text></g><g><title>strcasecmp_l (70 samples, 0.14%)</title><rect x="98.3544%" y="165" width="0.1375%" height="15" fill="rgb(250,156,29)" fg:x="50085" fg:w="70"/><text x="98.6044%" y="175.50"></text></g><g><title>DYLD-STUB$$pthread_equal (6 samples, 0.01%)</title><rect x="98.5311%" y="149" width="0.0118%" height="15" fill="rgb(216,193,19)" fg:x="50175" fg:w="6"/><text x="98.7811%" y="159.50"></text></g><g><title>pthread_equal (12 samples, 0.02%)</title><rect x="98.5508%" y="149" width="0.0236%" height="15" fill="rgb(216,135,14)" fg:x="50185" fg:w="12"/><text x="98.8008%" y="159.50"></text></g><g><title>pthread_self (43 samples, 0.08%)</title><rect x="98.5743%" y="149" width="0.0844%" height="15" fill="rgb(241,47,5)" fg:x="50197" fg:w="43"/><text x="98.8243%" y="159.50"></text></g><g><title>updateClientMemUsageAndBucket (97 samples, 0.19%)</title><rect x="98.4918%" y="165" width="0.1905%" height="15" fill="rgb(233,42,35)" fg:x="50155" fg:w="97"/><text x="98.7418%" y="175.50"></text></g><g><title>removeClientFromMemUsageBucket (12 samples, 0.02%)</title><rect x="98.6588%" y="149" width="0.0236%" height="15" fill="rgb(231,13,6)" fg:x="50240" fg:w="12"/><text x="98.9088%" y="159.50"></text></g><g><title>processCommandAndResetClient (20,297 samples, 39.86%)</title><rect x="58.8673%" y="181" width="39.8582%" height="15" fill="rgb(207,181,40)" fg:x="29977" fg:w="20297"/><text x="59.1173%" y="191.50">processCommandAndResetClient</text></g><g><title>writeCommandsDeniedByDiskError (21 samples, 0.04%)</title><rect x="98.6843%" y="165" width="0.0412%" height="15" fill="rgb(254,173,49)" fg:x="50253" fg:w="21"/><text x="98.9343%" y="175.50"></text></g><g><title>sdsnewplacement (8 samples, 0.02%)</title><rect x="98.7255%" y="181" width="0.0157%" height="15" fill="rgb(221,1,38)" fg:x="50274" fg:w="8"/><text x="98.9755%" y="191.50"></text></g><g><title>sdsrange (8 samples, 0.02%)</title><rect x="98.7412%" y="181" width="0.0157%" height="15" fill="rgb(206,124,46)" fg:x="50282" fg:w="8"/><text x="98.9912%" y="191.50"></text></g><g><title>sdssubstr (12 samples, 0.02%)</title><rect x="98.7569%" y="181" width="0.0236%" height="15" fill="rgb(249,21,11)" fg:x="50290" fg:w="12"/><text x="99.0069%" y="191.50"></text></g><g><title>strcasecmp_l (13 samples, 0.03%)</title><rect x="98.7825%" y="181" width="0.0255%" height="15" fill="rgb(222,201,40)" fg:x="50303" fg:w="13"/><text x="99.0325%" y="191.50"></text></g><g><title>updateClientMemUsageAndBucket (17 samples, 0.03%)</title><rect x="98.8080%" y="181" width="0.0334%" height="15" fill="rgb(235,61,29)" fg:x="50316" fg:w="17"/><text x="99.0580%" y="191.50"></text></g><g><title>processInputBuffer (22,706 samples, 44.59%)</title><rect x="54.2564%" y="197" width="44.5889%" height="15" fill="rgb(219,207,3)" fg:x="27629" fg:w="22706"/><text x="54.5064%" y="207.50">processInputBuffer</text></g><g><title>read (59 samples, 0.12%)</title><rect x="98.8453%" y="197" width="0.1159%" height="15" fill="rgb(222,56,46)" fg:x="50335" fg:w="59"/><text x="99.0953%" y="207.50"></text></g><g><title>_tlv_get_addr (7 samples, 0.01%)</title><rect x="98.9710%" y="181" width="0.0137%" height="15" fill="rgb(239,76,54)" fg:x="50399" fg:w="7"/><text x="99.2210%" y="191.50"></text></g><g><title>resetReusableQueryBuf (14 samples, 0.03%)</title><rect x="98.9612%" y="197" width="0.0275%" height="15" fill="rgb(231,124,27)" fg:x="50394" fg:w="14"/><text x="99.2112%" y="207.50"></text></g><g><title>sdsIncrLen (12 samples, 0.02%)</title><rect x="98.9887%" y="197" width="0.0236%" height="15" fill="rgb(249,195,6)" fg:x="50408" fg:w="12"/><text x="99.2387%" y="207.50"></text></g><g><title>connSocketEventHandler (32,684 samples, 64.18%)</title><rect x="34.8330%" y="229" width="64.1832%" height="15" fill="rgb(237,174,47)" fg:x="17738" fg:w="32684"/><text x="35.0830%" y="239.50">connSocketEventHandler</text></g><g><title>readQueryFromClient (32,664 samples, 64.14%)</title><rect x="34.8723%" y="213" width="64.1439%" height="15" fill="rgb(206,201,31)" fg:x="17758" fg:w="32664"/><text x="35.1223%" y="223.50">readQueryFromClient</text></g><g><title>kevent (440 samples, 0.86%)</title><rect x="99.0181%" y="229" width="0.8640%" height="15" fill="rgb(231,57,52)" fg:x="50423" fg:w="440"/><text x="99.2681%" y="239.50"></text></g><g><title>clientsCronRunClient (8 samples, 0.02%)</title><rect x="99.8920%" y="213" width="0.0157%" height="15" fill="rgb(248,177,22)" fg:x="50868" fg:w="8"/><text x="100.1420%" y="223.50"></text></g><g><title>task_for_pid (11 samples, 0.02%)</title><rect x="99.9077%" y="197" width="0.0216%" height="15" fill="rgb(215,211,37)" fg:x="50876" fg:w="11"/><text x="100.1577%" y="207.50"></text></g><g><title>cronUpdateMemoryStats (15 samples, 0.03%)</title><rect x="99.9077%" y="213" width="0.0295%" height="15" fill="rgb(241,128,51)" fg:x="50876" fg:w="15"/><text x="100.1577%" y="223.50"></text></g><g><title>serverCron (42 samples, 0.08%)</title><rect x="99.8861%" y="229" width="0.0825%" height="15" fill="rgb(227,165,31)" fg:x="50865" fg:w="42"/><text x="100.1361%" y="239.50"></text></g><g><title>kvstoreIncrementallyRehash (16 samples, 0.03%)</title><rect x="99.9372%" y="213" width="0.0314%" height="15" fill="rgb(228,167,24)" fg:x="50891" fg:w="16"/><text x="100.1872%" y="223.50"></text></g><g><title>dictRehash (16 samples, 0.03%)</title><rect x="99.9372%" y="197" width="0.0314%" height="15" fill="rgb(228,143,12)" fg:x="50891" fg:w="16"/><text x="100.1872%" y="207.50"></text></g><g><title>rehashEntriesInBucketAtIndex (14 samples, 0.03%)</title><rect x="99.9411%" y="181" width="0.0275%" height="15" fill="rgb(249,149,8)" fg:x="50893" fg:w="14"/><text x="100.1911%" y="191.50"></text></g><g><title>dictGenHashFunction (9 samples, 0.02%)</title><rect x="99.9509%" y="165" width="0.0177%" height="15" fill="rgb(243,35,44)" fg:x="50898" fg:w="9"/><text x="100.2009%" y="175.50"></text></g><g><title>aeProcessEvents (50,903 samples, 99.96%)</title><rect x="0.0098%" y="245" width="99.9607%" height="15" fill="rgb(246,89,9)" fg:x="5" fg:w="50903"/><text x="0.2598%" y="255.50">aeProcessEvents</text></g><g><title>kevent (6 samples, 0.01%)</title><rect x="99.9823%" y="245" width="0.0118%" height="15" fill="rgb(233,213,13)" fg:x="50914" fg:w="6"/><text x="100.2323%" y="255.50"></text></g><g><title>all (50,923 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="50923"/><text x="0.2500%" y="303.50"></text></g><g><title>start (50,923 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="50923"/><text x="0.2500%" y="287.50">start</text></g><g><title>main (50,919 samples, 99.99%)</title><rect x="0.0079%" y="261" width="99.9921%" height="15" fill="rgb(209,217,16)" fg:x="4" fg:w="50919"/><text x="0.2579%" y="271.50">main</text></g></svg></svg>