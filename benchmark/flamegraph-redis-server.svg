<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Redis Baseline</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="19934"><g><title>clock_gettime (3 samples, 0.02%)</title><rect x="0.0803%" y="181" width="0.0150%" height="15" fill="rgb(246,151,37)" fg:x="16" fg:w="3"/><text x="0.3303%" y="191.50"></text></g><g><title>_mach_boottime_usec (3 samples, 0.02%)</title><rect x="0.0803%" y="165" width="0.0150%" height="15" fill="rgb(225,120,37)" fg:x="16" fg:w="3"/><text x="0.3303%" y="175.50"></text></g><g><title>gettimeofday (3 samples, 0.02%)</title><rect x="0.0803%" y="149" width="0.0150%" height="15" fill="rgb(253,155,20)" fg:x="16" fg:w="3"/><text x="0.3303%" y="159.50"></text></g><g><title>__commpage_gettimeofday_internal (3 samples, 0.02%)</title><rect x="0.0803%" y="133" width="0.0150%" height="15" fill="rgb(223,121,0)" fg:x="16" fg:w="3"/><text x="0.3303%" y="143.50"></text></g><g><title>mach_absolute_time (3 samples, 0.02%)</title><rect x="0.0803%" y="117" width="0.0150%" height="15" fill="rgb(226,185,10)" fg:x="16" fg:w="3"/><text x="0.3303%" y="127.50"></text></g><g><title>_st_localsub (4 samples, 0.02%)</title><rect x="0.1003%" y="149" width="0.0201%" height="15" fill="rgb(238,136,6)" fg:x="20" fg:w="4"/><text x="0.3503%" y="159.50"></text></g><g><title>__findenv_locked (2 samples, 0.01%)</title><rect x="0.1254%" y="117" width="0.0100%" height="15" fill="rgb(219,72,22)" fg:x="25" fg:w="2"/><text x="0.3754%" y="127.50"></text></g><g><title>_st_tzset_basic (4 samples, 0.02%)</title><rect x="0.1204%" y="149" width="0.0201%" height="15" fill="rgb(221,12,51)" fg:x="24" fg:w="4"/><text x="0.3704%" y="159.50"></text></g><g><title>getenv_copy_np (4 samples, 0.02%)</title><rect x="0.1204%" y="133" width="0.0201%" height="15" fill="rgb(230,47,18)" fg:x="24" fg:w="4"/><text x="0.3704%" y="143.50"></text></g><g><title>afterSleep (19 samples, 0.10%)</title><rect x="0.0803%" y="197" width="0.0953%" height="15" fill="rgb(234,218,32)" fg:x="16" fg:w="19"/><text x="0.3303%" y="207.50"></text></g><g><title>updateCachedTime (16 samples, 0.08%)</title><rect x="0.0953%" y="181" width="0.0803%" height="15" fill="rgb(212,135,13)" fg:x="19" fg:w="16"/><text x="0.3453%" y="191.50"></text></g><g><title>localtime_r (15 samples, 0.08%)</title><rect x="0.1003%" y="165" width="0.0752%" height="15" fill="rgb(238,54,15)" fg:x="20" fg:w="15"/><text x="0.3503%" y="175.50"></text></g><g><title>tzsetwall_basic (7 samples, 0.04%)</title><rect x="0.1405%" y="149" width="0.0351%" height="15" fill="rgb(239,195,21)" fg:x="28" fg:w="7"/><text x="0.3905%" y="159.50"></text></g><g><title>notify_check_tz (7 samples, 0.04%)</title><rect x="0.1405%" y="133" width="0.0351%" height="15" fill="rgb(246,176,47)" fg:x="28" fg:w="7"/><text x="0.3905%" y="143.50"></text></g><g><title>notify_check (7 samples, 0.04%)</title><rect x="0.1405%" y="117" width="0.0351%" height="15" fill="rgb(212,173,18)" fg:x="28" fg:w="7"/><text x="0.3905%" y="127.50"></text></g><g><title>0x1a329c810 (3 samples, 0.02%)</title><rect x="0.1605%" y="101" width="0.0150%" height="15" fill="rgb(218,217,47)" fg:x="32" fg:w="3"/><text x="0.4105%" y="111.50"></text></g><g><title>os_set_32_ptr_find (2 samples, 0.01%)</title><rect x="0.1655%" y="85" width="0.0100%" height="15" fill="rgb(219,46,25)" fg:x="33" fg:w="2"/><text x="0.4155%" y="95.50"></text></g><g><title>clock_gettime (4 samples, 0.02%)</title><rect x="0.2057%" y="181" width="0.0201%" height="15" fill="rgb(246,151,37)" fg:x="41" fg:w="4"/><text x="0.4557%" y="191.50"></text></g><g><title>_mach_boottime_usec (4 samples, 0.02%)</title><rect x="0.2057%" y="165" width="0.0201%" height="15" fill="rgb(225,120,37)" fg:x="41" fg:w="4"/><text x="0.4557%" y="175.50"></text></g><g><title>gettimeofday (3 samples, 0.02%)</title><rect x="0.2107%" y="149" width="0.0150%" height="15" fill="rgb(253,155,20)" fg:x="42" fg:w="3"/><text x="0.4607%" y="159.50"></text></g><g><title>__commpage_gettimeofday_internal (2 samples, 0.01%)</title><rect x="0.2157%" y="133" width="0.0100%" height="15" fill="rgb(223,121,0)" fg:x="43" fg:w="2"/><text x="0.4657%" y="143.50"></text></g><g><title>mach_absolute_time (2 samples, 0.01%)</title><rect x="0.2157%" y="117" width="0.0100%" height="15" fill="rgb(226,185,10)" fg:x="43" fg:w="2"/><text x="0.4657%" y="127.50"></text></g><g><title>clientHasPendingReplies (2 samples, 0.01%)</title><rect x="0.3010%" y="165" width="0.0100%" height="15" fill="rgb(241,33,8)" fg:x="60" fg:w="2"/><text x="0.5510%" y="175.50"></text></g><g><title>clientHasPendingReplies (4 samples, 0.02%)</title><rect x="0.4164%" y="149" width="0.0201%" height="15" fill="rgb(241,33,8)" fg:x="83" fg:w="4"/><text x="0.6664%" y="159.50"></text></g><g><title>connSocketWrite (9,399 samples, 47.15%)</title><rect x="0.4364%" y="149" width="47.1506%" height="15" fill="rgb(253,209,8)" fg:x="87" fg:w="9399"/><text x="0.6864%" y="159.50">connSocketWrite</text></g><g><title>write (9,395 samples, 47.13%)</title><rect x="0.4565%" y="133" width="47.1305%" height="15" fill="rgb(237,166,9)" fg:x="91" fg:w="9395"/><text x="0.7065%" y="143.50">write</text></g><g><title>DYLD-STUB$$pthread_self (2 samples, 0.01%)</title><rect x="47.6021%" y="133" width="0.0100%" height="15" fill="rgb(246,9,32)" fg:x="9489" fg:w="2"/><text x="47.8521%" y="143.50"></text></g><g><title>pthread_self (11 samples, 0.06%)</title><rect x="47.6121%" y="133" width="0.0552%" height="15" fill="rgb(207,222,5)" fg:x="9491" fg:w="11"/><text x="47.8621%" y="143.50"></text></g><g><title>updateClientMemUsageAndBucket (21 samples, 0.11%)</title><rect x="47.5870%" y="149" width="0.1053%" height="15" fill="rgb(207,48,25)" fg:x="9486" fg:w="21"/><text x="47.8370%" y="159.50"></text></g><g><title>removeClientFromMemUsageBucket (5 samples, 0.03%)</title><rect x="47.6673%" y="133" width="0.0251%" height="15" fill="rgb(226,60,33)" fg:x="9502" fg:w="5"/><text x="47.9173%" y="143.50"></text></g><g><title>beforeSleep (9,473 samples, 47.52%)</title><rect x="0.1756%" y="197" width="47.5218%" height="15" fill="rgb(218,208,18)" fg:x="35" fg:w="9473"/><text x="0.4256%" y="207.50">beforeSleep</text></g><g><title>handleClientsWithPendingWrites (9,461 samples, 47.46%)</title><rect x="0.2358%" y="181" width="47.4616%" height="15" fill="rgb(207,222,39)" fg:x="47" fg:w="9461"/><text x="0.4858%" y="191.50">handleClientsWithPendingWrites</text></g><g><title>writeToClient (9,446 samples, 47.39%)</title><rect x="0.3110%" y="165" width="47.3864%" height="15" fill="rgb(223,69,15)" fg:x="62" fg:w="9446"/><text x="0.5610%" y="175.50">writeToClient</text></g><g><title>clock_gettime (2 samples, 0.01%)</title><rect x="47.6974%" y="197" width="0.0100%" height="15" fill="rgb(246,151,37)" fg:x="9508" fg:w="2"/><text x="47.9474%" y="207.50"></text></g><g><title>freeClient (2 samples, 0.01%)</title><rect x="47.7375%" y="181" width="0.0100%" height="15" fill="rgb(244,187,0)" fg:x="9516" fg:w="2"/><text x="47.9875%" y="191.50"></text></g><g><title>unlinkClient (2 samples, 0.01%)</title><rect x="47.7375%" y="165" width="0.0100%" height="15" fill="rgb(227,120,44)" fg:x="9516" fg:w="2"/><text x="47.9875%" y="175.50"></text></g><g><title>connSocketClose (2 samples, 0.01%)</title><rect x="47.7375%" y="149" width="0.0100%" height="15" fill="rgb(228,109,20)" fg:x="9516" fg:w="2"/><text x="47.9875%" y="159.50"></text></g><g><title>close (2 samples, 0.01%)</title><rect x="47.7375%" y="133" width="0.0100%" height="15" fill="rgb(227,142,28)" fg:x="9516" fg:w="2"/><text x="47.9875%" y="143.50"></text></g><g><title>_sdsMakeRoomFor (4 samples, 0.02%)</title><rect x="47.9633%" y="165" width="0.0201%" height="15" fill="rgb(213,185,11)" fg:x="9561" fg:w="4"/><text x="48.2133%" y="175.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.02%)</title><rect x="47.9833%" y="165" width="0.0201%" height="15" fill="rgb(226,77,8)" fg:x="9565" fg:w="4"/><text x="48.2333%" y="175.50"></text></g><g><title>connSocketRead (5,199 samples, 26.08%)</title><rect x="48.0034%" y="165" width="26.0811%" height="15" fill="rgb(242,72,27)" fg:x="9569" fg:w="5199"/><text x="48.2534%" y="175.50">connSocketRead</text></g><g><title>read (5,192 samples, 26.05%)</title><rect x="48.0385%" y="149" width="26.0460%" height="15" fill="rgb(209,69,29)" fg:x="9576" fg:w="5192"/><text x="48.2885%" y="159.50">read</text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.07%)</title><rect x="74.2500%" y="149" width="0.0652%" height="15" fill="rgb(246,75,33)" fg:x="14801" fg:w="13"/><text x="74.5000%" y="159.50"></text></g><g><title>DYLD-STUB$$strchr (5 samples, 0.03%)</title><rect x="74.3152%" y="149" width="0.0251%" height="15" fill="rgb(238,154,35)" fg:x="14814" fg:w="5"/><text x="74.5652%" y="159.50"></text></g><g><title>_platform_strchr (9 samples, 0.05%)</title><rect x="74.3403%" y="149" width="0.0451%" height="15" fill="rgb(208,154,30)" fg:x="14819" fg:w="9"/><text x="74.5903%" y="159.50"></text></g><g><title>sdsnewplacement (18 samples, 0.09%)</title><rect x="74.3955%" y="133" width="0.0903%" height="15" fill="rgb(221,193,46)" fg:x="14830" fg:w="18"/><text x="74.6455%" y="143.50"></text></g><g><title>_platform_memmove (7 samples, 0.04%)</title><rect x="74.4507%" y="117" width="0.0351%" height="15" fill="rgb(229,3,50)" fg:x="14841" fg:w="7"/><text x="74.7007%" y="127.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (10 samples, 0.05%)</title><rect x="74.5460%" y="117" width="0.0502%" height="15" fill="rgb(246,75,33)" fg:x="14860" fg:w="10"/><text x="74.7960%" y="127.50"></text></g><g><title>_malloc_zone_malloc (9 samples, 0.05%)</title><rect x="74.6062%" y="117" width="0.0451%" height="15" fill="rgb(227,101,24)" fg:x="14872" fg:w="9"/><text x="74.8562%" y="127.50"></text></g><g><title>_tlv_get_addr (11 samples, 0.06%)</title><rect x="74.6513%" y="117" width="0.0552%" height="15" fill="rgb(226,77,8)" fg:x="14881" fg:w="11"/><text x="74.9013%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (9 samples, 0.05%)</title><rect x="74.7065%" y="117" width="0.0451%" height="15" fill="rgb(214,103,16)" fg:x="14892" fg:w="9"/><text x="74.9565%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (24 samples, 0.12%)</title><rect x="74.7517%" y="117" width="0.1204%" height="15" fill="rgb(230,62,6)" fg:x="14901" fg:w="24"/><text x="75.0017%" y="127.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="74.8721%" y="117" width="0.0150%" height="15" fill="rgb(250,195,53)" fg:x="14925" fg:w="3"/><text x="75.1221%" y="127.50"></text></g><g><title>malloc_size (24 samples, 0.12%)</title><rect x="74.8871%" y="117" width="0.1204%" height="15" fill="rgb(235,148,42)" fg:x="14928" fg:w="24"/><text x="75.1371%" y="127.50"></text></g><g><title>xzm_malloc_zone_size (17 samples, 0.09%)</title><rect x="74.9222%" y="101" width="0.0853%" height="15" fill="rgb(240,58,39)" fg:x="14935" fg:w="17"/><text x="75.1722%" y="111.50"></text></g><g><title>createEmbeddedStringObject (126 samples, 0.63%)</title><rect x="74.3905%" y="149" width="0.6321%" height="15" fill="rgb(212,78,1)" fg:x="14829" fg:w="126"/><text x="74.6405%" y="159.50"></text></g><g><title>zmalloc_usable (107 samples, 0.54%)</title><rect x="74.4858%" y="133" width="0.5368%" height="15" fill="rgb(254,70,3)" fg:x="14848" fg:w="107"/><text x="74.7358%" y="143.50"></text></g><g><title>xzm_malloc_zone_malloc_type_malloc (3 samples, 0.02%)</title><rect x="75.0075%" y="117" width="0.0150%" height="15" fill="rgb(243,149,16)" fg:x="14952" fg:w="3"/><text x="75.2575%" y="127.50"></text></g><g><title>createStringObject (3 samples, 0.02%)</title><rect x="75.0226%" y="149" width="0.0150%" height="15" fill="rgb(218,158,24)" fg:x="14955" fg:w="3"/><text x="75.2726%" y="159.50"></text></g><g><title>ACLCheckAllUserCommandPerm (7 samples, 0.04%)</title><rect x="75.1982%" y="133" width="0.0351%" height="15" fill="rgb(226,64,0)" fg:x="14990" fg:w="7"/><text x="75.4482%" y="143.50"></text></g><g><title>ACLSelectorCheckCmd (4 samples, 0.02%)</title><rect x="75.2132%" y="117" width="0.0201%" height="15" fill="rgb(241,90,9)" fg:x="14993" fg:w="4"/><text x="75.4632%" y="127.50"></text></g><g><title>DYLD-STUB$$gettimeofday (4 samples, 0.02%)</title><rect x="75.3687%" y="117" width="0.0201%" height="15" fill="rgb(214,163,24)" fg:x="15024" fg:w="4"/><text x="75.6187%" y="127.50"></text></g><g><title>postExecutionUnitOperations (3 samples, 0.02%)</title><rect x="75.4088%" y="101" width="0.0150%" height="15" fill="rgb(234,21,27)" fg:x="15032" fg:w="3"/><text x="75.6588%" y="111.50"></text></g><g><title>afterCommand (9 samples, 0.05%)</title><rect x="75.3938%" y="117" width="0.0451%" height="15" fill="rgb(232,88,19)" fg:x="15029" fg:w="9"/><text x="75.6438%" y="127.50"></text></g><g><title>trackingHandlePendingKeyInvalidations (3 samples, 0.02%)</title><rect x="75.4239%" y="101" width="0.0150%" height="15" fill="rgb(228,228,3)" fg:x="15035" fg:w="3"/><text x="75.6739%" y="111.50"></text></g><g><title>clusterSlotStatsAddCpuDuration (5 samples, 0.03%)</title><rect x="75.4389%" y="117" width="0.0251%" height="15" fill="rgb(212,178,38)" fg:x="15038" fg:w="5"/><text x="75.6889%" y="127.50"></text></g><g><title>_addReplyToBufferOrList (15 samples, 0.08%)</title><rect x="75.4941%" y="101" width="0.0752%" height="15" fill="rgb(219,86,26)" fg:x="15049" fg:w="15"/><text x="75.7441%" y="111.50"></text></g><g><title>_platform_memmove (2 samples, 0.01%)</title><rect x="75.5593%" y="85" width="0.0100%" height="15" fill="rgb(229,3,50)" fg:x="15062" fg:w="2"/><text x="75.8093%" y="95.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="92.2494%" y="69" width="0.0150%" height="15" fill="rgb(213,192,6)" fg:x="18389" fg:w="3"/><text x="92.4994%" y="79.50"></text></g><g><title>_addReplyToBufferOrList (167 samples, 0.84%)</title><rect x="92.1441%" y="85" width="0.8378%" height="15" fill="rgb(219,86,26)" fg:x="18368" fg:w="167"/><text x="92.3941%" y="95.50"></text></g><g><title>_platform_memmove (143 samples, 0.72%)</title><rect x="92.2645%" y="69" width="0.7174%" height="15" fill="rgb(229,3,50)" fg:x="18392" fg:w="143"/><text x="92.5145%" y="79.50"></text></g><g><title>clientHasPendingReplies (3 samples, 0.02%)</title><rect x="92.9818%" y="85" width="0.0150%" height="15" fill="rgb(241,33,8)" fg:x="18535" fg:w="3"/><text x="93.2318%" y="95.50"></text></g><g><title>addReplyBulk (3,489 samples, 17.50%)</title><rect x="75.5694%" y="101" width="17.5028%" height="15" fill="rgb(238,220,41)" fg:x="15064" fg:w="3489"/><text x="75.8194%" y="111.50">addReplyBulk</text></g><g><title>ull2string (14 samples, 0.07%)</title><rect x="93.0019%" y="85" width="0.0702%" height="15" fill="rgb(238,62,44)" fg:x="18539" fg:w="14"/><text x="93.2519%" y="95.50"></text></g><g><title>digits10 (6 samples, 0.03%)</title><rect x="93.0420%" y="69" width="0.0301%" height="15" fill="rgb(254,4,5)" fg:x="18547" fg:w="6"/><text x="93.2920%" y="79.50"></text></g><g><title>_dictRehashStepIfNeeded (3 samples, 0.02%)</title><rect x="94.3714%" y="53" width="0.0150%" height="15" fill="rgb(246,223,5)" fg:x="18812" fg:w="3"/><text x="94.6214%" y="63.50"></text></g><g><title>dictGenHashFunction (7 samples, 0.04%)</title><rect x="94.3865%" y="53" width="0.0351%" height="15" fill="rgb(205,41,2)" fg:x="18815" fg:w="7"/><text x="94.6365%" y="63.50"></text></g><g><title>_platform_memcmp (67 samples, 0.34%)</title><rect x="97.1054%" y="37" width="0.3361%" height="15" fill="rgb(246,44,11)" fg:x="19357" fg:w="67"/><text x="97.3554%" y="47.50"></text></g><g><title>dictFindLinkInternal (785 samples, 3.94%)</title><rect x="93.5136%" y="69" width="3.9380%" height="15" fill="rgb(245,145,28)" fg:x="18641" fg:w="785"/><text x="93.7636%" y="79.50">dict..</text></g><g><title>dictSdsCompareKV (604 samples, 3.03%)</title><rect x="94.4216%" y="53" width="3.0300%" height="15" fill="rgb(224,137,50)" fg:x="18822" fg:w="604"/><text x="94.6716%" y="63.50">dic..</text></g><g><title>dictSdsCompareKV (2 samples, 0.01%)</title><rect x="97.4416%" y="37" width="0.0100%" height="15" fill="rgb(224,137,50)" fg:x="19424" fg:w="2"/><text x="97.6916%" y="47.50"></text></g><g><title>expireIfNeeded (11 samples, 0.06%)</title><rect x="97.4516%" y="69" width="0.0552%" height="15" fill="rgb(216,193,51)" fg:x="19426" fg:w="11"/><text x="97.7016%" y="79.50"></text></g><g><title>keyIsExpired (7 samples, 0.04%)</title><rect x="97.4717%" y="53" width="0.0351%" height="15" fill="rgb(215,161,18)" fg:x="19430" fg:w="7"/><text x="97.7217%" y="63.50"></text></g><g><title>getKeySlot (5 samples, 0.03%)</title><rect x="97.5068%" y="69" width="0.0251%" height="15" fill="rgb(229,101,19)" fg:x="19437" fg:w="5"/><text x="97.7568%" y="79.50"></text></g><g><title>lookupKeyReadOrReply (891 samples, 4.47%)</title><rect x="93.0772%" y="101" width="4.4698%" height="15" fill="rgb(205,206,3)" fg:x="18554" fg:w="891"/><text x="93.3272%" y="111.50">looku..</text></g><g><title>lookupKey (888 samples, 4.45%)</title><rect x="93.0922%" y="85" width="4.4547%" height="15" fill="rgb(212,137,12)" fg:x="18557" fg:w="888"/><text x="93.3422%" y="95.50">looku..</text></g><g><title>kvstoreDictFindLink (3 samples, 0.02%)</title><rect x="97.5319%" y="69" width="0.0150%" height="15" fill="rgb(207,62,29)" fg:x="19442" fg:w="3"/><text x="97.7819%" y="79.50"></text></g><g><title>getGenericCommand (4,402 samples, 22.08%)</title><rect x="75.4741%" y="117" width="22.0829%" height="15" fill="rgb(239,0,17)" fg:x="15045" fg:w="4402"/><text x="75.7241%" y="127.50">getGenericCommand</text></g><g><title>ull2string (2 samples, 0.01%)</title><rect x="97.5469%" y="101" width="0.0100%" height="15" fill="rgb(238,62,44)" fg:x="19445" fg:w="2"/><text x="97.7969%" y="111.50"></text></g><g><title>DYLD-STUB$$__commpage_gettimeofday (3 samples, 0.02%)</title><rect x="97.5971%" y="101" width="0.0150%" height="15" fill="rgb(236,128,51)" fg:x="19455" fg:w="3"/><text x="97.8471%" y="111.50"></text></g><g><title>gettimeofday (108 samples, 0.54%)</title><rect x="97.5569%" y="117" width="0.5418%" height="15" fill="rgb(253,155,20)" fg:x="19447" fg:w="108"/><text x="97.8069%" y="127.50"></text></g><g><title>__commpage_gettimeofday_internal (96 samples, 0.48%)</title><rect x="97.6171%" y="101" width="0.4816%" height="15" fill="rgb(223,121,0)" fg:x="19459" fg:w="96"/><text x="97.8671%" y="111.50"></text></g><g><title>mach_absolute_time (89 samples, 0.45%)</title><rect x="97.6523%" y="85" width="0.4465%" height="15" fill="rgb(226,185,10)" fg:x="19466" fg:w="89"/><text x="97.9023%" y="95.50"></text></g><g><title>hdr_record_value (2 samples, 0.01%)</title><rect x="98.0987%" y="117" width="0.0100%" height="15" fill="rgb(251,179,45)" fg:x="19555" fg:w="2"/><text x="98.3487%" y="127.50"></text></g><g><title>hdr_record_values (4 samples, 0.02%)</title><rect x="98.1088%" y="117" width="0.0201%" height="15" fill="rgb(222,189,51)" fg:x="19557" fg:w="4"/><text x="98.3588%" y="127.50"></text></g><g><title>lookupKeyReadOrReply (2 samples, 0.01%)</title><rect x="98.1288%" y="117" width="0.0100%" height="15" fill="rgb(205,206,3)" fg:x="19561" fg:w="2"/><text x="98.3788%" y="127.50"></text></g><g><title>call (4,569 samples, 22.92%)</title><rect x="75.2333%" y="133" width="22.9206%" height="15" fill="rgb(234,162,51)" fg:x="14997" fg:w="4569"/><text x="75.4833%" y="143.50">call</text></g><g><title>slowlogPushCurrentCommand (2 samples, 0.01%)</title><rect x="98.1439%" y="117" width="0.0100%" height="15" fill="rgb(253,104,5)" fg:x="19564" fg:w="2"/><text x="98.3939%" y="127.50"></text></g><g><title>commandCheckArity (2 samples, 0.01%)</title><rect x="98.1539%" y="133" width="0.0100%" height="15" fill="rgb(242,190,3)" fg:x="19566" fg:w="2"/><text x="98.4039%" y="143.50"></text></g><g><title>_xzm_free (5 samples, 0.03%)</title><rect x="98.1790%" y="117" width="0.0251%" height="15" fill="rgb(211,172,22)" fg:x="19571" fg:w="5"/><text x="98.4290%" y="127.50"></text></g><g><title>_free (5 samples, 0.03%)</title><rect x="98.2492%" y="101" width="0.0251%" height="15" fill="rgb(243,145,5)" fg:x="19585" fg:w="5"/><text x="98.4992%" y="111.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (2 samples, 0.01%)</title><rect x="98.3746%" y="85" width="0.0100%" height="15" fill="rgb(214,78,35)" fg:x="19610" fg:w="2"/><text x="98.6246%" y="95.50"></text></g><g><title>__bzero (2 samples, 0.01%)</title><rect x="98.3847%" y="85" width="0.0100%" height="15" fill="rgb(226,151,36)" fg:x="19612" fg:w="2"/><text x="98.6347%" y="95.50"></text></g><g><title>_xzm_free (26 samples, 0.13%)</title><rect x="98.2743%" y="101" width="0.1304%" height="15" fill="rgb(211,172,22)" fg:x="19590" fg:w="26"/><text x="98.5243%" y="111.50"></text></g><g><title>_platform_memset (2 samples, 0.01%)</title><rect x="98.3947%" y="85" width="0.0100%" height="15" fill="rgb(217,168,42)" fg:x="19614" fg:w="2"/><text x="98.6447%" y="95.50"></text></g><g><title>decrRefCount (7 samples, 0.04%)</title><rect x="98.4047%" y="101" width="0.0351%" height="15" fill="rgb(230,52,51)" fg:x="19616" fg:w="7"/><text x="98.6547%" y="111.50"></text></g><g><title>free (2 samples, 0.01%)</title><rect x="98.4399%" y="101" width="0.0100%" height="15" fill="rgb(226,114,54)" fg:x="19623" fg:w="2"/><text x="98.6899%" y="111.50"></text></g><g><title>_tlv_get_addr (3 samples, 0.02%)</title><rect x="98.4950%" y="85" width="0.0150%" height="15" fill="rgb(226,77,8)" fg:x="19634" fg:w="3"/><text x="98.7450%" y="95.50"></text></g><g><title>commandProcessed (87 samples, 0.44%)</title><rect x="98.1690%" y="133" width="0.4364%" height="15" fill="rgb(231,207,19)" fg:x="19569" fg:w="87"/><text x="98.4190%" y="143.50"></text></g><g><title>resetClientInternal (80 samples, 0.40%)</title><rect x="98.2041%" y="117" width="0.4013%" height="15" fill="rgb(226,23,47)" fg:x="19576" fg:w="80"/><text x="98.4541%" y="127.50"></text></g><g><title>zfree (29 samples, 0.15%)</title><rect x="98.4599%" y="101" width="0.1455%" height="15" fill="rgb(212,30,12)" fg:x="19627" fg:w="29"/><text x="98.7099%" y="111.50"></text></g><g><title>malloc_size (19 samples, 0.10%)</title><rect x="98.5101%" y="85" width="0.0953%" height="15" fill="rgb(235,148,42)" fg:x="19637" fg:w="19"/><text x="98.7601%" y="95.50"></text></g><g><title>xzm_malloc_zone_size (11 samples, 0.06%)</title><rect x="98.5502%" y="69" width="0.0552%" height="15" fill="rgb(240,58,39)" fg:x="19645" fg:w="11"/><text x="98.8002%" y="79.50"></text></g><g><title>getCommandFlags (3 samples, 0.02%)</title><rect x="98.6054%" y="133" width="0.0150%" height="15" fill="rgb(207,103,36)" fg:x="19656" fg:w="3"/><text x="98.8554%" y="143.50"></text></g><g><title>strcasecmp (2 samples, 0.01%)</title><rect x="98.6305%" y="133" width="0.0100%" height="15" fill="rgb(235,39,50)" fg:x="19661" fg:w="2"/><text x="98.8805%" y="143.50"></text></g><g><title>strcasecmp_l (2 samples, 0.01%)</title><rect x="98.6405%" y="133" width="0.0100%" height="15" fill="rgb(208,138,54)" fg:x="19663" fg:w="2"/><text x="98.8905%" y="143.50"></text></g><g><title>pthread_equal (5 samples, 0.03%)</title><rect x="98.6706%" y="117" width="0.0251%" height="15" fill="rgb(205,106,39)" fg:x="19669" fg:w="5"/><text x="98.9206%" y="127.50"></text></g><g><title>pthread_self (5 samples, 0.03%)</title><rect x="98.6957%" y="117" width="0.0251%" height="15" fill="rgb(207,222,5)" fg:x="19674" fg:w="5"/><text x="98.9457%" y="127.50"></text></g><g><title>updateClientMemUsageAndBucket (16 samples, 0.08%)</title><rect x="98.6505%" y="133" width="0.0803%" height="15" fill="rgb(207,48,25)" fg:x="19665" fg:w="16"/><text x="98.9005%" y="143.50"></text></g><g><title>removeClientFromMemUsageBucket (2 samples, 0.01%)</title><rect x="98.7208%" y="117" width="0.0100%" height="15" fill="rgb(226,60,33)" fg:x="19679" fg:w="2"/><text x="98.9708%" y="127.50"></text></g><g><title>processCommandAndResetClient (4,727 samples, 23.71%)</title><rect x="75.0426%" y="149" width="23.7133%" height="15" fill="rgb(227,82,25)" fg:x="14959" fg:w="4727"/><text x="75.2926%" y="159.50">processCommandAndResetClient</text></g><g><title>writeCommandsDeniedByDiskError (5 samples, 0.03%)</title><rect x="98.7308%" y="133" width="0.0251%" height="15" fill="rgb(207,172,37)" fg:x="19681" fg:w="5"/><text x="98.9808%" y="143.50"></text></g><g><title>sdsnewplacement (2 samples, 0.01%)</title><rect x="98.7559%" y="149" width="0.0100%" height="15" fill="rgb(221,193,46)" fg:x="19686" fg:w="2"/><text x="99.0059%" y="159.50"></text></g><g><title>sdsrange (2 samples, 0.01%)</title><rect x="98.7659%" y="149" width="0.0100%" height="15" fill="rgb(215,82,47)" fg:x="19688" fg:w="2"/><text x="99.0159%" y="159.50"></text></g><g><title>sdssubstr (3 samples, 0.02%)</title><rect x="98.7760%" y="149" width="0.0150%" height="15" fill="rgb(209,49,8)" fg:x="19690" fg:w="3"/><text x="99.0260%" y="159.50"></text></g><g><title>strcasecmp_l (3 samples, 0.02%)</title><rect x="98.7910%" y="149" width="0.0150%" height="15" fill="rgb(208,138,54)" fg:x="19693" fg:w="3"/><text x="99.0410%" y="159.50"></text></g><g><title>updateClientMemUsageAndBucket (3 samples, 0.02%)</title><rect x="98.8061%" y="149" width="0.0150%" height="15" fill="rgb(207,48,25)" fg:x="19696" fg:w="3"/><text x="99.0561%" y="159.50"></text></g><g><title>pthread_self (2 samples, 0.01%)</title><rect x="98.8111%" y="133" width="0.0100%" height="15" fill="rgb(207,222,5)" fg:x="19697" fg:w="2"/><text x="99.0611%" y="143.50"></text></g><g><title>processInputBuffer (4,933 samples, 24.75%)</title><rect x="74.0845%" y="165" width="24.7467%" height="15" fill="rgb(246,155,31)" fg:x="14768" fg:w="4933"/><text x="74.3345%" y="175.50">processInputBuffer</text></g><g><title>zmalloc_usable (2 samples, 0.01%)</title><rect x="98.8211%" y="149" width="0.0100%" height="15" fill="rgb(254,70,3)" fg:x="19699" fg:w="2"/><text x="99.0711%" y="159.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.03%)</title><rect x="98.8412%" y="149" width="0.0301%" height="15" fill="rgb(226,77,8)" fg:x="19703" fg:w="6"/><text x="99.0912%" y="159.50"></text></g><g><title>resetReusableQueryBuf (10 samples, 0.05%)</title><rect x="98.8311%" y="165" width="0.0502%" height="15" fill="rgb(252,174,29)" fg:x="19701" fg:w="10"/><text x="99.0811%" y="175.50"></text></g><g><title>sdsclear (2 samples, 0.01%)</title><rect x="98.8713%" y="149" width="0.0100%" height="15" fill="rgb(247,14,29)" fg:x="19709" fg:w="2"/><text x="99.1213%" y="159.50"></text></g><g><title>connSocketEventHandler (10,212 samples, 51.23%)</title><rect x="47.7074%" y="197" width="51.2291%" height="15" fill="rgb(205,41,20)" fg:x="9510" fg:w="10212"/><text x="47.9574%" y="207.50">connSocketEventHandler</text></g><g><title>readQueryFromClient (10,203 samples, 51.18%)</title><rect x="47.7526%" y="181" width="51.1839%" height="15" fill="rgb(220,13,26)" fg:x="9519" fg:w="10203"/><text x="48.0026%" y="191.50">readQueryFromClient</text></g><g><title>sdsIncrLen (11 samples, 0.06%)</title><rect x="98.8813%" y="165" width="0.0552%" height="15" fill="rgb(246,34,45)" fg:x="19711" fg:w="11"/><text x="99.1313%" y="175.50"></text></g><g><title>kevent (205 samples, 1.03%)</title><rect x="98.9365%" y="197" width="1.0284%" height="15" fill="rgb(208,215,22)" fg:x="19722" fg:w="205"/><text x="99.1865%" y="207.50"></text></g><g><title>task_for_pid (3 samples, 0.02%)</title><rect x="99.9699%" y="165" width="0.0150%" height="15" fill="rgb(227,113,0)" fg:x="19928" fg:w="3"/><text x="100.2199%" y="175.50"></text></g><g><title>cronUpdateMemoryStats (5 samples, 0.03%)</title><rect x="99.9699%" y="181" width="0.0251%" height="15" fill="rgb(226,174,8)" fg:x="19928" fg:w="5"/><text x="100.2199%" y="191.50"></text></g><g><title>task_info (2 samples, 0.01%)</title><rect x="99.9850%" y="165" width="0.0100%" height="15" fill="rgb(221,182,16)" fg:x="19931" fg:w="2"/><text x="100.2350%" y="175.50"></text></g><g><title>mach_msg2_internal (2 samples, 0.01%)</title><rect x="99.9850%" y="149" width="0.0100%" height="15" fill="rgb(223,0,2)" fg:x="19931" fg:w="2"/><text x="100.2350%" y="159.50"></text></g><g><title>mach_msg2_trap (2 samples, 0.01%)</title><rect x="99.9850%" y="133" width="0.0100%" height="15" fill="rgb(228,60,23)" fg:x="19931" fg:w="2"/><text x="100.2350%" y="143.50"></text></g><g><title>all (19,934 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="19934"/><text x="0.2500%" y="271.50"></text></g><g><title>start (19,934 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,214,39)" fg:x="0" fg:w="19934"/><text x="0.2500%" y="255.50">start</text></g><g><title>main (19,934 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,28,47)" fg:x="0" fg:w="19934"/><text x="0.2500%" y="239.50">main</text></g><g><title>aeProcessEvents (19,933 samples, 99.99%)</title><rect x="0.0050%" y="213" width="99.9950%" height="15" fill="rgb(232,132,35)" fg:x="1" fg:w="19933"/><text x="0.2550%" y="223.50">aeProcessEvents</text></g><g><title>serverCron (6 samples, 0.03%)</title><rect x="99.9699%" y="197" width="0.0301%" height="15" fill="rgb(245,109,53)" fg:x="19928" fg:w="6"/><text x="100.2199%" y="207.50"></text></g></svg></svg>