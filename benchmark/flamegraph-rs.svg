<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="65253"><g><title>start (15 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0230%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="15"/><text x="0.2500%" y="415.50"></text></g><g><title>main (10 samples, 0.02%)</title><rect x="0.0077%" y="389" width="0.0153%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="10"/><text x="0.2577%" y="399.50"></text></g><g><title>std::rt::lang_start_internal (10 samples, 0.02%)</title><rect x="0.0077%" y="373" width="0.0153%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="10"/><text x="0.2577%" y="383.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10 samples, 0.02%)</title><rect x="0.0077%" y="357" width="0.0153%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="10"/><text x="0.2577%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.02%)</title><rect x="0.0077%" y="341" width="0.0153%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="10"/><text x="0.2577%" y="351.50"></text></g><g><title>codecrafters_redis::main (10 samples, 0.02%)</title><rect x="0.0077%" y="325" width="0.0153%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="10"/><text x="0.2577%" y="335.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (10 samples, 0.02%)</title><rect x="0.0077%" y="309" width="0.0153%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="10"/><text x="0.2577%" y="319.50"></text></g><g><title>pow (29 samples, 0.04%)</title><rect x="0.4873%" y="229" width="0.0444%" height="15" fill="rgb(228,23,34)" fg:x="318" fg:w="29"/><text x="0.7373%" y="239.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (8 samples, 0.01%)</title><rect x="0.6436%" y="181" width="0.0123%" height="15" fill="rgb(218,30,26)" fg:x="420" fg:w="8"/><text x="0.8936%" y="191.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (8 samples, 0.01%)</title><rect x="0.6559%" y="181" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="428" fg:w="8"/><text x="0.9059%" y="191.50"></text></g><g><title>mach_absolute_time (345 samples, 0.53%)</title><rect x="0.6682%" y="181" width="0.5287%" height="15" fill="rgb(250,228,42)" fg:x="436" fg:w="345"/><text x="0.9182%" y="191.50"></text></g><g><title>clock_gettime_nsec_np (393 samples, 0.60%)</title><rect x="0.6130%" y="197" width="0.6023%" height="15" fill="rgb(240,193,28)" fg:x="400" fg:w="393"/><text x="0.8630%" y="207.50"></text></g><g><title>mach_timebase_info (12 samples, 0.02%)</title><rect x="1.1969%" y="181" width="0.0184%" height="15" fill="rgb(216,20,37)" fg:x="781" fg:w="12"/><text x="1.4469%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (452 samples, 0.69%)</title><rect x="0.5318%" y="229" width="0.6927%" height="15" fill="rgb(206,188,39)" fg:x="347" fg:w="452"/><text x="0.7818%" y="239.50"></text></g><g><title>clock_gettime (425 samples, 0.65%)</title><rect x="0.5732%" y="213" width="0.6513%" height="15" fill="rgb(217,207,13)" fg:x="374" fg:w="425"/><text x="0.8232%" y="223.50"></text></g><g><title>mach_absolute_time (81 samples, 0.12%)</title><rect x="1.2720%" y="165" width="0.1241%" height="15" fill="rgb(231,73,38)" fg:x="830" fg:w="81"/><text x="1.5220%" y="175.50"></text></g><g><title>clock_gettime_nsec_np (108 samples, 0.17%)</title><rect x="1.2459%" y="181" width="0.1655%" height="15" fill="rgb(225,20,46)" fg:x="813" fg:w="108"/><text x="1.4959%" y="191.50"></text></g><g><title>mach_timebase_info (10 samples, 0.02%)</title><rect x="1.3961%" y="165" width="0.0153%" height="15" fill="rgb(210,31,41)" fg:x="911" fg:w="10"/><text x="1.6461%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (124 samples, 0.19%)</title><rect x="1.2260%" y="213" width="0.1900%" height="15" fill="rgb(221,200,47)" fg:x="800" fg:w="124"/><text x="1.4760%" y="223.50"></text></g><g><title>clock_gettime (117 samples, 0.18%)</title><rect x="1.2367%" y="197" width="0.1793%" height="15" fill="rgb(226,26,5)" fg:x="807" fg:w="117"/><text x="1.4867%" y="207.50"></text></g><g><title>std::time::Instant::elapsed (127 samples, 0.19%)</title><rect x="1.2245%" y="229" width="0.1946%" height="15" fill="rgb(249,33,26)" fg:x="799" fg:w="127"/><text x="1.4745%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (16 samples, 0.02%)</title><rect x="1.4283%" y="229" width="0.0245%" height="15" fill="rgb(235,183,28)" fg:x="932" fg:w="16"/><text x="1.6783%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (24 samples, 0.04%)</title><rect x="1.4528%" y="229" width="0.0368%" height="15" fill="rgb(221,5,38)" fg:x="948" fg:w="24"/><text x="1.7028%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (178 samples, 0.27%)</title><rect x="1.4927%" y="229" width="0.2728%" height="15" fill="rgb(247,18,42)" fg:x="974" fg:w="178"/><text x="1.7427%" y="239.50"></text></g><g><title>__psynch_cvsignal (215 samples, 0.33%)</title><rect x="1.9539%" y="181" width="0.3295%" height="15" fill="rgb(241,131,45)" fg:x="1275" fg:w="215"/><text x="2.2039%" y="191.50"></text></g><g><title>pthread_cond_signal (225 samples, 0.34%)</title><rect x="1.9447%" y="197" width="0.3448%" height="15" fill="rgb(249,31,29)" fg:x="1269" fg:w="225"/><text x="2.1947%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (250 samples, 0.38%)</title><rect x="1.9263%" y="213" width="0.3831%" height="15" fill="rgb(225,111,53)" fg:x="1257" fg:w="250"/><text x="2.1763%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (11 samples, 0.02%)</title><rect x="2.2926%" y="197" width="0.0169%" height="15" fill="rgb(238,160,17)" fg:x="1496" fg:w="11"/><text x="2.5426%" y="207.50"></text></g><g><title>clock_gettime (10 samples, 0.02%)</title><rect x="2.2941%" y="181" width="0.0153%" height="15" fill="rgb(214,148,48)" fg:x="1497" fg:w="10"/><text x="2.5441%" y="191.50"></text></g><g><title>clock_gettime_nsec_np (10 samples, 0.02%)</title><rect x="2.2941%" y="165" width="0.0153%" height="15" fill="rgb(232,36,49)" fg:x="1497" fg:w="10"/><text x="2.5441%" y="175.50"></text></g><g><title>mach_absolute_time (9 samples, 0.01%)</title><rect x="2.2957%" y="149" width="0.0138%" height="15" fill="rgb(209,103,24)" fg:x="1498" fg:w="9"/><text x="2.5457%" y="159.50"></text></g><g><title>DYLD-STUB$$pthread_mutex_unlock (8 samples, 0.01%)</title><rect x="2.7662%" y="181" width="0.0123%" height="15" fill="rgb(229,88,8)" fg:x="1805" fg:w="8"/><text x="3.0162%" y="191.50"></text></g><g><title>__psynch_cvwait (33 samples, 0.05%)</title><rect x="2.7784%" y="181" width="0.0506%" height="15" fill="rgb(213,181,19)" fg:x="1813" fg:w="33"/><text x="3.0284%" y="191.50"></text></g><g><title>__psynch_cvwait (1,994 samples, 3.06%)</title><rect x="2.9485%" y="165" width="3.0558%" height="15" fill="rgb(254,191,54)" fg:x="1924" fg:w="1994"/><text x="3.1985%" y="175.50">__p..</text></g><g><title>_pthread_mutex_droplock (8 samples, 0.01%)</title><rect x="6.0043%" y="165" width="0.0123%" height="15" fill="rgb(241,83,37)" fg:x="3918" fg:w="8"/><text x="6.2543%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (15 samples, 0.02%)</title><rect x="6.0166%" y="165" width="0.0230%" height="15" fill="rgb(233,36,39)" fg:x="3926" fg:w="15"/><text x="6.2666%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (15 samples, 0.02%)</title><rect x="6.0166%" y="149" width="0.0230%" height="15" fill="rgb(226,3,54)" fg:x="3926" fg:w="15"/><text x="6.2666%" y="159.50"></text></g><g><title>__psynch_mutexwait (15 samples, 0.02%)</title><rect x="6.0166%" y="133" width="0.0230%" height="15" fill="rgb(245,192,40)" fg:x="3926" fg:w="15"/><text x="6.2666%" y="143.50"></text></g><g><title>pthread_mutex_lock (26 samples, 0.04%)</title><rect x="6.0396%" y="165" width="0.0398%" height="15" fill="rgb(238,167,29)" fg:x="3941" fg:w="26"/><text x="6.2896%" y="175.50"></text></g><g><title>_pthread_cond_wait (2,160 samples, 3.31%)</title><rect x="2.8290%" y="181" width="3.3102%" height="15" fill="rgb(232,182,51)" fg:x="1846" fg:w="2160"/><text x="3.0790%" y="191.50">_pt..</text></g><g><title>pthread_testcancel (39 samples, 0.06%)</title><rect x="6.0794%" y="165" width="0.0598%" height="15" fill="rgb(231,60,39)" fg:x="3967" fg:w="39"/><text x="6.3294%" y="175.50"></text></g><g><title>pthread_mutex_lock (8 samples, 0.01%)</title><rect x="6.1453%" y="181" width="0.0123%" height="15" fill="rgb(208,69,12)" fg:x="4010" fg:w="8"/><text x="6.3953%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2,299 samples, 3.52%)</title><rect x="2.6482%" y="197" width="3.5232%" height="15" fill="rgb(235,93,37)" fg:x="1728" fg:w="2299"/><text x="2.8982%" y="207.50">par..</text></g><g><title>pthread_mutex_unlock (9 samples, 0.01%)</title><rect x="6.1576%" y="181" width="0.0138%" height="15" fill="rgb(213,116,39)" fg:x="4018" fg:w="9"/><text x="6.4076%" y="191.50"></text></g><g><title>mio::poll::Poll::poll (10 samples, 0.02%)</title><rect x="6.2403%" y="181" width="0.0153%" height="15" fill="rgb(222,207,29)" fg:x="4072" fg:w="10"/><text x="6.4903%" y="191.50"></text></g><g><title>DYLD-STUB$$clock_gettime (11 samples, 0.02%)</title><rect x="6.2786%" y="165" width="0.0169%" height="15" fill="rgb(206,96,30)" fg:x="4097" fg:w="11"/><text x="6.5286%" y="175.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (9 samples, 0.01%)</title><rect x="6.3445%" y="133" width="0.0138%" height="15" fill="rgb(218,138,4)" fg:x="4140" fg:w="9"/><text x="6.5945%" y="143.50"></text></g><g><title>mach_absolute_time (157 samples, 0.24%)</title><rect x="6.3583%" y="133" width="0.2406%" height="15" fill="rgb(250,191,14)" fg:x="4149" fg:w="157"/><text x="6.6083%" y="143.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (238 samples, 0.36%)</title><rect x="6.2557%" y="181" width="0.3647%" height="15" fill="rgb(239,60,40)" fg:x="4082" fg:w="238"/><text x="6.5057%" y="191.50"></text></g><g><title>clock_gettime (212 samples, 0.32%)</title><rect x="6.2955%" y="165" width="0.3249%" height="15" fill="rgb(206,27,48)" fg:x="4108" fg:w="212"/><text x="6.5455%" y="175.50"></text></g><g><title>clock_gettime_nsec_np (200 samples, 0.31%)</title><rect x="6.3139%" y="149" width="0.3065%" height="15" fill="rgb(225,35,8)" fg:x="4120" fg:w="200"/><text x="6.5639%" y="159.50"></text></g><g><title>mach_timebase_info (14 samples, 0.02%)</title><rect x="6.5989%" y="133" width="0.0215%" height="15" fill="rgb(250,213,24)" fg:x="4306" fg:w="14"/><text x="6.8489%" y="143.50"></text></g><g><title>std::time::Instant::now (8 samples, 0.01%)</title><rect x="6.6296%" y="181" width="0.0123%" height="15" fill="rgb(247,123,22)" fg:x="4326" fg:w="8"/><text x="6.8796%" y="191.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (27 samples, 0.04%)</title><rect x="6.6418%" y="181" width="0.0414%" height="15" fill="rgb(231,138,38)" fg:x="4334" fg:w="27"/><text x="6.8918%" y="191.50"></text></g><g><title>kevent (44 samples, 0.07%)</title><rect x="6.8748%" y="165" width="0.0674%" height="15" fill="rgb(231,145,46)" fg:x="4486" fg:w="44"/><text x="7.1248%" y="175.50"></text></g><g><title>mio::poll::Poll::poll (3,609 samples, 5.53%)</title><rect x="6.9422%" y="165" width="5.5308%" height="15" fill="rgb(251,118,11)" fg:x="4530" fg:w="3609"/><text x="7.1922%" y="175.50">mio::po..</text></g><g><title>kevent (3,581 samples, 5.49%)</title><rect x="6.9851%" y="149" width="5.4879%" height="15" fill="rgb(217,147,25)" fg:x="4558" fg:w="3581"/><text x="7.2351%" y="159.50">kevent</text></g><g><title>_tlv_get_addr (20 samples, 0.03%)</title><rect x="12.7872%" y="101" width="0.0306%" height="15" fill="rgb(247,81,37)" fg:x="8344" fg:w="20"/><text x="13.0372%" y="111.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (40 samples, 0.06%)</title><rect x="12.8178%" y="101" width="0.0613%" height="15" fill="rgb(209,12,38)" fg:x="8364" fg:w="40"/><text x="13.0678%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (28 samples, 0.04%)</title><rect x="12.8362%" y="85" width="0.0429%" height="15" fill="rgb(227,1,9)" fg:x="8376" fg:w="28"/><text x="13.0862%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (111 samples, 0.17%)</title><rect x="12.7197%" y="133" width="0.1701%" height="15" fill="rgb(248,47,43)" fg:x="8300" fg:w="111"/><text x="12.9697%" y="143.50"></text></g><g><title>tokio::runtime::context::with_scheduler (86 samples, 0.13%)</title><rect x="12.7580%" y="117" width="0.1318%" height="15" fill="rgb(221,10,30)" fg:x="8325" fg:w="86"/><text x="13.0080%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (7 samples, 0.01%)</title><rect x="12.8791%" y="101" width="0.0107%" height="15" fill="rgb(210,229,1)" fg:x="8404" fg:w="7"/><text x="13.1291%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::schedule (9 samples, 0.01%)</title><rect x="12.8898%" y="133" width="0.0138%" height="15" fill="rgb(222,148,37)" fg:x="8411" fg:w="9"/><text x="13.1398%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (312 samples, 0.48%)</title><rect x="12.4730%" y="165" width="0.4781%" height="15" fill="rgb(234,67,33)" fg:x="8139" fg:w="312"/><text x="12.7230%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (174 samples, 0.27%)</title><rect x="12.6845%" y="149" width="0.2667%" height="15" fill="rgb(247,98,35)" fg:x="8277" fg:w="174"/><text x="12.9345%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (31 samples, 0.05%)</title><rect x="12.9036%" y="133" width="0.0475%" height="15" fill="rgb(247,138,52)" fg:x="8420" fg:w="31"/><text x="13.1536%" y="143.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4,093 samples, 6.27%)</title><rect x="6.6832%" y="181" width="6.2725%" height="15" fill="rgb(213,79,30)" fg:x="4361" fg:w="4093"/><text x="6.9332%" y="191.50">tokio::r..</text></g><g><title>tokio::runtime::signal::Driver::process (10 samples, 0.02%)</title><rect x="12.9634%" y="181" width="0.0153%" height="15" fill="rgb(246,177,23)" fg:x="8459" fg:w="10"/><text x="13.2134%" y="191.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (4,446 samples, 6.81%)</title><rect x="6.1928%" y="197" width="6.8135%" height="15" fill="rgb(230,62,27)" fg:x="4041" fg:w="4446"/><text x="6.4428%" y="207.50">tokio::ru..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (18 samples, 0.03%)</title><rect x="12.9787%" y="181" width="0.0276%" height="15" fill="rgb(216,154,8)" fg:x="8469" fg:w="18"/><text x="13.2287%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (7,006 samples, 10.74%)</title><rect x="2.3156%" y="213" width="10.7367%" height="15" fill="rgb(244,35,45)" fg:x="1511" fg:w="7006"/><text x="2.5656%" y="223.50">tokio::runtime::..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (30 samples, 0.05%)</title><rect x="13.0063%" y="197" width="0.0460%" height="15" fill="rgb(251,115,12)" fg:x="8487" fg:w="30"/><text x="13.2563%" y="207.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (18 samples, 0.03%)</title><rect x="13.0247%" y="181" width="0.0276%" height="15" fill="rgb(240,54,50)" fg:x="8499" fg:w="18"/><text x="13.2747%" y="191.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (9 samples, 0.01%)</title><rect x="13.0385%" y="165" width="0.0138%" height="15" fill="rgb(233,84,52)" fg:x="8508" fg:w="9"/><text x="13.2885%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (12 samples, 0.02%)</title><rect x="13.0523%" y="213" width="0.0184%" height="15" fill="rgb(207,117,47)" fg:x="8517" fg:w="12"/><text x="13.3023%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (11 samples, 0.02%)</title><rect x="13.0707%" y="213" width="0.0169%" height="15" fill="rgb(249,43,39)" fg:x="8529" fg:w="11"/><text x="13.3207%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (8 samples, 0.01%)</title><rect x="13.0906%" y="197" width="0.0123%" height="15" fill="rgb(209,38,44)" fg:x="8542" fg:w="8"/><text x="13.3406%" y="207.50"></text></g><g><title>clock_gettime (7 samples, 0.01%)</title><rect x="13.0921%" y="181" width="0.0107%" height="15" fill="rgb(236,212,23)" fg:x="8543" fg:w="7"/><text x="13.3421%" y="191.50"></text></g><g><title>mio::poll::Poll::poll (148 samples, 0.23%)</title><rect x="13.1212%" y="181" width="0.2268%" height="15" fill="rgb(242,79,21)" fg:x="8562" fg:w="148"/><text x="13.3712%" y="191.50"></text></g><g><title>kevent (144 samples, 0.22%)</title><rect x="13.1274%" y="165" width="0.2207%" height="15" fill="rgb(211,96,35)" fg:x="8566" fg:w="144"/><text x="13.3774%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (173 samples, 0.27%)</title><rect x="13.1059%" y="197" width="0.2651%" height="15" fill="rgb(253,215,40)" fg:x="8552" fg:w="173"/><text x="13.3559%" y="207.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (15 samples, 0.02%)</title><rect x="13.3480%" y="181" width="0.0230%" height="15" fill="rgb(211,81,21)" fg:x="8710" fg:w="15"/><text x="13.5980%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.01%)</title><rect x="13.3588%" y="165" width="0.0123%" height="15" fill="rgb(208,190,38)" fg:x="8717" fg:w="8"/><text x="13.6088%" y="175.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (188 samples, 0.29%)</title><rect x="13.0875%" y="213" width="0.2881%" height="15" fill="rgb(235,213,38)" fg:x="8540" fg:w="188"/><text x="13.3375%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (7,578 samples, 11.61%)</title><rect x="1.7654%" y="229" width="11.6133%" height="15" fill="rgb(237,122,38)" fg:x="1152" fg:w="7578"/><text x="2.0154%" y="239.50">tokio::runtime::s..</text></g><g><title>0x1041d916d (15 samples, 0.02%)</title><rect x="13.4216%" y="213" width="0.0230%" height="15" fill="rgb(244,218,35)" fg:x="8758" fg:w="15"/><text x="13.6716%" y="223.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.01%)</title><rect x="13.4477%" y="213" width="0.0123%" height="15" fill="rgb(240,68,47)" fg:x="8775" fg:w="8"/><text x="13.6977%" y="223.50"></text></g><g><title>mio::waker::Waker::wake (8 samples, 0.01%)</title><rect x="13.4477%" y="197" width="0.0123%" height="15" fill="rgb(210,16,53)" fg:x="8775" fg:w="8"/><text x="13.6977%" y="207.50"></text></g><g><title>kevent (7 samples, 0.01%)</title><rect x="13.4492%" y="181" width="0.0107%" height="15" fill="rgb(235,124,12)" fg:x="8776" fg:w="7"/><text x="13.6992%" y="191.50"></text></g><g><title>_tlv_get_addr (13 samples, 0.02%)</title><rect x="13.4599%" y="213" width="0.0199%" height="15" fill="rgb(224,169,11)" fg:x="8783" fg:w="13"/><text x="13.7099%" y="223.50"></text></g><g><title>__psynch_cvsignal (10 samples, 0.02%)</title><rect x="13.5273%" y="197" width="0.0153%" height="15" fill="rgb(250,166,2)" fg:x="8827" fg:w="10"/><text x="13.7773%" y="207.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (12 samples, 0.02%)</title><rect x="13.5427%" y="197" width="0.0184%" height="15" fill="rgb(242,216,29)" fg:x="8837" fg:w="12"/><text x="13.7927%" y="207.50"></text></g><g><title>_pthread_mutex_firstfit_wake (12 samples, 0.02%)</title><rect x="13.5427%" y="181" width="0.0184%" height="15" fill="rgb(230,116,27)" fg:x="8837" fg:w="12"/><text x="13.7927%" y="191.50"></text></g><g><title>__psynch_mutexdrop (12 samples, 0.02%)</title><rect x="13.5427%" y="165" width="0.0184%" height="15" fill="rgb(228,99,48)" fg:x="8837" fg:w="12"/><text x="13.7927%" y="175.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (11 samples, 0.02%)</title><rect x="13.5611%" y="197" width="0.0169%" height="15" fill="rgb(253,11,6)" fg:x="8849" fg:w="11"/><text x="13.8111%" y="207.50"></text></g><g><title>__psynch_cvsignal (1,065 samples, 1.63%)</title><rect x="13.5948%" y="181" width="1.6321%" height="15" fill="rgb(247,143,39)" fg:x="8871" fg:w="1065"/><text x="13.8448%" y="191.50"></text></g><g><title>pthread_cond_signal (1,085 samples, 1.66%)</title><rect x="13.5779%" y="197" width="1.6628%" height="15" fill="rgb(236,97,10)" fg:x="8860" fg:w="1085"/><text x="13.8279%" y="207.50"></text></g><g><title>_pthread_cond_updateval (9 samples, 0.01%)</title><rect x="15.2269%" y="181" width="0.0138%" height="15" fill="rgb(233,208,19)" fg:x="9936" fg:w="9"/><text x="15.4769%" y="191.50"></text></g><g><title>mach_absolute_time (48 samples, 0.07%)</title><rect x="15.2575%" y="149" width="0.0736%" height="15" fill="rgb(216,164,2)" fg:x="9956" fg:w="48"/><text x="15.5075%" y="159.50"></text></g><g><title>clock_gettime_nsec_np (53 samples, 0.08%)</title><rect x="15.2529%" y="165" width="0.0812%" height="15" fill="rgb(220,129,5)" fg:x="9953" fg:w="53"/><text x="15.5029%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (57 samples, 0.09%)</title><rect x="15.2499%" y="197" width="0.0874%" height="15" fill="rgb(242,17,10)" fg:x="9951" fg:w="57"/><text x="15.4999%" y="207.50"></text></g><g><title>clock_gettime (56 samples, 0.09%)</title><rect x="15.2514%" y="181" width="0.0858%" height="15" fill="rgb(242,107,0)" fg:x="9952" fg:w="56"/><text x="15.5014%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1,213 samples, 1.86%)</title><rect x="13.4798%" y="213" width="1.8589%" height="15" fill="rgb(251,28,31)" fg:x="8796" fg:w="1213"/><text x="13.7298%" y="223.50">p..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9 samples, 0.01%)</title><rect x="15.3495%" y="213" width="0.0138%" height="15" fill="rgb(233,223,10)" fg:x="10016" fg:w="9"/><text x="15.5995%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (7 samples, 0.01%)</title><rect x="15.3679%" y="197" width="0.0107%" height="15" fill="rgb(215,21,27)" fg:x="10028" fg:w="7"/><text x="15.6179%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (28 samples, 0.04%)</title><rect x="15.3633%" y="213" width="0.0429%" height="15" fill="rgb(232,23,21)" fg:x="10025" fg:w="28"/><text x="15.6133%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (18 samples, 0.03%)</title><rect x="15.3786%" y="197" width="0.0276%" height="15" fill="rgb(244,5,23)" fg:x="10035" fg:w="18"/><text x="15.6286%" y="207.50"></text></g><g><title>0x1041d9197 (14 samples, 0.02%)</title><rect x="15.4123%" y="197" width="0.0215%" height="15" fill="rgb(226,81,46)" fg:x="10057" fg:w="14"/><text x="15.6623%" y="207.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (14 samples, 0.02%)</title><rect x="15.4123%" y="181" width="0.0215%" height="15" fill="rgb(247,70,30)" fg:x="10057" fg:w="14"/><text x="15.6623%" y="191.50"></text></g><g><title>_xzm_free (29 samples, 0.04%)</title><rect x="15.4414%" y="181" width="0.0444%" height="15" fill="rgb(212,68,19)" fg:x="10076" fg:w="29"/><text x="15.6914%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.06%)</title><rect x="15.9334%" y="165" width="0.0552%" height="15" fill="rgb(240,187,13)" fg:x="10397" fg:w="36"/><text x="16.1834%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (45 samples, 0.07%)</title><rect x="15.9901%" y="165" width="0.0690%" height="15" fill="rgb(223,113,26)" fg:x="10434" fg:w="45"/><text x="16.2401%" y="175.50"></text></g><g><title>DYLD-STUB$$free (41 samples, 0.06%)</title><rect x="16.0667%" y="165" width="0.0628%" height="15" fill="rgb(206,192,2)" fg:x="10484" fg:w="41"/><text x="16.3167%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (9 samples, 0.01%)</title><rect x="16.1341%" y="165" width="0.0138%" height="15" fill="rgb(241,108,4)" fg:x="10528" fg:w="9"/><text x="16.3841%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (10 samples, 0.02%)</title><rect x="16.1479%" y="165" width="0.0153%" height="15" fill="rgb(247,173,49)" fg:x="10537" fg:w="10"/><text x="16.3979%" y="175.50"></text></g><g><title>__rustc::__rdl_dealloc (8 samples, 0.01%)</title><rect x="16.1632%" y="165" width="0.0123%" height="15" fill="rgb(224,114,35)" fg:x="10547" fg:w="8"/><text x="16.4132%" y="175.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (11 samples, 0.02%)</title><rect x="16.1801%" y="165" width="0.0169%" height="15" fill="rgb(245,159,27)" fg:x="10558" fg:w="11"/><text x="16.4301%" y="175.50"></text></g><g><title>_free (141 samples, 0.22%)</title><rect x="16.1970%" y="165" width="0.2161%" height="15" fill="rgb(245,172,44)" fg:x="10569" fg:w="141"/><text x="16.4470%" y="175.50"></text></g><g><title>_malloc_zone_malloc (55 samples, 0.08%)</title><rect x="16.4130%" y="165" width="0.0843%" height="15" fill="rgb(236,23,11)" fg:x="10710" fg:w="55"/><text x="16.6630%" y="175.50"></text></g><g><title>_platform_memmove (173 samples, 0.27%)</title><rect x="16.4973%" y="165" width="0.2651%" height="15" fill="rgb(205,117,38)" fg:x="10765" fg:w="173"/><text x="16.7473%" y="175.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (11 samples, 0.02%)</title><rect x="17.6482%" y="149" width="0.0169%" height="15" fill="rgb(237,72,25)" fg:x="11516" fg:w="11"/><text x="17.8982%" y="159.50"></text></g><g><title>__bzero (7 samples, 0.01%)</title><rect x="17.6651%" y="149" width="0.0107%" height="15" fill="rgb(244,70,9)" fg:x="11527" fg:w="7"/><text x="17.9151%" y="159.50"></text></g><g><title>_platform_memset (36 samples, 0.06%)</title><rect x="17.6758%" y="149" width="0.0552%" height="15" fill="rgb(217,125,39)" fg:x="11534" fg:w="36"/><text x="17.9258%" y="159.50"></text></g><g><title>_xzm_free (960 samples, 1.47%)</title><rect x="16.7624%" y="165" width="1.4712%" height="15" fill="rgb(235,36,10)" fg:x="10938" fg:w="960"/><text x="17.0124%" y="175.50"></text></g><g><title>mach_absolute_time (328 samples, 0.50%)</title><rect x="17.7310%" y="149" width="0.5027%" height="15" fill="rgb(251,123,47)" fg:x="11570" fg:w="328"/><text x="17.9810%" y="159.50"></text></g><g><title>_xzm_xzone_free_freelist (14 samples, 0.02%)</title><rect x="18.2398%" y="165" width="0.0215%" height="15" fill="rgb(221,13,13)" fg:x="11902" fg:w="14"/><text x="18.4898%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (44 samples, 0.07%)</title><rect x="18.2612%" y="165" width="0.0674%" height="15" fill="rgb(238,131,9)" fg:x="11916" fg:w="44"/><text x="18.5112%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_tiny (210 samples, 0.32%)</title><rect x="18.3302%" y="165" width="0.3218%" height="15" fill="rgb(211,50,8)" fg:x="11961" fg:w="210"/><text x="18.5802%" y="175.50"></text></g><g><title>DYLD-STUB$$free (14 samples, 0.02%)</title><rect x="18.6551%" y="149" width="0.0215%" height="15" fill="rgb(245,182,24)" fg:x="12173" fg:w="14"/><text x="18.9051%" y="159.50"></text></g><g><title>_free (40 samples, 0.06%)</title><rect x="18.6781%" y="149" width="0.0613%" height="15" fill="rgb(242,14,37)" fg:x="12188" fg:w="40"/><text x="18.9281%" y="159.50"></text></g><g><title>_platform_memset (13 samples, 0.02%)</title><rect x="18.9708%" y="133" width="0.0199%" height="15" fill="rgb(246,228,12)" fg:x="12379" fg:w="13"/><text x="19.2208%" y="143.50"></text></g><g><title>_xzm_free (330 samples, 0.51%)</title><rect x="18.7394%" y="149" width="0.5057%" height="15" fill="rgb(213,55,15)" fg:x="12228" fg:w="330"/><text x="18.9894%" y="159.50"></text></g><g><title>mach_absolute_time (166 samples, 0.25%)</title><rect x="18.9907%" y="133" width="0.2544%" height="15" fill="rgb(209,9,3)" fg:x="12392" fg:w="166"/><text x="19.2407%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (390 samples, 0.60%)</title><rect x="18.6520%" y="165" width="0.5977%" height="15" fill="rgb(230,59,30)" fg:x="12171" fg:w="390"/><text x="18.9020%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (17 samples, 0.03%)</title><rect x="19.2696%" y="133" width="0.0261%" height="15" fill="rgb(209,121,21)" fg:x="12574" fg:w="17"/><text x="19.5196%" y="143.50"></text></g><g><title>_malloc_zone_malloc (26 samples, 0.04%)</title><rect x="19.3095%" y="133" width="0.0398%" height="15" fill="rgb(220,109,13)" fg:x="12600" fg:w="26"/><text x="19.5595%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (18 samples, 0.03%)</title><rect x="19.3493%" y="133" width="0.0276%" height="15" fill="rgb(232,18,1)" fg:x="12626" fg:w="18"/><text x="19.5993%" y="143.50"></text></g><g><title>alloc::alloc::alloc (226 samples, 0.35%)</title><rect x="19.2665%" y="149" width="0.3463%" height="15" fill="rgb(215,41,42)" fg:x="12572" fg:w="226"/><text x="19.5165%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (150 samples, 0.23%)</title><rect x="19.3830%" y="133" width="0.2299%" height="15" fill="rgb(224,123,36)" fg:x="12648" fg:w="150"/><text x="19.6330%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (241 samples, 0.37%)</title><rect x="19.2558%" y="165" width="0.3693%" height="15" fill="rgb(240,125,3)" fg:x="12565" fg:w="241"/><text x="19.5058%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (7 samples, 0.01%)</title><rect x="19.6343%" y="165" width="0.0107%" height="15" fill="rgb(205,98,50)" fg:x="12812" fg:w="7"/><text x="19.8843%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (28 samples, 0.04%)</title><rect x="19.6849%" y="133" width="0.0429%" height="15" fill="rgb(205,185,37)" fg:x="12845" fg:w="28"/><text x="19.9349%" y="143.50"></text></g><g><title>_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="19.7569%" y="133" width="0.0276%" height="15" fill="rgb(238,207,15)" fg:x="12892" fg:w="18"/><text x="20.0069%" y="143.50"></text></g><g><title>xzm_malloc_zone_realloc (9 samples, 0.01%)</title><rect x="19.8780%" y="101" width="0.0138%" height="15" fill="rgb(213,199,42)" fg:x="12971" fg:w="9"/><text x="20.1280%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (14 samples, 0.02%)</title><rect x="19.9899%" y="85" width="0.0215%" height="15" fill="rgb(235,201,11)" fg:x="13044" fg:w="14"/><text x="20.2399%" y="95.50"></text></g><g><title>_platform_memmove (49 samples, 0.08%)</title><rect x="20.0129%" y="85" width="0.0751%" height="15" fill="rgb(207,46,11)" fg:x="13059" fg:w="49"/><text x="20.2629%" y="95.50"></text></g><g><title>_xzm_free (78 samples, 0.12%)</title><rect x="20.0880%" y="85" width="0.1195%" height="15" fill="rgb(241,35,35)" fg:x="13108" fg:w="78"/><text x="20.3380%" y="95.50"></text></g><g><title>mach_absolute_time (33 samples, 0.05%)</title><rect x="20.1569%" y="69" width="0.0506%" height="15" fill="rgb(243,32,47)" fg:x="13153" fg:w="33"/><text x="20.4069%" y="79.50"></text></g><g><title>_xzm_xzone_malloc (12 samples, 0.02%)</title><rect x="20.2090%" y="85" width="0.0184%" height="15" fill="rgb(247,202,23)" fg:x="13187" fg:w="12"/><text x="20.4590%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_small_freelist (20 samples, 0.03%)</title><rect x="20.2290%" y="85" width="0.0306%" height="15" fill="rgb(219,102,11)" fg:x="13200" fg:w="20"/><text x="20.4790%" y="95.50"></text></g><g><title>_malloc_zone_realloc (311 samples, 0.48%)</title><rect x="19.8305%" y="117" width="0.4766%" height="15" fill="rgb(243,110,44)" fg:x="12940" fg:w="311"/><text x="20.0805%" y="127.50"></text></g><g><title>xzm_realloc (271 samples, 0.42%)</title><rect x="19.8918%" y="101" width="0.4153%" height="15" fill="rgb(222,74,54)" fg:x="12980" fg:w="271"/><text x="20.1418%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (31 samples, 0.05%)</title><rect x="20.2596%" y="85" width="0.0475%" height="15" fill="rgb(216,99,12)" fg:x="13220" fg:w="31"/><text x="20.5096%" y="95.50"></text></g><g><title>xzm_malloc_zone_size (177 samples, 0.27%)</title><rect x="20.3086%" y="117" width="0.2713%" height="15" fill="rgb(226,22,26)" fg:x="13252" fg:w="177"/><text x="20.5586%" y="127.50"></text></g><g><title>_realloc (521 samples, 0.80%)</title><rect x="19.7861%" y="133" width="0.7984%" height="15" fill="rgb(217,163,10)" fg:x="12911" fg:w="521"/><text x="20.0361%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (55 samples, 0.08%)</title><rect x="20.5845%" y="133" width="0.0843%" height="15" fill="rgb(213,25,53)" fg:x="13432" fg:w="55"/><text x="20.8345%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (68 samples, 0.10%)</title><rect x="20.6688%" y="133" width="0.1042%" height="15" fill="rgb(252,105,26)" fg:x="13487" fg:w="68"/><text x="20.9188%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (737 samples, 1.13%)</title><rect x="19.6451%" y="165" width="1.1294%" height="15" fill="rgb(220,39,43)" fg:x="12819" fg:w="737"/><text x="19.8951%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (731 samples, 1.12%)</title><rect x="19.6543%" y="149" width="1.1203%" height="15" fill="rgb(229,68,48)" fg:x="12825" fg:w="731"/><text x="19.9043%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (19 samples, 0.03%)</title><rect x="20.7975%" y="165" width="0.0291%" height="15" fill="rgb(252,8,32)" fg:x="13571" fg:w="19"/><text x="21.0475%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (15 samples, 0.02%)</title><rect x="20.8266%" y="165" width="0.0230%" height="15" fill="rgb(223,20,43)" fg:x="13590" fg:w="15"/><text x="21.0766%" y="175.50"></text></g><g><title>codecrafters_redis::network::server::extract_command (105 samples, 0.16%)</title><rect x="21.0013%" y="149" width="0.1609%" height="15" fill="rgb(229,81,49)" fg:x="13704" fg:w="105"/><text x="21.2513%" y="159.50"></text></g><g><title>&lt;codecrafters_redis::types::Command as core::str::traits::FromStr&gt;::from_str (71 samples, 0.11%)</title><rect x="21.0534%" y="133" width="0.1088%" height="15" fill="rgb(236,28,36)" fg:x="13738" fg:w="71"/><text x="21.3034%" y="143.50"></text></g><g><title>_platform_memcmp (79 samples, 0.12%)</title><rect x="22.8725%" y="101" width="0.1211%" height="15" fill="rgb(249,185,26)" fg:x="14925" fg:w="79"/><text x="23.1225%" y="111.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (222 samples, 0.34%)</title><rect x="22.9936%" y="101" width="0.3402%" height="15" fill="rgb(249,174,33)" fg:x="15004" fg:w="222"/><text x="23.2436%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (156 samples, 0.24%)</title><rect x="23.0947%" y="85" width="0.2391%" height="15" fill="rgb(233,201,37)" fg:x="15070" fg:w="156"/><text x="23.3447%" y="95.50"></text></g><g><title>cthread_yield (10 samples, 0.02%)</title><rect x="23.3369%" y="85" width="0.0153%" height="15" fill="rgb(221,78,26)" fg:x="15228" fg:w="10"/><text x="23.5869%" y="95.50"></text></g><g><title>swtch_pri (10 samples, 0.02%)</title><rect x="23.3369%" y="69" width="0.0153%" height="15" fill="rgb(250,127,30)" fg:x="15228" fg:w="10"/><text x="23.5869%" y="79.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1,340 samples, 2.05%)</title><rect x="21.3048%" y="117" width="2.0535%" height="15" fill="rgb(230,49,44)" fg:x="13902" fg:w="1340"/><text x="21.5548%" y="127.50">&lt;..</text></g><g><title>dashmap::lock::RawRwLock::lock_shared_slow (16 samples, 0.02%)</title><rect x="23.3338%" y="101" width="0.0245%" height="15" fill="rgb(229,67,23)" fg:x="15226" fg:w="16"/><text x="23.5838%" y="111.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (7 samples, 0.01%)</title><rect x="23.3920%" y="101" width="0.0107%" height="15" fill="rgb(249,83,47)" fg:x="15264" fg:w="7"/><text x="23.6420%" y="111.50"></text></g><g><title>_platform_memmove (1,991 samples, 3.05%)</title><rect x="23.4564%" y="85" width="3.0512%" height="15" fill="rgb(215,43,3)" fg:x="15306" fg:w="1991"/><text x="23.7064%" y="95.50">_pl..</text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.01%)</title><rect x="26.5260%" y="53" width="0.0107%" height="15" fill="rgb(238,154,13)" fg:x="17309" fg:w="7"/><text x="26.7760%" y="63.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="26.5474%" y="53" width="0.0107%" height="15" fill="rgb(219,56,2)" fg:x="17323" fg:w="7"/><text x="26.7974%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (310 samples, 0.48%)</title><rect x="26.5076%" y="85" width="0.4751%" height="15" fill="rgb(233,0,4)" fg:x="17297" fg:w="310"/><text x="26.7576%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (300 samples, 0.46%)</title><rect x="26.5229%" y="69" width="0.4597%" height="15" fill="rgb(235,30,7)" fg:x="17307" fg:w="300"/><text x="26.7729%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (271 samples, 0.42%)</title><rect x="26.5674%" y="53" width="0.4153%" height="15" fill="rgb(250,79,13)" fg:x="17336" fg:w="271"/><text x="26.8174%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2,348 samples, 3.60%)</title><rect x="23.4028%" y="101" width="3.5983%" height="15" fill="rgb(211,146,34)" fg:x="15271" fg:w="2348"/><text x="23.6528%" y="111.50">&lt;all..</text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="26.9827%" y="85" width="0.0184%" height="15" fill="rgb(228,22,38)" fg:x="17607" fg:w="12"/><text x="27.2327%" y="95.50"></text></g><g><title>core::fmt::write (2,393 samples, 3.67%)</title><rect x="23.3644%" y="117" width="3.6673%" height="15" fill="rgb(235,168,5)" fg:x="15246" fg:w="2393"/><text x="23.6144%" y="127.50">core..</text></g><g><title>core::fmt::Formatter::pad (13 samples, 0.02%)</title><rect x="27.0118%" y="101" width="0.0199%" height="15" fill="rgb(221,155,16)" fg:x="17626" fg:w="13"/><text x="27.2618%" y="111.50"></text></g><g><title>codecrafters_redis::data::db::Store::get (3,807 samples, 5.83%)</title><rect x="21.1990%" y="133" width="5.8342%" height="15" fill="rgb(215,215,53)" fg:x="13833" fg:w="3807"/><text x="21.4490%" y="143.50">codecra..</text></g><g><title>codecrafters_redis::network::server::handle_get (3,836 samples, 5.88%)</title><rect x="21.1622%" y="149" width="5.8787%" height="15" fill="rgb(223,4,10)" fg:x="13809" fg:w="3836"/><text x="21.4122%" y="159.50">codecra..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (42 samples, 0.06%)</title><rect x="27.5298%" y="101" width="0.0644%" height="15" fill="rgb(234,103,6)" fg:x="17964" fg:w="42"/><text x="27.7798%" y="111.50"></text></g><g><title>_platform_memcmp (13 samples, 0.02%)</title><rect x="27.5957%" y="101" width="0.0199%" height="15" fill="rgb(227,97,0)" fg:x="18007" fg:w="13"/><text x="27.8457%" y="111.50"></text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (13 samples, 0.02%)</title><rect x="27.6156%" y="101" width="0.0199%" height="15" fill="rgb(234,150,53)" fg:x="18020" fg:w="13"/><text x="27.8656%" y="111.50"></text></g><g><title>cthread_yield (10 samples, 0.02%)</title><rect x="27.6202%" y="85" width="0.0153%" height="15" fill="rgb(228,201,54)" fg:x="18023" fg:w="10"/><text x="27.8702%" y="95.50"></text></g><g><title>swtch_pri (10 samples, 0.02%)</title><rect x="27.6202%" y="69" width="0.0153%" height="15" fill="rgb(222,22,37)" fg:x="18023" fg:w="10"/><text x="27.8702%" y="79.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (467 samples, 0.72%)</title><rect x="27.0685%" y="133" width="0.7157%" height="15" fill="rgb(237,53,32)" fg:x="17663" fg:w="467"/><text x="27.3185%" y="143.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (292 samples, 0.45%)</title><rect x="27.3367%" y="117" width="0.4475%" height="15" fill="rgb(233,25,53)" fg:x="17838" fg:w="292"/><text x="27.5867%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (97 samples, 0.15%)</title><rect x="27.6355%" y="101" width="0.1487%" height="15" fill="rgb(210,40,34)" fg:x="18033" fg:w="97"/><text x="27.8855%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="27.7489%" y="85" width="0.0352%" height="15" fill="rgb(241,220,44)" fg:x="18107" fg:w="23"/><text x="27.9989%" y="95.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.01%)</title><rect x="27.7842%" y="133" width="0.0123%" height="15" fill="rgb(235,28,35)" fg:x="18130" fg:w="8"/><text x="28.0342%" y="143.50"></text></g><g><title>_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="27.8117%" y="133" width="0.0153%" height="15" fill="rgb(210,56,17)" fg:x="18148" fg:w="10"/><text x="28.0617%" y="143.50"></text></g><g><title>_platform_memmove (56 samples, 0.09%)</title><rect x="27.8271%" y="133" width="0.0858%" height="15" fill="rgb(224,130,29)" fg:x="18158" fg:w="56"/><text x="28.0771%" y="143.50"></text></g><g><title>_xzm_chunk_list_slot_push (13 samples, 0.02%)</title><rect x="27.9129%" y="133" width="0.0199%" height="15" fill="rgb(235,212,8)" fg:x="18214" fg:w="13"/><text x="28.1629%" y="143.50"></text></g><g><title>_xzm_free (467 samples, 0.72%)</title><rect x="27.9328%" y="133" width="0.7157%" height="15" fill="rgb(223,33,50)" fg:x="18227" fg:w="467"/><text x="28.1828%" y="143.50"></text></g><g><title>_platform_memset (280 samples, 0.43%)</title><rect x="28.2194%" y="117" width="0.4291%" height="15" fill="rgb(219,149,13)" fg:x="18414" fg:w="280"/><text x="28.4694%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (8 samples, 0.01%)</title><rect x="28.6500%" y="133" width="0.0123%" height="15" fill="rgb(250,156,29)" fg:x="18695" fg:w="8"/><text x="28.9000%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_from_freelist_chunk (7 samples, 0.01%)</title><rect x="28.8707%" y="101" width="0.0107%" height="15" fill="rgb(216,193,19)" fg:x="18839" fg:w="7"/><text x="29.1207%" y="111.50"></text></g><g><title>_xzm_xzone_find_and_malloc_from_freelist_chunk (40 samples, 0.06%)</title><rect x="28.8584%" y="117" width="0.0613%" height="15" fill="rgb(216,135,14)" fg:x="18831" fg:w="40"/><text x="29.1084%" y="127.50"></text></g><g><title>xzm_segment_group_alloc_chunk (25 samples, 0.04%)</title><rect x="28.8814%" y="101" width="0.0383%" height="15" fill="rgb(241,47,5)" fg:x="18846" fg:w="25"/><text x="29.1314%" y="111.50"></text></g><g><title>_xzm_segment_group_find_and_allocate_chunk (17 samples, 0.03%)</title><rect x="28.8937%" y="85" width="0.0261%" height="15" fill="rgb(233,42,35)" fg:x="18854" fg:w="17"/><text x="29.1437%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (172 samples, 0.26%)</title><rect x="28.6623%" y="133" width="0.2636%" height="15" fill="rgb(231,13,6)" fg:x="18703" fg:w="172"/><text x="28.9123%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (68 samples, 0.10%)</title><rect x="28.9259%" y="133" width="0.1042%" height="15" fill="rgb(207,181,40)" fg:x="18875" fg:w="68"/><text x="29.1759%" y="143.50"></text></g><g><title>codecrafters_redis::network::server::Server::process::_{{closure}} (5,332 samples, 8.17%)</title><rect x="20.8680%" y="165" width="8.1713%" height="15" fill="rgb(254,173,49)" fg:x="13617" fg:w="5332"/><text x="21.1180%" y="175.50">codecrafter..</text></g><g><title>codecrafters_redis::network::server::handle_set (1,304 samples, 2.00%)</title><rect x="27.0409%" y="149" width="1.9984%" height="15" fill="rgb(221,1,38)" fg:x="17645" fg:w="1304"/><text x="27.2909%" y="159.50">c..</text></g><g><title>codecrafters_redis::network::server::extract_command (9 samples, 0.01%)</title><rect x="29.0393%" y="165" width="0.0138%" height="15" fill="rgb(206,124,46)" fg:x="18949" fg:w="9"/><text x="29.2893%" y="175.50"></text></g><g><title>codecrafters_redis::network::server::handle_get (7 samples, 0.01%)</title><rect x="29.0531%" y="165" width="0.0107%" height="15" fill="rgb(249,21,11)" fg:x="18958" fg:w="7"/><text x="29.3031%" y="175.50"></text></g><g><title>_free (7 samples, 0.01%)</title><rect x="29.0975%" y="149" width="0.0107%" height="15" fill="rgb(222,201,40)" fg:x="18987" fg:w="7"/><text x="29.3475%" y="159.50"></text></g><g><title>_xzm_free (37 samples, 0.06%)</title><rect x="29.1082%" y="149" width="0.0567%" height="15" fill="rgb(235,61,29)" fg:x="18994" fg:w="37"/><text x="29.3582%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::convert::&lt;impl core::convert::From&lt;alloc::string::String&gt; for alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::from::StringError&gt; (16 samples, 0.02%)</title><rect x="29.1649%" y="149" width="0.0245%" height="15" fill="rgb(219,207,3)" fg:x="19031" fg:w="16"/><text x="29.4149%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt; (67 samples, 0.10%)</title><rect x="29.0899%" y="165" width="0.1027%" height="15" fill="rgb(222,56,46)" fg:x="18982" fg:w="67"/><text x="29.3399%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;codecrafters_redis::network::server::Server::process::{{closure}}&gt; (22 samples, 0.03%)</title><rect x="29.1941%" y="165" width="0.0337%" height="15" fill="rgb(239,76,54)" fg:x="19050" fg:w="22"/><text x="29.4441%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;resp::value::Value,std::io::error::Error&gt;&gt; (11 samples, 0.02%)</title><rect x="29.2278%" y="165" width="0.0169%" height="15" fill="rgb(231,124,27)" fg:x="19072" fg:w="11"/><text x="29.4778%" y="175.50"></text></g><g><title>DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="29.2952%" y="149" width="0.0230%" height="15" fill="rgb(249,195,6)" fg:x="19116" fg:w="15"/><text x="29.5452%" y="159.50"></text></g><g><title>_free (35 samples, 0.05%)</title><rect x="29.3197%" y="149" width="0.0536%" height="15" fill="rgb(237,174,47)" fg:x="19132" fg:w="35"/><text x="29.5697%" y="159.50"></text></g><g><title>_xzm_free (226 samples, 0.35%)</title><rect x="29.3734%" y="149" width="0.3463%" height="15" fill="rgb(206,201,31)" fg:x="19167" fg:w="226"/><text x="29.6234%" y="159.50"></text></g><g><title>mach_absolute_time (55 samples, 0.08%)</title><rect x="29.6354%" y="133" width="0.0843%" height="15" fill="rgb(231,57,52)" fg:x="19338" fg:w="55"/><text x="29.8854%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;resp::value::Value&gt; (25 samples, 0.04%)</title><rect x="29.7197%" y="149" width="0.0383%" height="15" fill="rgb(248,177,22)" fg:x="19393" fg:w="25"/><text x="29.9697%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;resp::value::Value&gt; (336 samples, 0.51%)</title><rect x="29.2446%" y="165" width="0.5149%" height="15" fill="rgb(215,211,37)" fg:x="19083" fg:w="336"/><text x="29.4946%" y="175.50"></text></g><g><title>malloc (21 samples, 0.03%)</title><rect x="29.7779%" y="165" width="0.0322%" height="15" fill="rgb(241,128,51)" fg:x="19431" fg:w="21"/><text x="30.0279%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (24 samples, 0.04%)</title><rect x="29.9435%" y="149" width="0.0368%" height="15" fill="rgb(227,165,31)" fg:x="19539" fg:w="24"/><text x="30.1935%" y="159.50"></text></g><g><title>_xzm_free (70 samples, 0.11%)</title><rect x="30.0017%" y="149" width="0.1073%" height="15" fill="rgb(228,167,24)" fg:x="19577" fg:w="70"/><text x="30.2517%" y="159.50"></text></g><g><title>mach_absolute_time (15 samples, 0.02%)</title><rect x="30.0860%" y="133" width="0.0230%" height="15" fill="rgb(228,143,12)" fg:x="19632" fg:w="15"/><text x="30.3360%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (9 samples, 0.01%)</title><rect x="30.1090%" y="149" width="0.0138%" height="15" fill="rgb(249,149,8)" fg:x="19647" fg:w="9"/><text x="30.3590%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (25 samples, 0.04%)</title><rect x="30.1243%" y="133" width="0.0383%" height="15" fill="rgb(243,35,44)" fg:x="19657" fg:w="25"/><text x="30.3743%" y="143.50"></text></g><g><title>_malloc_zone_malloc (36 samples, 0.06%)</title><rect x="30.1795%" y="133" width="0.0552%" height="15" fill="rgb(246,89,9)" fg:x="19693" fg:w="36"/><text x="30.4295%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (17 samples, 0.03%)</title><rect x="30.2346%" y="133" width="0.0261%" height="15" fill="rgb(233,213,13)" fg:x="19729" fg:w="17"/><text x="30.4846%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (113 samples, 0.17%)</title><rect x="30.2607%" y="133" width="0.1732%" height="15" fill="rgb(233,141,41)" fg:x="19746" fg:w="113"/><text x="30.5107%" y="143.50"></text></g><g><title>alloc::alloc::alloc (206 samples, 0.32%)</title><rect x="30.1228%" y="149" width="0.3157%" height="15" fill="rgb(239,167,4)" fg:x="19656" fg:w="206"/><text x="30.3728%" y="159.50"></text></g><g><title>DYLD-STUB$$free (76 samples, 0.12%)</title><rect x="30.4400%" y="133" width="0.1165%" height="15" fill="rgb(209,217,16)" fg:x="19863" fg:w="76"/><text x="30.6900%" y="143.50"></text></g><g><title>_free (172 samples, 0.26%)</title><rect x="30.5702%" y="133" width="0.2636%" height="15" fill="rgb(219,88,35)" fg:x="19948" fg:w="172"/><text x="30.8202%" y="143.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (10 samples, 0.02%)</title><rect x="31.5541%" y="117" width="0.0153%" height="15" fill="rgb(220,193,23)" fg:x="20590" fg:w="10"/><text x="31.8041%" y="127.50"></text></g><g><title>__bzero (7 samples, 0.01%)</title><rect x="31.5694%" y="117" width="0.0107%" height="15" fill="rgb(230,90,52)" fg:x="20600" fg:w="7"/><text x="31.8194%" y="127.50"></text></g><g><title>_platform_memset (19 samples, 0.03%)</title><rect x="31.5802%" y="117" width="0.0291%" height="15" fill="rgb(252,106,19)" fg:x="20607" fg:w="19"/><text x="31.8302%" y="127.50"></text></g><g><title>_xzm_free (612 samples, 0.94%)</title><rect x="30.8338%" y="133" width="0.9379%" height="15" fill="rgb(206,74,20)" fg:x="20120" fg:w="612"/><text x="31.0838%" y="143.50"></text></g><g><title>mach_absolute_time (106 samples, 0.16%)</title><rect x="31.6093%" y="117" width="0.1624%" height="15" fill="rgb(230,138,44)" fg:x="20626" fg:w="106"/><text x="31.8593%" y="127.50"></text></g><g><title>free (20 samples, 0.03%)</title><rect x="31.7717%" y="133" width="0.0306%" height="15" fill="rgb(235,182,43)" fg:x="20732" fg:w="20"/><text x="32.0217%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (891 samples, 1.37%)</title><rect x="30.4384%" y="149" width="1.3655%" height="15" fill="rgb(242,16,51)" fg:x="19862" fg:w="891"/><text x="30.6884%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.01%)</title><rect x="31.8039%" y="149" width="0.0123%" height="15" fill="rgb(248,9,4)" fg:x="20753" fg:w="8"/><text x="32.0539%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (26 samples, 0.04%)</title><rect x="31.8162%" y="149" width="0.0398%" height="15" fill="rgb(210,31,22)" fg:x="20761" fg:w="26"/><text x="32.0662%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11 samples, 0.02%)</title><rect x="31.8560%" y="149" width="0.0169%" height="15" fill="rgb(239,54,39)" fg:x="20787" fg:w="11"/><text x="32.1060%" y="159.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12 samples, 0.02%)</title><rect x="31.8882%" y="133" width="0.0184%" height="15" fill="rgb(230,99,41)" fg:x="20808" fg:w="12"/><text x="32.1382%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (8 samples, 0.01%)</title><rect x="31.9127%" y="133" width="0.0123%" height="15" fill="rgb(253,106,12)" fg:x="20824" fg:w="8"/><text x="32.1627%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (46 samples, 0.07%)</title><rect x="31.9250%" y="117" width="0.0705%" height="15" fill="rgb(213,46,41)" fg:x="20832" fg:w="46"/><text x="32.1750%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (16 samples, 0.02%)</title><rect x="32.0047%" y="117" width="0.0245%" height="15" fill="rgb(215,133,35)" fg:x="20884" fg:w="16"/><text x="32.2547%" y="127.50"></text></g><g><title>_malloc_zone_malloc (72 samples, 0.11%)</title><rect x="32.0292%" y="117" width="0.1103%" height="15" fill="rgb(213,28,5)" fg:x="20900" fg:w="72"/><text x="32.2792%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (36 samples, 0.06%)</title><rect x="32.1395%" y="117" width="0.0552%" height="15" fill="rgb(215,77,49)" fg:x="20972" fg:w="36"/><text x="32.3895%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (162 samples, 0.25%)</title><rect x="32.1962%" y="117" width="0.2483%" height="15" fill="rgb(248,100,22)" fg:x="21009" fg:w="162"/><text x="32.4462%" y="127.50"></text></g><g><title>alloc::alloc::alloc (343 samples, 0.53%)</title><rect x="31.9250%" y="133" width="0.5256%" height="15" fill="rgb(208,67,9)" fg:x="20832" fg:w="343"/><text x="32.1750%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20 samples, 0.03%)</title><rect x="32.4506%" y="133" width="0.0306%" height="15" fill="rgb(219,133,21)" fg:x="21175" fg:w="20"/><text x="32.7006%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="32.4813%" y="133" width="0.0107%" height="15" fill="rgb(246,46,29)" fg:x="21195" fg:w="7"/><text x="32.7313%" y="143.50"></text></g><g><title>DYLD-STUB$$memcpy (9 samples, 0.01%)</title><rect x="32.4981%" y="117" width="0.0138%" height="15" fill="rgb(246,185,52)" fg:x="21206" fg:w="9"/><text x="32.7481%" y="127.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec_in (535 samples, 0.82%)</title><rect x="31.8729%" y="149" width="0.8199%" height="15" fill="rgb(252,136,11)" fg:x="20798" fg:w="535"/><text x="32.1229%" y="159.50"></text></g><g><title>core::ptr::copy_nonoverlapping (131 samples, 0.20%)</title><rect x="32.4920%" y="133" width="0.2008%" height="15" fill="rgb(219,138,53)" fg:x="21202" fg:w="131"/><text x="32.7420%" y="143.50"></text></g><g><title>_platform_memmove (118 samples, 0.18%)</title><rect x="32.5119%" y="117" width="0.1808%" height="15" fill="rgb(211,51,23)" fg:x="21215" fg:w="118"/><text x="32.7619%" y="127.50"></text></g><g><title>alloc::string::String::from_utf8 (51 samples, 0.08%)</title><rect x="32.6927%" y="149" width="0.0782%" height="15" fill="rgb(247,221,28)" fg:x="21333" fg:w="51"/><text x="32.9427%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (39 samples, 0.06%)</title><rect x="32.7111%" y="133" width="0.0598%" height="15" fill="rgb(251,222,45)" fg:x="21345" fg:w="39"/><text x="32.9611%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (8 samples, 0.01%)</title><rect x="32.7709%" y="149" width="0.0123%" height="15" fill="rgb(217,162,53)" fg:x="21384" fg:w="8"/><text x="33.0209%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (11 samples, 0.02%)</title><rect x="32.7832%" y="149" width="0.0169%" height="15" fill="rgb(229,93,14)" fg:x="21392" fg:w="11"/><text x="33.0332%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (31 samples, 0.05%)</title><rect x="32.8000%" y="149" width="0.0475%" height="15" fill="rgb(209,67,49)" fg:x="21403" fg:w="31"/><text x="33.0500%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (11 samples, 0.02%)</title><rect x="32.8491%" y="149" width="0.0169%" height="15" fill="rgb(213,87,29)" fg:x="21435" fg:w="11"/><text x="33.0991%" y="159.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_ascii_radix (25 samples, 0.04%)</title><rect x="32.8659%" y="149" width="0.0383%" height="15" fill="rgb(205,151,52)" fg:x="21446" fg:w="25"/><text x="33.1159%" y="159.50"></text></g><g><title>core::ptr::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="32.9058%" y="149" width="0.0153%" height="15" fill="rgb(253,215,39)" fg:x="21472" fg:w="10"/><text x="33.1558%" y="159.50"></text></g><g><title>_platform_memmove (9 samples, 0.01%)</title><rect x="32.9073%" y="133" width="0.0138%" height="15" fill="rgb(221,220,41)" fg:x="21473" fg:w="9"/><text x="33.1573%" y="143.50"></text></g><g><title>_xzm_free (12 samples, 0.02%)</title><rect x="32.9272%" y="133" width="0.0184%" height="15" fill="rgb(218,133,21)" fg:x="21486" fg:w="12"/><text x="33.1772%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[resp::value::Value]&gt; (20 samples, 0.03%)</title><rect x="32.9211%" y="149" width="0.0306%" height="15" fill="rgb(221,193,43)" fg:x="21482" fg:w="20"/><text x="33.1711%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (22 samples, 0.03%)</title><rect x="32.9548%" y="149" width="0.0337%" height="15" fill="rgb(240,128,52)" fg:x="21504" fg:w="22"/><text x="33.2048%" y="159.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read (13 samples, 0.02%)</title><rect x="33.3977%" y="133" width="0.0199%" height="15" fill="rgb(253,114,12)" fg:x="21793" fg:w="13"/><text x="33.6477%" y="143.50"></text></g><g><title>_xzm_free (13 samples, 0.02%)</title><rect x="33.4222%" y="133" width="0.0199%" height="15" fill="rgb(215,223,47)" fg:x="21809" fg:w="13"/><text x="33.6722%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (52 samples, 0.08%)</title><rect x="33.4590%" y="117" width="0.0797%" height="15" fill="rgb(248,225,23)" fg:x="21833" fg:w="52"/><text x="33.7090%" y="127.50"></text></g><g><title>DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="33.5387%" y="117" width="0.0184%" height="15" fill="rgb(250,108,0)" fg:x="21885" fg:w="12"/><text x="33.7887%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (10 samples, 0.02%)</title><rect x="33.5571%" y="117" width="0.0153%" height="15" fill="rgb(228,208,7)" fg:x="21897" fg:w="10"/><text x="33.8071%" y="127.50"></text></g><g><title>_malloc_zone_malloc (82 samples, 0.13%)</title><rect x="33.5724%" y="117" width="0.1257%" height="15" fill="rgb(244,45,10)" fg:x="21907" fg:w="82"/><text x="33.8224%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (40 samples, 0.06%)</title><rect x="33.6981%" y="117" width="0.0613%" height="15" fill="rgb(207,125,25)" fg:x="21989" fg:w="40"/><text x="33.9481%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (9 samples, 0.01%)</title><rect x="33.7594%" y="117" width="0.0138%" height="15" fill="rgb(210,195,18)" fg:x="22029" fg:w="9"/><text x="34.0094%" y="127.50"></text></g><g><title>alloc::alloc::alloc (392 samples, 0.60%)</title><rect x="33.4513%" y="133" width="0.6007%" height="15" fill="rgb(249,80,12)" fg:x="21828" fg:w="392"/><text x="33.7013%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (181 samples, 0.28%)</title><rect x="33.7747%" y="117" width="0.2774%" height="15" fill="rgb(221,65,9)" fg:x="22039" fg:w="181"/><text x="34.0247%" y="127.50"></text></g><g><title>DYLD-STUB$$free (20 samples, 0.03%)</title><rect x="34.0521%" y="117" width="0.0306%" height="15" fill="rgb(235,49,36)" fg:x="22220" fg:w="20"/><text x="34.3021%" y="127.50"></text></g><g><title>_free (55 samples, 0.08%)</title><rect x="34.0827%" y="117" width="0.0843%" height="15" fill="rgb(225,32,20)" fg:x="22240" fg:w="55"/><text x="34.3327%" y="127.50"></text></g><g><title>_xzm_free (218 samples, 0.33%)</title><rect x="34.1670%" y="117" width="0.3341%" height="15" fill="rgb(215,141,46)" fg:x="22295" fg:w="218"/><text x="34.4170%" y="127.50"></text></g><g><title>mach_absolute_time (46 samples, 0.07%)</title><rect x="34.4306%" y="101" width="0.0705%" height="15" fill="rgb(250,160,47)" fg:x="22467" fg:w="46"/><text x="34.6806%" y="111.50"></text></g><g><title>free (7 samples, 0.01%)</title><rect x="34.5011%" y="117" width="0.0107%" height="15" fill="rgb(216,222,40)" fg:x="22513" fg:w="7"/><text x="34.7511%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (301 samples, 0.46%)</title><rect x="34.0521%" y="133" width="0.4613%" height="15" fill="rgb(234,217,39)" fg:x="22220" fg:w="301"/><text x="34.3021%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11 samples, 0.02%)</title><rect x="34.5226%" y="133" width="0.0169%" height="15" fill="rgb(207,178,40)" fg:x="22527" fg:w="11"/><text x="34.7726%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="34.5409%" y="133" width="0.0153%" height="15" fill="rgb(221,136,13)" fg:x="22539" fg:w="10"/><text x="34.7909%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.01%)</title><rect x="34.5563%" y="117" width="0.0123%" height="15" fill="rgb(249,199,10)" fg:x="22549" fg:w="8"/><text x="34.8063%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (7 samples, 0.01%)</title><rect x="34.5793%" y="101" width="0.0107%" height="15" fill="rgb(249,222,13)" fg:x="22564" fg:w="7"/><text x="34.8293%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (44 samples, 0.07%)</title><rect x="34.6206%" y="85" width="0.0674%" height="15" fill="rgb(244,185,38)" fg:x="22591" fg:w="44"/><text x="34.8706%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc (8 samples, 0.01%)</title><rect x="34.6973%" y="85" width="0.0123%" height="15" fill="rgb(236,202,9)" fg:x="22641" fg:w="8"/><text x="34.9473%" y="95.50"></text></g><g><title>_malloc_zone_malloc (68 samples, 0.10%)</title><rect x="34.7141%" y="85" width="0.1042%" height="15" fill="rgb(250,229,37)" fg:x="22652" fg:w="68"/><text x="34.9641%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (30 samples, 0.05%)</title><rect x="34.8183%" y="85" width="0.0460%" height="15" fill="rgb(206,174,23)" fg:x="22720" fg:w="30"/><text x="35.0683%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (309 samples, 0.47%)</title><rect x="34.8643%" y="85" width="0.4735%" height="15" fill="rgb(211,33,43)" fg:x="22750" fg:w="309"/><text x="35.1143%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (500 samples, 0.77%)</title><rect x="34.5777%" y="117" width="0.7662%" height="15" fill="rgb(245,58,50)" fg:x="22563" fg:w="500"/><text x="34.8277%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (492 samples, 0.75%)</title><rect x="34.5900%" y="101" width="0.7540%" height="15" fill="rgb(244,68,36)" fg:x="22571" fg:w="492"/><text x="34.8400%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="35.3532%" y="117" width="0.0138%" height="15" fill="rgb(232,229,15)" fg:x="23069" fg:w="9"/><text x="35.6032%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (21 samples, 0.03%)</title><rect x="35.3670%" y="117" width="0.0322%" height="15" fill="rgb(254,30,23)" fg:x="23078" fg:w="21"/><text x="35.6170%" y="127.50"></text></g><g><title>core::intrinsics::unlikely (10 samples, 0.02%)</title><rect x="35.3991%" y="117" width="0.0153%" height="15" fill="rgb(235,160,14)" fg:x="23099" fg:w="10"/><text x="35.6491%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (561 samples, 0.86%)</title><rect x="34.5563%" y="133" width="0.8597%" height="15" fill="rgb(212,155,44)" fg:x="22549" fg:w="561"/><text x="34.8063%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (13 samples, 0.02%)</title><rect x="35.4160%" y="133" width="0.0199%" height="15" fill="rgb(226,2,50)" fg:x="23110" fg:w="13"/><text x="35.6660%" y="143.50"></text></g><g><title>alloc::string::String::from_utf8 (72 samples, 0.11%)</title><rect x="35.4359%" y="133" width="0.1103%" height="15" fill="rgb(234,177,6)" fg:x="23123" fg:w="72"/><text x="35.6859%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (63 samples, 0.10%)</title><rect x="35.4497%" y="117" width="0.0965%" height="15" fill="rgb(217,24,9)" fg:x="23132" fg:w="63"/><text x="35.6997%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (14 samples, 0.02%)</title><rect x="35.5463%" y="133" width="0.0215%" height="15" fill="rgb(220,13,46)" fg:x="23195" fg:w="14"/><text x="35.7963%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (18 samples, 0.03%)</title><rect x="35.5677%" y="133" width="0.0276%" height="15" fill="rgb(239,221,27)" fg:x="23209" fg:w="18"/><text x="35.8177%" y="143.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_ascii_radix (68 samples, 0.10%)</title><rect x="35.5953%" y="133" width="0.1042%" height="15" fill="rgb(222,198,25)" fg:x="23227" fg:w="68"/><text x="35.8453%" y="143.50"></text></g><g><title>DYLD-STUB$$memcpy (22 samples, 0.03%)</title><rect x="35.7118%" y="117" width="0.0337%" height="15" fill="rgb(211,99,13)" fg:x="23303" fg:w="22"/><text x="35.9618%" y="127.50"></text></g><g><title>core::ptr::copy_nonoverlapping (183 samples, 0.28%)</title><rect x="35.7072%" y="133" width="0.2804%" height="15" fill="rgb(232,111,31)" fg:x="23300" fg:w="183"/><text x="35.9572%" y="143.50"></text></g><g><title>_platform_memmove (158 samples, 0.24%)</title><rect x="35.7455%" y="117" width="0.2421%" height="15" fill="rgb(245,82,37)" fg:x="23325" fg:w="158"/><text x="35.9955%" y="127.50"></text></g><g><title>core::ptr::write (138 samples, 0.21%)</title><rect x="35.9876%" y="133" width="0.2115%" height="15" fill="rgb(227,149,46)" fg:x="23483" fg:w="138"/><text x="36.2376%" y="143.50"></text></g><g><title>_platform_memset (129 samples, 0.20%)</title><rect x="36.0014%" y="117" width="0.1977%" height="15" fill="rgb(218,36,50)" fg:x="23492" fg:w="129"/><text x="36.2514%" y="127.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (13 samples, 0.02%)</title><rect x="36.1991%" y="133" width="0.0199%" height="15" fill="rgb(226,80,48)" fg:x="23621" fg:w="13"/><text x="36.4491%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (16 samples, 0.02%)</title><rect x="36.2221%" y="133" width="0.0245%" height="15" fill="rgb(238,224,15)" fg:x="23636" fg:w="16"/><text x="36.4721%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::pos (13 samples, 0.02%)</title><rect x="36.2543%" y="133" width="0.0199%" height="15" fill="rgb(241,136,10)" fg:x="23657" fg:w="13"/><text x="36.5043%" y="143.50"></text></g><g><title>std::io::default_read_exact (41 samples, 0.06%)</title><rect x="36.2757%" y="133" width="0.0628%" height="15" fill="rgb(208,32,45)" fg:x="23671" fg:w="41"/><text x="36.5257%" y="143.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (2,200 samples, 3.37%)</title><rect x="32.9885%" y="149" width="3.3715%" height="15" fill="rgb(207,135,9)" fg:x="21526" fg:w="2200"/><text x="33.2385%" y="159.50">res..</text></g><g><title>std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (14 samples, 0.02%)</title><rect x="36.3386%" y="133" width="0.0215%" height="15" fill="rgb(206,86,44)" fg:x="23712" fg:w="14"/><text x="36.5886%" y="143.50"></text></g><g><title>resp::serialize::parse_integer (10 samples, 0.02%)</title><rect x="36.3615%" y="149" width="0.0153%" height="15" fill="rgb(245,177,15)" fg:x="23727" fg:w="10"/><text x="36.6115%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (33 samples, 0.05%)</title><rect x="36.3815%" y="133" width="0.0506%" height="15" fill="rgb(206,64,50)" fg:x="23740" fg:w="33"/><text x="36.6315%" y="143.50"></text></g><g><title>resp::serialize::parse_string (288 samples, 0.44%)</title><rect x="36.3769%" y="149" width="0.4414%" height="15" fill="rgb(234,36,40)" fg:x="23737" fg:w="288"/><text x="36.6269%" y="159.50"></text></g><g><title>alloc::string::String::from_utf8 (252 samples, 0.39%)</title><rect x="36.4320%" y="133" width="0.3862%" height="15" fill="rgb(213,64,8)" fg:x="23773" fg:w="252"/><text x="36.6820%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (234 samples, 0.36%)</title><rect x="36.4596%" y="117" width="0.3586%" height="15" fill="rgb(210,75,36)" fg:x="23791" fg:w="234"/><text x="36.7096%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (32 samples, 0.05%)</title><rect x="36.8305%" y="133" width="0.0490%" height="15" fill="rgb(229,88,21)" fg:x="24033" fg:w="32"/><text x="37.0805%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (11 samples, 0.02%)</title><rect x="36.8795%" y="133" width="0.0169%" height="15" fill="rgb(252,204,47)" fg:x="24065" fg:w="11"/><text x="37.1295%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="36.9041%" y="133" width="0.0107%" height="15" fill="rgb(208,77,27)" fg:x="24081" fg:w="7"/><text x="37.1541%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.03%)</title><rect x="36.9148%" y="117" width="0.0261%" height="15" fill="rgb(221,76,26)" fg:x="24088" fg:w="17"/><text x="37.1648%" y="127.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (45 samples, 0.07%)</title><rect x="36.9929%" y="85" width="0.0690%" height="15" fill="rgb(225,139,18)" fg:x="24139" fg:w="45"/><text x="37.2429%" y="95.50"></text></g><g><title>DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="37.0619%" y="85" width="0.0138%" height="15" fill="rgb(230,137,11)" fg:x="24184" fg:w="9"/><text x="37.3119%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc (12 samples, 0.02%)</title><rect x="37.0757%" y="85" width="0.0184%" height="15" fill="rgb(212,28,1)" fg:x="24193" fg:w="12"/><text x="37.3257%" y="95.50"></text></g><g><title>_malloc_zone_malloc (73 samples, 0.11%)</title><rect x="37.1033%" y="85" width="0.1119%" height="15" fill="rgb(248,164,17)" fg:x="24211" fg:w="73"/><text x="37.3533%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (33 samples, 0.05%)</title><rect x="37.2151%" y="85" width="0.0506%" height="15" fill="rgb(222,171,42)" fg:x="24284" fg:w="33"/><text x="37.4651%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (380 samples, 0.58%)</title><rect x="36.9500%" y="117" width="0.5823%" height="15" fill="rgb(243,84,45)" fg:x="24111" fg:w="380"/><text x="37.2000%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (375 samples, 0.57%)</title><rect x="36.9577%" y="101" width="0.5747%" height="15" fill="rgb(252,49,23)" fg:x="24116" fg:w="375"/><text x="37.2077%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (173 samples, 0.27%)</title><rect x="37.2673%" y="85" width="0.2651%" height="15" fill="rgb(215,19,7)" fg:x="24318" fg:w="173"/><text x="37.5173%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="37.5416%" y="117" width="0.0153%" height="15" fill="rgb(238,81,41)" fg:x="24497" fg:w="10"/><text x="37.7916%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (17 samples, 0.03%)</title><rect x="37.5569%" y="117" width="0.0261%" height="15" fill="rgb(210,199,37)" fg:x="24507" fg:w="17"/><text x="37.8069%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (450 samples, 0.69%)</title><rect x="36.9148%" y="133" width="0.6896%" height="15" fill="rgb(244,192,49)" fg:x="24088" fg:w="450"/><text x="37.1648%" y="143.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (8 samples, 0.01%)</title><rect x="37.5921%" y="117" width="0.0123%" height="15" fill="rgb(226,211,11)" fg:x="24530" fg:w="8"/><text x="37.8421%" y="127.50"></text></g><g><title>DYLD-STUB$$memcpy (96 samples, 0.15%)</title><rect x="37.9109%" y="117" width="0.1471%" height="15" fill="rgb(236,162,54)" fg:x="24738" fg:w="96"/><text x="38.1609%" y="127.50"></text></g><g><title>core::ptr::copy_nonoverlapping (631 samples, 0.97%)</title><rect x="37.6151%" y="133" width="0.9670%" height="15" fill="rgb(220,229,9)" fg:x="24545" fg:w="631"/><text x="37.8651%" y="143.50"></text></g><g><title>_platform_memmove (342 samples, 0.52%)</title><rect x="38.0580%" y="117" width="0.5241%" height="15" fill="rgb(250,87,22)" fg:x="24834" fg:w="342"/><text x="38.3080%" y="127.50"></text></g><g><title>core::slice::memchr::memchr (15 samples, 0.02%)</title><rect x="38.5821%" y="133" width="0.0230%" height="15" fill="rgb(239,43,17)" fg:x="25176" fg:w="15"/><text x="38.8321%" y="143.50"></text></g><g><title>core::slice::memchr::memchr_naive (121 samples, 0.19%)</title><rect x="38.6051%" y="133" width="0.1854%" height="15" fill="rgb(231,177,25)" fg:x="25191" fg:w="121"/><text x="38.8551%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (11 samples, 0.02%)</title><rect x="38.7906%" y="133" width="0.0169%" height="15" fill="rgb(219,179,1)" fg:x="25312" fg:w="11"/><text x="39.0406%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (57 samples, 0.09%)</title><rect x="38.8074%" y="133" width="0.0874%" height="15" fill="rgb(238,219,53)" fg:x="25323" fg:w="57"/><text x="39.0574%" y="143.50"></text></g><g><title>std::io::cursor::Cursor&lt;T&gt;::split (13 samples, 0.02%)</title><rect x="38.8948%" y="133" width="0.0199%" height="15" fill="rgb(232,167,36)" fg:x="25380" fg:w="13"/><text x="39.1448%" y="143.50"></text></g><g><title>std::io::BufRead::read_until (1,406 samples, 2.15%)</title><rect x="36.8182%" y="149" width="2.1547%" height="15" fill="rgb(244,19,51)" fg:x="24025" fg:w="1406"/><text x="37.0682%" y="159.50">s..</text></g><g><title>std::io::read_until (38 samples, 0.06%)</title><rect x="38.9147%" y="133" width="0.0582%" height="15" fill="rgb(224,6,22)" fg:x="25393" fg:w="38"/><text x="39.1647%" y="143.50"></text></g><g><title>std::io::default_read_exact (26 samples, 0.04%)</title><rect x="38.9729%" y="149" width="0.0398%" height="15" fill="rgb(224,145,5)" fg:x="25431" fg:w="26"/><text x="39.2229%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.03%)</title><rect x="39.0388%" y="133" width="0.0337%" height="15" fill="rgb(234,130,49)" fg:x="25474" fg:w="22"/><text x="39.2888%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (13 samples, 0.02%)</title><rect x="39.0802%" y="133" width="0.0199%" height="15" fill="rgb(254,6,2)" fg:x="25501" fg:w="13"/><text x="39.3302%" y="143.50"></text></g><g><title>_malloc_zone_malloc (30 samples, 0.05%)</title><rect x="39.1078%" y="133" width="0.0460%" height="15" fill="rgb(208,96,46)" fg:x="25519" fg:w="30"/><text x="39.3578%" y="143.50"></text></g><g><title>_platform_memmove (17 samples, 0.03%)</title><rect x="39.1538%" y="133" width="0.0261%" height="15" fill="rgb(239,3,39)" fg:x="25549" fg:w="17"/><text x="39.4038%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (15 samples, 0.02%)</title><rect x="39.1798%" y="133" width="0.0230%" height="15" fill="rgb(233,210,1)" fg:x="25566" fg:w="15"/><text x="39.4298%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (126 samples, 0.19%)</title><rect x="39.2059%" y="133" width="0.1931%" height="15" fill="rgb(244,137,37)" fg:x="25583" fg:w="126"/><text x="39.4559%" y="143.50"></text></g><g><title>std::io::error::Error::new (253 samples, 0.39%)</title><rect x="39.0128%" y="149" width="0.3877%" height="15" fill="rgb(240,136,2)" fg:x="25457" fg:w="253"/><text x="39.2628%" y="159.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (6,263 samples, 9.60%)</title><rect x="29.8101%" y="165" width="9.5980%" height="15" fill="rgb(239,18,37)" fg:x="19452" fg:w="6263"/><text x="30.0601%" y="175.50">resp::serializ..</text></g><g><title>resp::serialize::buf_encode (7 samples, 0.01%)</title><rect x="39.4081%" y="165" width="0.0107%" height="15" fill="rgb(218,185,22)" fg:x="25715" fg:w="7"/><text x="39.6581%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.02%)</title><rect x="39.5706%" y="133" width="0.0184%" height="15" fill="rgb(225,218,4)" fg:x="25821" fg:w="12"/><text x="39.8206%" y="143.50"></text></g><g><title>DYLD-STUB$$memcpy (10 samples, 0.02%)</title><rect x="39.5966%" y="133" width="0.0153%" height="15" fill="rgb(230,182,32)" fg:x="25838" fg:w="10"/><text x="39.8466%" y="143.50"></text></g><g><title>_free (7 samples, 0.01%)</title><rect x="39.6196%" y="133" width="0.0107%" height="15" fill="rgb(242,56,43)" fg:x="25853" fg:w="7"/><text x="39.8696%" y="143.50"></text></g><g><title>_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="39.6304%" y="133" width="0.0123%" height="15" fill="rgb(233,99,24)" fg:x="25860" fg:w="8"/><text x="39.8804%" y="143.50"></text></g><g><title>_platform_memmove (35 samples, 0.05%)</title><rect x="39.6426%" y="133" width="0.0536%" height="15" fill="rgb(234,209,42)" fg:x="25868" fg:w="35"/><text x="39.8926%" y="143.50"></text></g><g><title>_xzm_free (46 samples, 0.07%)</title><rect x="39.6963%" y="133" width="0.0705%" height="15" fill="rgb(227,7,12)" fg:x="25903" fg:w="46"/><text x="39.9463%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (7 samples, 0.01%)</title><rect x="39.7668%" y="133" width="0.0107%" height="15" fill="rgb(245,203,43)" fg:x="25949" fg:w="7"/><text x="40.0168%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (22 samples, 0.03%)</title><rect x="39.7775%" y="133" width="0.0337%" height="15" fill="rgb(238,205,33)" fg:x="25956" fg:w="22"/><text x="40.0275%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.02%)</title><rect x="39.9384%" y="101" width="0.0199%" height="15" fill="rgb(231,56,7)" fg:x="26061" fg:w="13"/><text x="40.1884%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (8 samples, 0.01%)</title><rect x="39.9767%" y="101" width="0.0123%" height="15" fill="rgb(244,186,29)" fg:x="26086" fg:w="8"/><text x="40.2267%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (257 samples, 0.39%)</title><rect x="39.8112%" y="133" width="0.3939%" height="15" fill="rgb(234,111,31)" fg:x="25978" fg:w="257"/><text x="40.0612%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (241 samples, 0.37%)</title><rect x="39.8357%" y="117" width="0.3693%" height="15" fill="rgb(241,149,10)" fg:x="25994" fg:w="241"/><text x="40.0857%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (141 samples, 0.22%)</title><rect x="39.9890%" y="101" width="0.2161%" height="15" fill="rgb(249,206,44)" fg:x="26094" fg:w="141"/><text x="40.2390%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.02%)</title><rect x="40.3660%" y="101" width="0.0199%" height="15" fill="rgb(251,153,30)" fg:x="26340" fg:w="13"/><text x="40.6160%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="40.3859%" y="101" width="0.0107%" height="15" fill="rgb(239,152,38)" fg:x="26353" fg:w="7"/><text x="40.6359%" y="111.50"></text></g><g><title>_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="40.4196%" y="101" width="0.0322%" height="15" fill="rgb(249,139,47)" fg:x="26375" fg:w="21"/><text x="40.6696%" y="111.50"></text></g><g><title>xzm_malloc_zone_realloc (8 samples, 0.01%)</title><rect x="40.5069%" y="69" width="0.0123%" height="15" fill="rgb(244,64,35)" fg:x="26432" fg:w="8"/><text x="40.7569%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.02%)</title><rect x="40.5652%" y="53" width="0.0184%" height="15" fill="rgb(216,46,15)" fg:x="26470" fg:w="12"/><text x="40.8152%" y="63.50"></text></g><g><title>_platform_memmove (83 samples, 0.13%)</title><rect x="40.5866%" y="53" width="0.1272%" height="15" fill="rgb(250,74,19)" fg:x="26484" fg:w="83"/><text x="40.8366%" y="63.50"></text></g><g><title>_xzm_free (238 samples, 0.36%)</title><rect x="40.7138%" y="53" width="0.3647%" height="15" fill="rgb(249,42,33)" fg:x="26567" fg:w="238"/><text x="40.9638%" y="63.50"></text></g><g><title>mach_absolute_time (190 samples, 0.29%)</title><rect x="40.7874%" y="37" width="0.2912%" height="15" fill="rgb(242,149,17)" fg:x="26615" fg:w="190"/><text x="41.0374%" y="47.50"></text></g><g><title>_xzm_xzone_malloc (7 samples, 0.01%)</title><rect x="41.0786%" y="53" width="0.0107%" height="15" fill="rgb(244,29,21)" fg:x="26805" fg:w="7"/><text x="41.3286%" y="63.50"></text></g><g><title>_malloc_zone_realloc (461 samples, 0.71%)</title><rect x="40.4840%" y="85" width="0.7065%" height="15" fill="rgb(220,130,37)" fg:x="26417" fg:w="461"/><text x="40.7340%" y="95.50"></text></g><g><title>xzm_realloc (438 samples, 0.67%)</title><rect x="40.5192%" y="69" width="0.6712%" height="15" fill="rgb(211,67,2)" fg:x="26440" fg:w="438"/><text x="40.7692%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (66 samples, 0.10%)</title><rect x="41.0893%" y="53" width="0.1011%" height="15" fill="rgb(235,68,52)" fg:x="26812" fg:w="66"/><text x="41.3393%" y="63.50"></text></g><g><title>_realloc (502 samples, 0.77%)</title><rect x="40.4564%" y="101" width="0.7693%" height="15" fill="rgb(246,142,3)" fg:x="26399" fg:w="502"/><text x="40.7064%" y="111.50"></text></g><g><title>xzm_malloc_zone_size (23 samples, 0.04%)</title><rect x="41.1904%" y="85" width="0.0352%" height="15" fill="rgb(241,25,7)" fg:x="26878" fg:w="23"/><text x="41.4404%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (13 samples, 0.02%)</title><rect x="41.2257%" y="101" width="0.0199%" height="15" fill="rgb(242,119,39)" fg:x="26901" fg:w="13"/><text x="41.4757%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (60 samples, 0.09%)</title><rect x="41.2456%" y="101" width="0.0919%" height="15" fill="rgb(241,98,45)" fg:x="26914" fg:w="60"/><text x="41.4956%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (741 samples, 1.14%)</title><rect x="40.2050%" y="133" width="1.1356%" height="15" fill="rgb(254,28,30)" fg:x="26235" fg:w="741"/><text x="40.4550%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (682 samples, 1.05%)</title><rect x="40.2955%" y="117" width="1.0452%" height="15" fill="rgb(241,142,54)" fg:x="26294" fg:w="682"/><text x="40.5455%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="41.3406%" y="133" width="0.0153%" height="15" fill="rgb(222,85,15)" fg:x="26976" fg:w="10"/><text x="41.5906%" y="143.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (15 samples, 0.02%)</title><rect x="41.3560%" y="133" width="0.0230%" height="15" fill="rgb(210,85,47)" fg:x="26986" fg:w="15"/><text x="41.6060%" y="143.50"></text></g><g><title>resp::value::Value::encode (1,277 samples, 1.96%)</title><rect x="39.4235%" y="165" width="1.9570%" height="15" fill="rgb(224,206,25)" fg:x="25725" fg:w="1277"/><text x="39.6735%" y="175.50">r..</text></g><g><title>resp::serialize::buf_encode (1,261 samples, 1.93%)</title><rect x="39.4480%" y="149" width="1.9325%" height="15" fill="rgb(243,201,19)" fg:x="25741" fg:w="1261"/><text x="39.6980%" y="159.50">r..</text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_buf (7 samples, 0.01%)</title><rect x="41.3851%" y="149" width="0.0107%" height="15" fill="rgb(236,59,4)" fg:x="27005" fg:w="7"/><text x="41.6351%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (15 samples, 0.02%)</title><rect x="41.3973%" y="149" width="0.0230%" height="15" fill="rgb(254,179,45)" fg:x="27013" fg:w="15"/><text x="41.6473%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (50 samples, 0.08%)</title><rect x="41.4203%" y="149" width="0.0766%" height="15" fill="rgb(226,14,10)" fg:x="27028" fg:w="50"/><text x="41.6703%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (33 samples, 0.05%)</title><rect x="41.5138%" y="133" width="0.0506%" height="15" fill="rgb(244,27,41)" fg:x="27089" fg:w="33"/><text x="41.7638%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (25 samples, 0.04%)</title><rect x="41.6517%" y="101" width="0.0383%" height="15" fill="rgb(235,35,32)" fg:x="27179" fg:w="25"/><text x="41.9017%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (11 samples, 0.02%)</title><rect x="41.6962%" y="101" width="0.0169%" height="15" fill="rgb(218,68,31)" fg:x="27208" fg:w="11"/><text x="41.9462%" y="111.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (18 samples, 0.03%)</title><rect x="41.7130%" y="101" width="0.0276%" height="15" fill="rgb(207,120,37)" fg:x="27219" fg:w="18"/><text x="41.9630%" y="111.50"></text></g><g><title>_malloc_zone_malloc (49 samples, 0.08%)</title><rect x="41.7406%" y="101" width="0.0751%" height="15" fill="rgb(227,98,0)" fg:x="27237" fg:w="49"/><text x="41.9906%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (15 samples, 0.02%)</title><rect x="41.8157%" y="101" width="0.0230%" height="15" fill="rgb(207,7,3)" fg:x="27286" fg:w="15"/><text x="42.0657%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (116 samples, 0.18%)</title><rect x="41.8464%" y="101" width="0.1778%" height="15" fill="rgb(206,98,19)" fg:x="27306" fg:w="116"/><text x="42.0964%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (319 samples, 0.49%)</title><rect x="41.5644%" y="133" width="0.4889%" height="15" fill="rgb(217,5,26)" fg:x="27122" fg:w="319"/><text x="41.8144%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (316 samples, 0.48%)</title><rect x="41.5690%" y="117" width="0.4843%" height="15" fill="rgb(235,190,38)" fg:x="27125" fg:w="316"/><text x="41.8190%" y="127.50"></text></g><g><title>malloc (19 samples, 0.03%)</title><rect x="42.0241%" y="101" width="0.0291%" height="15" fill="rgb(247,86,24)" fg:x="27422" fg:w="19"/><text x="42.2741%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="42.0532%" y="133" width="0.0107%" height="15" fill="rgb(205,101,16)" fg:x="27441" fg:w="7"/><text x="42.3032%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (19 samples, 0.03%)</title><rect x="42.0701%" y="133" width="0.0291%" height="15" fill="rgb(246,168,33)" fg:x="27452" fg:w="19"/><text x="42.3201%" y="143.50"></text></g><g><title>core::intrinsics::unlikely (22 samples, 0.03%)</title><rect x="42.1007%" y="133" width="0.0337%" height="15" fill="rgb(231,114,1)" fg:x="27472" fg:w="22"/><text x="42.3507%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (427 samples, 0.65%)</title><rect x="41.4969%" y="149" width="0.6544%" height="15" fill="rgb(207,184,53)" fg:x="27078" fg:w="427"/><text x="41.7469%" y="159.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (8 samples, 0.01%)</title><rect x="42.1391%" y="133" width="0.0123%" height="15" fill="rgb(224,95,51)" fg:x="27497" fg:w="8"/><text x="42.3891%" y="143.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::add (7 samples, 0.01%)</title><rect x="42.1620%" y="149" width="0.0107%" height="15" fill="rgb(212,188,45)" fg:x="27512" fg:w="7"/><text x="42.4120%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (54 samples, 0.08%)</title><rect x="42.2142%" y="133" width="0.0828%" height="15" fill="rgb(223,154,38)" fg:x="27546" fg:w="54"/><text x="42.4642%" y="143.50"></text></g><g><title>core::ptr::copy_nonoverlapping (344 samples, 0.53%)</title><rect x="42.1728%" y="149" width="0.5272%" height="15" fill="rgb(251,22,52)" fg:x="27519" fg:w="344"/><text x="42.4228%" y="159.50"></text></g><g><title>_platform_memmove (263 samples, 0.40%)</title><rect x="42.2969%" y="133" width="0.4030%" height="15" fill="rgb(229,209,22)" fg:x="27600" fg:w="263"/><text x="42.5469%" y="143.50"></text></g><g><title>core::slice::memchr::memchr_naive (27 samples, 0.04%)</title><rect x="42.7045%" y="149" width="0.0414%" height="15" fill="rgb(234,138,34)" fg:x="27866" fg:w="27"/><text x="42.9545%" y="159.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (7 samples, 0.01%)</title><rect x="42.7459%" y="149" width="0.0107%" height="15" fill="rgb(212,95,11)" fg:x="27893" fg:w="7"/><text x="42.9959%" y="159.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (59 samples, 0.09%)</title><rect x="42.7567%" y="149" width="0.0904%" height="15" fill="rgb(240,179,47)" fg:x="27900" fg:w="59"/><text x="43.0067%" y="159.50"></text></g><g><title>std::io::BufRead::read_until (1,025 samples, 1.57%)</title><rect x="41.3805%" y="165" width="1.5708%" height="15" fill="rgb(240,163,11)" fg:x="27002" fg:w="1025"/><text x="41.6305%" y="175.50"></text></g><g><title>std::io::read_until (68 samples, 0.10%)</title><rect x="42.8471%" y="149" width="0.1042%" height="15" fill="rgb(236,37,12)" fg:x="27959" fg:w="68"/><text x="43.0971%" y="159.50"></text></g><g><title>std::io::read_until (8 samples, 0.01%)</title><rect x="42.9513%" y="165" width="0.0123%" height="15" fill="rgb(232,164,16)" fg:x="28027" fg:w="8"/><text x="43.2013%" y="175.50"></text></g><g><title>DYLD-STUB$$__recvfrom (11 samples, 0.02%)</title><rect x="43.1352%" y="117" width="0.0169%" height="15" fill="rgb(244,205,15)" fg:x="28147" fg:w="11"/><text x="43.3852%" y="127.50"></text></g><g><title>DYLD-STUB$$recv (7 samples, 0.01%)</title><rect x="43.1520%" y="117" width="0.0107%" height="15" fill="rgb(223,117,47)" fg:x="28158" fg:w="7"/><text x="43.4020%" y="127.50"></text></g><g><title>__recvfrom (18,895 samples, 28.96%)</title><rect x="43.1628%" y="117" width="28.9565%" height="15" fill="rgb(244,107,35)" fg:x="28165" fg:w="18895"/><text x="43.4128%" y="127.50">__recvfrom</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (18,953 samples, 29.05%)</title><rect x="43.1015%" y="133" width="29.0454%" height="15" fill="rgb(205,140,8)" fg:x="28125" fg:w="18953"/><text x="43.3515%" y="143.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::r..</text></g><g><title>recv (18 samples, 0.03%)</title><rect x="72.1193%" y="117" width="0.0276%" height="15" fill="rgb(228,84,46)" fg:x="47060" fg:w="18"/><text x="72.3693%" y="127.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (19,170 samples, 29.38%)</title><rect x="43.0739%" y="149" width="29.3780%" height="15" fill="rgb(254,188,9)" fg:x="28107" fg:w="19170"/><text x="43.3239%" y="159.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::..</text></g><g><title>__recvfrom (199 samples, 0.30%)</title><rect x="72.1469%" y="133" width="0.3050%" height="15" fill="rgb(206,112,54)" fg:x="47078" fg:w="199"/><text x="72.3969%" y="143.50"></text></g><g><title>_tlv_get_addr (9 samples, 0.01%)</title><rect x="72.5208%" y="133" width="0.0138%" height="15" fill="rgb(216,84,49)" fg:x="47322" fg:w="9"/><text x="72.7708%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (80 samples, 0.12%)</title><rect x="72.4549%" y="149" width="0.1226%" height="15" fill="rgb(214,194,35)" fg:x="47279" fg:w="80"/><text x="72.7049%" y="159.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (28 samples, 0.04%)</title><rect x="72.5346%" y="133" width="0.0429%" height="15" fill="rgb(249,28,3)" fg:x="47331" fg:w="28"/><text x="72.7846%" y="143.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (19,328 samples, 29.62%)</title><rect x="42.9712%" y="165" width="29.6201%" height="15" fill="rgb(222,56,52)" fg:x="28040" fg:w="19328"/><text x="43.2212%" y="175.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_re..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (9 samples, 0.01%)</title><rect x="72.5775%" y="149" width="0.0138%" height="15" fill="rgb(245,217,50)" fg:x="47359" fg:w="9"/><text x="72.8275%" y="159.50"></text></g><g><title>DYLD-STUB$$__sendto (7 samples, 0.01%)</title><rect x="72.7308%" y="117" width="0.0107%" height="15" fill="rgb(213,201,24)" fg:x="47459" fg:w="7"/><text x="72.9808%" y="127.50"></text></g><g><title>__sendto (17,353 samples, 26.59%)</title><rect x="72.7430%" y="117" width="26.5934%" height="15" fill="rgb(248,116,28)" fg:x="47467" fg:w="17353"/><text x="72.9930%" y="127.50">__sendto</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (17,397 samples, 26.66%)</title><rect x="72.6802%" y="133" width="26.6608%" height="15" fill="rgb(219,72,43)" fg:x="47426" fg:w="17397"/><text x="72.9302%" y="143.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Writ..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (17,631 samples, 27.02%)</title><rect x="72.6526%" y="149" width="27.0194%" height="15" fill="rgb(209,138,14)" fg:x="47408" fg:w="17631"/><text x="72.9026%" y="159.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::..</text></g><g><title>__sendto (216 samples, 0.33%)</title><rect x="99.3410%" y="133" width="0.3310%" height="15" fill="rgb(222,18,33)" fg:x="64823" fg:w="216"/><text x="99.5910%" y="143.50"></text></g><g><title>_tlv_get_addr (11 samples, 0.02%)</title><rect x="99.6904%" y="133" width="0.0169%" height="15" fill="rgb(213,199,7)" fg:x="65051" fg:w="11"/><text x="99.9404%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (29 samples, 0.04%)</title><rect x="99.6720%" y="149" width="0.0444%" height="15" fill="rgb(250,110,10)" fg:x="65039" fg:w="29"/><text x="99.9220%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (17,702 samples, 27.13%)</title><rect x="72.5913%" y="165" width="27.1283%" height="15" fill="rgb(248,123,6)" fg:x="47368" fg:w="17702"/><text x="72.8413%" y="175.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::po..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (7 samples, 0.01%)</title><rect x="99.7196%" y="165" width="0.0107%" height="15" fill="rgb(206,91,31)" fg:x="65070" fg:w="7"/><text x="99.9696%" y="175.50"></text></g><g><title>xzm_malloc_zone_malloc_type_malloc (13 samples, 0.02%)</title><rect x="99.7303%" y="165" width="0.0199%" height="15" fill="rgb(211,154,13)" fg:x="65077" fg:w="13"/><text x="99.9803%" y="175.50"></text></g><g><title>codecrafters_redis::main::_{{closure}}::_{{closure}} (54,976 samples, 84.25%)</title><rect x="15.5012%" y="181" width="84.2505%" height="15" fill="rgb(225,148,7)" fg:x="10115" fg:w="54976"/><text x="15.7512%" y="191.50">codecrafters_redis::main::_{{closure}}::_{{closure}}</text></g><g><title>codecrafters_redis::network::server::Server::process::_{{closure}} (13 samples, 0.02%)</title><rect x="99.7517%" y="181" width="0.0199%" height="15" fill="rgb(220,160,43)" fg:x="65091" fg:w="13"/><text x="100.0017%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (7 samples, 0.01%)</title><rect x="99.7946%" y="181" width="0.0107%" height="15" fill="rgb(213,52,39)" fg:x="65119" fg:w="7"/><text x="100.0446%" y="191.50"></text></g><g><title>0x1041d91a7 (55,057 samples, 84.37%)</title><rect x="15.4353%" y="197" width="84.3747%" height="15" fill="rgb(243,137,7)" fg:x="10072" fg:w="55057"/><text x="15.6853%" y="207.50">0x1041d91a7</text></g><g><title>0x1041d91b3 (8 samples, 0.01%)</title><rect x="99.8176%" y="197" width="0.0123%" height="15" fill="rgb(230,79,13)" fg:x="65134" fg:w="8"/><text x="100.0676%" y="207.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="99.8176%" y="181" width="0.0123%" height="15" fill="rgb(247,105,23)" fg:x="65134" fg:w="8"/><text x="100.0676%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (55,090 samples, 84.43%)</title><rect x="15.4093%" y="213" width="84.4252%" height="15" fill="rgb(223,179,41)" fg:x="10055" fg:w="55090"/><text x="15.6593%" y="223.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (56,429 samples, 86.48%)</title><rect x="13.3787%" y="229" width="86.4773%" height="15" fill="rgb(218,9,34)" fg:x="8730" fg:w="56429"/><text x="13.6287%" y="239.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (14 samples, 0.02%)</title><rect x="99.8345%" y="213" width="0.0215%" height="15" fill="rgb(222,106,8)" fg:x="65145" fg:w="14"/><text x="100.0845%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (85 samples, 0.13%)</title><rect x="99.8559%" y="229" width="0.1303%" height="15" fill="rgb(211,220,0)" fg:x="65159" fg:w="85"/><text x="100.1059%" y="239.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (65,232 samples, 99.97%)</title><rect x="0.0245%" y="245" width="99.9678%" height="15" fill="rgb(229,52,16)" fg:x="16" fg:w="65232"/><text x="0.2745%" y="255.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>all (65,253 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(212,155,18)" fg:x="0" fg:w="65253"/><text x="0.2500%" y="431.50"></text></g><g><title>thread_start (65,238 samples, 99.98%)</title><rect x="0.0230%" y="405" width="99.9770%" height="15" fill="rgb(242,21,14)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="415.50">thread_start</text></g><g><title>_pthread_start (65,238 samples, 99.98%)</title><rect x="0.0230%" y="389" width="99.9770%" height="15" fill="rgb(222,19,48)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="399.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (65,238 samples, 99.98%)</title><rect x="0.0230%" y="373" width="99.9770%" height="15" fill="rgb(232,45,27)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="383.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (65,238 samples, 99.98%)</title><rect x="0.0230%" y="357" width="99.9770%" height="15" fill="rgb(249,103,42)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="367.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (65,238 samples, 99.98%)</title><rect x="0.0230%" y="341" width="99.9770%" height="15" fill="rgb(246,81,33)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (65,238 samples, 99.98%)</title><rect x="0.0230%" y="325" width="99.9770%" height="15" fill="rgb(252,33,42)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="335.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (65,238 samples, 99.98%)</title><rect x="0.0230%" y="309" width="99.9770%" height="15" fill="rgb(209,212,41)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="319.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (65,238 samples, 99.98%)</title><rect x="0.0230%" y="293" width="99.9770%" height="15" fill="rgb(207,154,6)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="303.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (65,238 samples, 99.98%)</title><rect x="0.0230%" y="277" width="99.9770%" height="15" fill="rgb(223,64,47)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="287.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (65,238 samples, 99.98%)</title><rect x="0.0230%" y="261" width="99.9770%" height="15" fill="rgb(211,161,38)" fg:x="15" fg:w="65238"/><text x="0.2730%" y="271.50">tokio::runtime::context::runtime::enter_runtime</text></g></svg></svg>