<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="35118"><g><title>start (7 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0199%" height="15" fill="rgb(243,214,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="383.50"></text></g><g><title>main (4 samples, 0.01%)</title><rect x="0.0085%" y="357" width="0.0114%" height="15" fill="rgb(238,28,47)" fg:x="3" fg:w="4"/><text x="0.2585%" y="367.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.01%)</title><rect x="0.0085%" y="341" width="0.0114%" height="15" fill="rgb(240,177,54)" fg:x="3" fg:w="4"/><text x="0.2585%" y="351.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (4 samples, 0.01%)</title><rect x="0.0085%" y="325" width="0.0114%" height="15" fill="rgb(225,45,7)" fg:x="3" fg:w="4"/><text x="0.2585%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.01%)</title><rect x="0.0085%" y="309" width="0.0114%" height="15" fill="rgb(210,80,10)" fg:x="3" fg:w="4"/><text x="0.2585%" y="319.50"></text></g><g><title>codecrafters_redis::main (4 samples, 0.01%)</title><rect x="0.0085%" y="293" width="0.0114%" height="15" fill="rgb(209,94,32)" fg:x="3" fg:w="4"/><text x="0.2585%" y="303.50"></text></g><g><title>pow (19 samples, 0.05%)</title><rect x="0.5439%" y="197" width="0.0541%" height="15" fill="rgb(251,107,30)" fg:x="191" fg:w="19"/><text x="0.7939%" y="207.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (5 samples, 0.01%)</title><rect x="0.7176%" y="149" width="0.0142%" height="15" fill="rgb(216,80,16)" fg:x="252" fg:w="5"/><text x="0.9676%" y="159.50"></text></g><g><title>mach_absolute_time (175 samples, 0.50%)</title><rect x="0.7318%" y="149" width="0.4983%" height="15" fill="rgb(226,185,10)" fg:x="257" fg:w="175"/><text x="0.9818%" y="159.50"></text></g><g><title>clock_gettime_nsec_np (204 samples, 0.58%)</title><rect x="0.6806%" y="165" width="0.5809%" height="15" fill="rgb(251,12,28)" fg:x="239" fg:w="204"/><text x="0.9306%" y="175.50"></text></g><g><title>mach_timebase_info (11 samples, 0.03%)</title><rect x="1.2301%" y="149" width="0.0313%" height="15" fill="rgb(254,128,11)" fg:x="432" fg:w="11"/><text x="1.4801%" y="159.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (238 samples, 0.68%)</title><rect x="0.5980%" y="197" width="0.6777%" height="15" fill="rgb(237,94,26)" fg:x="210" fg:w="238"/><text x="0.8480%" y="207.50"></text></g><g><title>clock_gettime (220 samples, 0.63%)</title><rect x="0.6492%" y="181" width="0.6265%" height="15" fill="rgb(246,151,37)" fg:x="228" fg:w="220"/><text x="0.8992%" y="191.50"></text></g><g><title>mach_timebase_info (4 samples, 0.01%)</title><rect x="1.2643%" y="165" width="0.0114%" height="15" fill="rgb(254,128,11)" fg:x="444" fg:w="4"/><text x="1.5143%" y="175.50"></text></g><g><title>mach_absolute_time (54 samples, 0.15%)</title><rect x="1.3298%" y="133" width="0.1538%" height="15" fill="rgb(226,185,10)" fg:x="467" fg:w="54"/><text x="1.5798%" y="143.50"></text></g><g><title>clock_gettime_nsec_np (79 samples, 0.22%)</title><rect x="1.2928%" y="149" width="0.2250%" height="15" fill="rgb(251,12,28)" fg:x="454" fg:w="79"/><text x="1.5428%" y="159.50"></text></g><g><title>mach_timebase_info (12 samples, 0.03%)</title><rect x="1.4836%" y="133" width="0.0342%" height="15" fill="rgb(254,128,11)" fg:x="521" fg:w="12"/><text x="1.7336%" y="143.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (85 samples, 0.24%)</title><rect x="1.2785%" y="181" width="0.2420%" height="15" fill="rgb(237,94,26)" fg:x="449" fg:w="85"/><text x="1.5285%" y="191.50"></text></g><g><title>clock_gettime (82 samples, 0.23%)</title><rect x="1.2871%" y="165" width="0.2335%" height="15" fill="rgb(246,151,37)" fg:x="452" fg:w="82"/><text x="1.5371%" y="175.50"></text></g><g><title>std::time::Instant::elapsed (88 samples, 0.25%)</title><rect x="1.2757%" y="197" width="0.2506%" height="15" fill="rgb(215,12,10)" fg:x="448" fg:w="88"/><text x="1.5257%" y="207.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.01%)</title><rect x="1.5263%" y="197" width="0.0142%" height="15" fill="rgb(207,163,36)" fg:x="536" fg:w="5"/><text x="1.7763%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (14 samples, 0.04%)</title><rect x="1.5405%" y="197" width="0.0399%" height="15" fill="rgb(237,121,30)" fg:x="541" fg:w="14"/><text x="1.7905%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (15 samples, 0.04%)</title><rect x="1.5804%" y="197" width="0.0427%" height="15" fill="rgb(237,96,40)" fg:x="555" fg:w="15"/><text x="1.8304%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (117 samples, 0.33%)</title><rect x="1.6316%" y="197" width="0.3332%" height="15" fill="rgb(227,39,2)" fg:x="573" fg:w="117"/><text x="1.8816%" y="207.50"></text></g><g><title>__psynch_cvsignal (125 samples, 0.36%)</title><rect x="2.1015%" y="149" width="0.3559%" height="15" fill="rgb(248,136,42)" fg:x="738" fg:w="125"/><text x="2.3515%" y="159.50"></text></g><g><title>pthread_cond_signal (127 samples, 0.36%)</title><rect x="2.1015%" y="165" width="0.3616%" height="15" fill="rgb(214,44,32)" fg:x="738" fg:w="127"/><text x="2.3515%" y="175.50"></text></g><g><title>mach_absolute_time (8 samples, 0.02%)</title><rect x="2.4660%" y="117" width="0.0228%" height="15" fill="rgb(226,185,10)" fg:x="866" fg:w="8"/><text x="2.7160%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (144 samples, 0.41%)</title><rect x="2.0844%" y="181" width="0.4100%" height="15" fill="rgb(221,89,13)" fg:x="732" fg:w="144"/><text x="2.3344%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (10 samples, 0.03%)</title><rect x="2.4660%" y="165" width="0.0285%" height="15" fill="rgb(237,94,26)" fg:x="866" fg:w="10"/><text x="2.7160%" y="175.50"></text></g><g><title>clock_gettime (10 samples, 0.03%)</title><rect x="2.4660%" y="149" width="0.0285%" height="15" fill="rgb(246,151,37)" fg:x="866" fg:w="10"/><text x="2.7160%" y="159.50"></text></g><g><title>clock_gettime_nsec_np (10 samples, 0.03%)</title><rect x="2.4660%" y="133" width="0.0285%" height="15" fill="rgb(251,12,28)" fg:x="866" fg:w="10"/><text x="2.7160%" y="143.50"></text></g><g><title>DYLD-STUB$$pthread_mutex_unlock (6 samples, 0.02%)</title><rect x="2.9586%" y="149" width="0.0171%" height="15" fill="rgb(251,99,16)" fg:x="1039" fg:w="6"/><text x="3.2086%" y="159.50"></text></g><g><title>__psynch_cvwait (22 samples, 0.06%)</title><rect x="2.9757%" y="149" width="0.0626%" height="15" fill="rgb(238,95,5)" fg:x="1045" fg:w="22"/><text x="3.2257%" y="159.50"></text></g><g><title>__psynch_cvwait (1,233 samples, 3.51%)</title><rect x="3.1266%" y="133" width="3.5110%" height="15" fill="rgb(238,95,5)" fg:x="1098" fg:w="1233"/><text x="3.3766%" y="143.50">__p..</text></g><g><title>_pthread_mutex_droplock (6 samples, 0.02%)</title><rect x="6.6376%" y="133" width="0.0171%" height="15" fill="rgb(251,94,23)" fg:x="2331" fg:w="6"/><text x="6.8876%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.03%)</title><rect x="6.6547%" y="133" width="0.0285%" height="15" fill="rgb(245,182,31)" fg:x="2337" fg:w="10"/><text x="6.9047%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (10 samples, 0.03%)</title><rect x="6.6547%" y="117" width="0.0285%" height="15" fill="rgb(223,122,28)" fg:x="2337" fg:w="10"/><text x="6.9047%" y="127.50"></text></g><g><title>__psynch_mutexwait (10 samples, 0.03%)</title><rect x="6.6547%" y="101" width="0.0285%" height="15" fill="rgb(212,49,40)" fg:x="2337" fg:w="10"/><text x="6.9047%" y="111.50"></text></g><g><title>pthread_mutex_lock (13 samples, 0.04%)</title><rect x="6.6832%" y="133" width="0.0370%" height="15" fill="rgb(208,75,8)" fg:x="2347" fg:w="13"/><text x="6.9332%" y="143.50"></text></g><g><title>_pthread_cond_wait (1,310 samples, 3.73%)</title><rect x="3.0383%" y="149" width="3.7303%" height="15" fill="rgb(223,125,3)" fg:x="1067" fg:w="1310"/><text x="3.2883%" y="159.50">_pth..</text></g><g><title>pthread_testcancel (17 samples, 0.05%)</title><rect x="6.7202%" y="133" width="0.0484%" height="15" fill="rgb(235,154,26)" fg:x="2360" fg:w="17"/><text x="6.9702%" y="143.50"></text></g><g><title>pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="6.7885%" y="149" width="0.0114%" height="15" fill="rgb(214,162,47)" fg:x="2384" fg:w="4"/><text x="7.0385%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1,387 samples, 3.95%)</title><rect x="2.8532%" y="165" width="3.9495%" height="15" fill="rgb(237,57,41)" fg:x="1002" fg:w="1387"/><text x="3.1032%" y="175.50">park..</text></g><g><title>tokio::runtime::driver::Driver::park (4 samples, 0.01%)</title><rect x="6.8085%" y="165" width="0.0114%" height="15" fill="rgb(229,212,53)" fg:x="2391" fg:w="4"/><text x="7.0585%" y="175.50"></text></g><g><title>DYLD-STUB$$clock_gettime (5 samples, 0.01%)</title><rect x="6.8967%" y="133" width="0.0142%" height="15" fill="rgb(253,45,12)" fg:x="2422" fg:w="5"/><text x="7.1467%" y="143.50"></text></g><g><title>mach_absolute_time (73 samples, 0.21%)</title><rect x="6.9651%" y="101" width="0.2079%" height="15" fill="rgb(226,185,10)" fg:x="2446" fg:w="73"/><text x="7.2151%" y="111.50"></text></g><g><title>clock_gettime_nsec_np (97 samples, 0.28%)</title><rect x="6.9224%" y="117" width="0.2762%" height="15" fill="rgb(251,12,28)" fg:x="2431" fg:w="97"/><text x="7.1724%" y="127.50"></text></g><g><title>mach_timebase_info (9 samples, 0.03%)</title><rect x="7.1730%" y="101" width="0.0256%" height="15" fill="rgb(254,128,11)" fg:x="2519" fg:w="9"/><text x="7.4230%" y="111.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (113 samples, 0.32%)</title><rect x="6.8825%" y="149" width="0.3218%" height="15" fill="rgb(237,94,26)" fg:x="2417" fg:w="113"/><text x="7.1325%" y="159.50"></text></g><g><title>clock_gettime (103 samples, 0.29%)</title><rect x="6.9110%" y="133" width="0.2933%" height="15" fill="rgb(246,151,37)" fg:x="2427" fg:w="103"/><text x="7.1610%" y="143.50"></text></g><g><title>std::time::Instant::duration_since (4 samples, 0.01%)</title><rect x="7.2043%" y="149" width="0.0114%" height="15" fill="rgb(253,46,32)" fg:x="2530" fg:w="4"/><text x="7.4543%" y="159.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (19 samples, 0.05%)</title><rect x="7.2214%" y="149" width="0.0541%" height="15" fill="rgb(231,124,28)" fg:x="2536" fg:w="19"/><text x="7.4714%" y="159.50"></text></g><g><title>kevent (23 samples, 0.07%)</title><rect x="7.5175%" y="133" width="0.0655%" height="15" fill="rgb(208,215,22)" fg:x="2640" fg:w="23"/><text x="7.7675%" y="143.50"></text></g><g><title>mio::poll::Poll::poll (2,065 samples, 5.88%)</title><rect x="7.5830%" y="133" width="5.8802%" height="15" fill="rgb(231,221,3)" fg:x="2663" fg:w="2065"/><text x="7.8330%" y="143.50">mio::po..</text></g><g><title>kevent (2,049 samples, 5.83%)</title><rect x="7.6286%" y="117" width="5.8346%" height="15" fill="rgb(208,215,22)" fg:x="2679" fg:w="2049"/><text x="7.8786%" y="127.50">kevent</text></g><g><title>_tlv_get_addr (6 samples, 0.02%)</title><rect x="13.7650%" y="69" width="0.0171%" height="15" fill="rgb(226,77,8)" fg:x="4834" fg:w="6"/><text x="14.0150%" y="79.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (29 samples, 0.08%)</title><rect x="13.7821%" y="69" width="0.0826%" height="15" fill="rgb(253,102,50)" fg:x="4840" fg:w="29"/><text x="14.0321%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (14 samples, 0.04%)</title><rect x="13.8248%" y="53" width="0.0399%" height="15" fill="rgb(233,50,29)" fg:x="4855" fg:w="14"/><text x="14.0748%" y="63.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (71 samples, 0.20%)</title><rect x="13.6711%" y="101" width="0.2022%" height="15" fill="rgb(234,212,42)" fg:x="4801" fg:w="71"/><text x="13.9211%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (56 samples, 0.16%)</title><rect x="13.7138%" y="85" width="0.1595%" height="15" fill="rgb(250,108,42)" fg:x="4816" fg:w="56"/><text x="13.9638%" y="95.50"></text></g><g><title>tokio::runtime::task::raw::schedule (11 samples, 0.03%)</title><rect x="13.8732%" y="101" width="0.0313%" height="15" fill="rgb(231,3,13)" fg:x="4872" fg:w="11"/><text x="14.1232%" y="111.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (166 samples, 0.47%)</title><rect x="13.4632%" y="133" width="0.4727%" height="15" fill="rgb(251,75,10)" fg:x="4728" fg:w="166"/><text x="13.7132%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (105 samples, 0.30%)</title><rect x="13.6369%" y="117" width="0.2990%" height="15" fill="rgb(252,227,42)" fg:x="4789" fg:w="105"/><text x="13.8869%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (11 samples, 0.03%)</title><rect x="13.9046%" y="101" width="0.0313%" height="15" fill="rgb(244,98,3)" fg:x="4883" fg:w="11"/><text x="14.1546%" y="111.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2,341 samples, 6.67%)</title><rect x="7.2755%" y="149" width="6.6661%" height="15" fill="rgb(252,67,46)" fg:x="2555" fg:w="2341"/><text x="7.5255%" y="159.50">tokio::ru..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 0.01%)</title><rect x="13.9416%" y="149" width="0.0142%" height="15" fill="rgb(251,75,10)" fg:x="4896" fg:w="5"/><text x="14.1916%" y="159.50"></text></g><g><title>tokio::runtime::signal::Driver::process (11 samples, 0.03%)</title><rect x="13.9558%" y="149" width="0.0313%" height="15" fill="rgb(226,174,53)" fg:x="4901" fg:w="11"/><text x="14.2058%" y="159.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (2,521 samples, 7.18%)</title><rect x="6.8284%" y="165" width="7.1787%" height="15" fill="rgb(219,142,27)" fg:x="2398" fg:w="2521"/><text x="7.0784%" y="175.50">tokio::run..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.02%)</title><rect x="13.9871%" y="149" width="0.0199%" height="15" fill="rgb(252,219,36)" fg:x="4912" fg:w="7"/><text x="14.2371%" y="159.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (23 samples, 0.07%)</title><rect x="14.0071%" y="165" width="0.0655%" height="15" fill="rgb(212,46,11)" fg:x="4919" fg:w="23"/><text x="14.2571%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (14 samples, 0.04%)</title><rect x="14.0327%" y="149" width="0.0399%" height="15" fill="rgb(252,61,7)" fg:x="4928" fg:w="14"/><text x="14.2827%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.02%)</title><rect x="14.0526%" y="133" width="0.0199%" height="15" fill="rgb(252,219,36)" fg:x="4935" fg:w="7"/><text x="14.3026%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (4,069 samples, 11.59%)</title><rect x="2.4973%" y="181" width="11.5867%" height="15" fill="rgb(222,165,18)" fg:x="877" fg:w="4069"/><text x="2.7473%" y="191.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (4 samples, 0.01%)</title><rect x="14.0726%" y="165" width="0.0114%" height="15" fill="rgb(252,61,7)" fg:x="4942" fg:w="4"/><text x="14.3226%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 0.01%)</title><rect x="14.1067%" y="165" width="0.0142%" height="15" fill="rgb(237,94,26)" fg:x="4954" fg:w="5"/><text x="14.3567%" y="175.50"></text></g><g><title>clock_gettime (4 samples, 0.01%)</title><rect x="14.1096%" y="149" width="0.0114%" height="15" fill="rgb(246,151,37)" fg:x="4955" fg:w="4"/><text x="14.3596%" y="159.50"></text></g><g><title>mio::poll::Poll::poll (79 samples, 0.22%)</title><rect x="14.1324%" y="149" width="0.2250%" height="15" fill="rgb(231,221,3)" fg:x="4963" fg:w="79"/><text x="14.3824%" y="159.50"></text></g><g><title>kevent (76 samples, 0.22%)</title><rect x="14.1409%" y="133" width="0.2164%" height="15" fill="rgb(208,215,22)" fg:x="4966" fg:w="76"/><text x="14.3909%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (6 samples, 0.02%)</title><rect x="14.3573%" y="149" width="0.0171%" height="15" fill="rgb(251,75,10)" fg:x="5042" fg:w="6"/><text x="14.6073%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.01%)</title><rect x="14.3630%" y="133" width="0.0114%" height="15" fill="rgb(252,227,42)" fg:x="5044" fg:w="4"/><text x="14.6130%" y="143.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (90 samples, 0.26%)</title><rect x="14.1210%" y="165" width="0.2563%" height="15" fill="rgb(252,67,46)" fg:x="4959" fg:w="90"/><text x="14.3710%" y="175.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (98 samples, 0.28%)</title><rect x="14.1010%" y="181" width="0.2791%" height="15" fill="rgb(219,142,27)" fg:x="4952" fg:w="98"/><text x="14.3510%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4,361 samples, 12.42%)</title><rect x="1.9648%" y="197" width="12.4181%" height="15" fill="rgb(244,9,18)" fg:x="690" fg:w="4361"/><text x="2.2148%" y="207.50">tokio::runtime::sch..</text></g><g><title>0x102591195 (6 samples, 0.02%)</title><rect x="14.4484%" y="181" width="0.0171%" height="15" fill="rgb(239,220,2)" fg:x="5074" fg:w="6"/><text x="14.6984%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="14.4712%" y="181" width="0.0114%" height="15" fill="rgb(246,75,33)" fg:x="5082" fg:w="4"/><text x="14.7212%" y="191.50"></text></g><g><title>__psynch_cvsignal (13 samples, 0.04%)</title><rect x="14.5310%" y="165" width="0.0370%" height="15" fill="rgb(248,136,42)" fg:x="5103" fg:w="13"/><text x="14.7810%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (8 samples, 0.02%)</title><rect x="14.5680%" y="165" width="0.0228%" height="15" fill="rgb(240,204,49)" fg:x="5116" fg:w="8"/><text x="14.8180%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (7 samples, 0.02%)</title><rect x="14.5709%" y="149" width="0.0199%" height="15" fill="rgb(219,72,24)" fg:x="5117" fg:w="7"/><text x="14.8209%" y="159.50"></text></g><g><title>__psynch_mutexdrop (7 samples, 0.02%)</title><rect x="14.5709%" y="133" width="0.0199%" height="15" fill="rgb(217,98,33)" fg:x="5117" fg:w="7"/><text x="14.8209%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (7 samples, 0.02%)</title><rect x="14.5908%" y="165" width="0.0199%" height="15" fill="rgb(246,212,26)" fg:x="5124" fg:w="7"/><text x="14.8408%" y="175.50"></text></g><g><title>DYLD-STUB$$__psynch_cvsignal (5 samples, 0.01%)</title><rect x="14.6335%" y="149" width="0.0142%" height="15" fill="rgb(226,225,41)" fg:x="5139" fg:w="5"/><text x="14.8835%" y="159.50"></text></g><g><title>__psynch_cvsignal (625 samples, 1.78%)</title><rect x="14.6478%" y="149" width="1.7797%" height="15" fill="rgb(248,136,42)" fg:x="5144" fg:w="625"/><text x="14.8978%" y="159.50">_..</text></g><g><title>pthread_cond_signal (644 samples, 1.83%)</title><rect x="14.6107%" y="165" width="1.8338%" height="15" fill="rgb(214,44,32)" fg:x="5131" fg:w="644"/><text x="14.8607%" y="175.50">p..</text></g><g><title>_pthread_cond_updateval (6 samples, 0.02%)</title><rect x="16.4275%" y="149" width="0.0171%" height="15" fill="rgb(212,223,27)" fg:x="5769" fg:w="6"/><text x="16.6775%" y="159.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.02%)</title><rect x="16.4446%" y="165" width="0.0171%" height="15" fill="rgb(208,75,8)" fg:x="5775" fg:w="6"/><text x="16.6946%" y="175.50"></text></g><g><title>pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="16.4616%" y="165" width="0.0114%" height="15" fill="rgb(214,162,47)" fg:x="5781" fg:w="4"/><text x="16.7116%" y="175.50"></text></g><g><title>mach_absolute_time (40 samples, 0.11%)</title><rect x="16.4816%" y="117" width="0.1139%" height="15" fill="rgb(226,185,10)" fg:x="5788" fg:w="40"/><text x="16.7316%" y="127.50"></text></g><g><title>clock_gettime_nsec_np (42 samples, 0.12%)</title><rect x="16.4816%" y="133" width="0.1196%" height="15" fill="rgb(251,12,28)" fg:x="5788" fg:w="42"/><text x="16.7316%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (745 samples, 2.12%)</title><rect x="14.4826%" y="181" width="2.1214%" height="15" fill="rgb(221,89,13)" fg:x="5086" fg:w="745"/><text x="14.7326%" y="191.50">p..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (46 samples, 0.13%)</title><rect x="16.4730%" y="165" width="0.1310%" height="15" fill="rgb(237,94,26)" fg:x="5785" fg:w="46"/><text x="16.7230%" y="175.50"></text></g><g><title>clock_gettime (43 samples, 0.12%)</title><rect x="16.4816%" y="149" width="0.1224%" height="15" fill="rgb(246,151,37)" fg:x="5788" fg:w="43"/><text x="16.7316%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (6 samples, 0.02%)</title><rect x="16.6040%" y="181" width="0.0171%" height="15" fill="rgb(205,37,19)" fg:x="5831" fg:w="6"/><text x="16.8540%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (8 samples, 0.02%)</title><rect x="16.6211%" y="181" width="0.0228%" height="15" fill="rgb(217,190,49)" fg:x="5837" fg:w="8"/><text x="16.8711%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (16 samples, 0.05%)</title><rect x="16.6439%" y="181" width="0.0456%" height="15" fill="rgb(244,44,31)" fg:x="5845" fg:w="16"/><text x="16.8939%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (5 samples, 0.01%)</title><rect x="16.6923%" y="165" width="0.0142%" height="15" fill="rgb(238,69,32)" fg:x="5862" fg:w="5"/><text x="16.9423%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 0.04%)</title><rect x="16.6894%" y="181" width="0.0370%" height="15" fill="rgb(247,157,24)" fg:x="5861" fg:w="13"/><text x="16.9394%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (7 samples, 0.02%)</title><rect x="16.7065%" y="165" width="0.0199%" height="15" fill="rgb(206,157,30)" fg:x="5867" fg:w="7"/><text x="16.9565%" y="175.50"></text></g><g><title>0x1025911bf (15 samples, 0.04%)</title><rect x="16.7322%" y="165" width="0.0427%" height="15" fill="rgb(215,219,27)" fg:x="5876" fg:w="15"/><text x="16.9822%" y="175.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (15 samples, 0.04%)</title><rect x="16.7322%" y="149" width="0.0427%" height="15" fill="rgb(209,16,8)" fg:x="5876" fg:w="15"/><text x="16.9822%" y="159.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="16.7635%" y="133" width="0.0114%" height="15" fill="rgb(226,77,8)" fg:x="5887" fg:w="4"/><text x="17.0135%" y="143.50"></text></g><g><title>_xzm_free (6 samples, 0.02%)</title><rect x="16.7806%" y="149" width="0.0171%" height="15" fill="rgb(211,172,22)" fg:x="5893" fg:w="6"/><text x="17.0306%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="17.0368%" y="133" width="0.0114%" height="15" fill="rgb(213,128,22)" fg:x="5983" fg:w="4"/><text x="17.2868%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.02%)</title><rect x="17.0482%" y="133" width="0.0228%" height="15" fill="rgb(240,119,4)" fg:x="5987" fg:w="8"/><text x="17.2982%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (14 samples, 0.04%)</title><rect x="17.0767%" y="133" width="0.0399%" height="15" fill="rgb(246,75,33)" fg:x="5997" fg:w="14"/><text x="17.3267%" y="143.50"></text></g><g><title>DYLD-STUB$$free (12 samples, 0.03%)</title><rect x="17.1166%" y="133" width="0.0342%" height="15" fill="rgb(231,148,5)" fg:x="6011" fg:w="12"/><text x="17.3666%" y="143.50"></text></g><g><title>DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="17.1507%" y="133" width="0.0114%" height="15" fill="rgb(251,131,17)" fg:x="6023" fg:w="4"/><text x="17.4007%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (4 samples, 0.01%)</title><rect x="17.1707%" y="133" width="0.0114%" height="15" fill="rgb(254,82,43)" fg:x="6030" fg:w="4"/><text x="17.4207%" y="143.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (12 samples, 0.03%)</title><rect x="17.1963%" y="133" width="0.0342%" height="15" fill="rgb(223,97,51)" fg:x="6039" fg:w="12"/><text x="17.4463%" y="143.50"></text></g><g><title>_free (42 samples, 0.12%)</title><rect x="17.2305%" y="133" width="0.1196%" height="15" fill="rgb(243,145,5)" fg:x="6051" fg:w="42"/><text x="17.4805%" y="143.50"></text></g><g><title>_malloc_zone_malloc (27 samples, 0.08%)</title><rect x="17.3501%" y="133" width="0.0769%" height="15" fill="rgb(227,101,24)" fg:x="6093" fg:w="27"/><text x="17.6001%" y="143.50"></text></g><g><title>_platform_memmove (30 samples, 0.09%)</title><rect x="17.4270%" y="133" width="0.0854%" height="15" fill="rgb(229,3,50)" fg:x="6120" fg:w="30"/><text x="17.6770%" y="143.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (6 samples, 0.02%)</title><rect x="17.9680%" y="117" width="0.0171%" height="15" fill="rgb(206,76,43)" fg:x="6310" fg:w="6"/><text x="18.2180%" y="127.50"></text></g><g><title>_platform_memset (8 samples, 0.02%)</title><rect x="17.9879%" y="117" width="0.0228%" height="15" fill="rgb(217,168,42)" fg:x="6317" fg:w="8"/><text x="18.2379%" y="127.50"></text></g><g><title>_xzm_free (411 samples, 1.17%)</title><rect x="17.5124%" y="133" width="1.1703%" height="15" fill="rgb(211,172,22)" fg:x="6150" fg:w="411"/><text x="17.7624%" y="143.50"></text></g><g><title>mach_absolute_time (236 samples, 0.67%)</title><rect x="18.0107%" y="117" width="0.6720%" height="15" fill="rgb(226,185,10)" fg:x="6325" fg:w="236"/><text x="18.2607%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (11 samples, 0.03%)</title><rect x="18.6827%" y="133" width="0.0313%" height="15" fill="rgb(214,103,16)" fg:x="6561" fg:w="11"/><text x="18.9327%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (63 samples, 0.18%)</title><rect x="18.7226%" y="133" width="0.1794%" height="15" fill="rgb(230,62,6)" fg:x="6575" fg:w="63"/><text x="18.9726%" y="143.50"></text></g><g><title>_free (6 samples, 0.02%)</title><rect x="18.9077%" y="117" width="0.0171%" height="15" fill="rgb(243,145,5)" fg:x="6640" fg:w="6"/><text x="19.1577%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.08%)</title><rect x="18.9020%" y="133" width="0.0769%" height="15" fill="rgb(227,15,28)" fg:x="6638" fg:w="27"/><text x="19.1520%" y="143.50"></text></g><g><title>_xzm_free (19 samples, 0.05%)</title><rect x="18.9248%" y="117" width="0.0541%" height="15" fill="rgb(211,172,22)" fg:x="6646" fg:w="19"/><text x="19.1748%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (27 samples, 0.08%)</title><rect x="19.0045%" y="101" width="0.0769%" height="15" fill="rgb(230,62,6)" fg:x="6674" fg:w="27"/><text x="19.2545%" y="111.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.10%)</title><rect x="18.9846%" y="117" width="0.0997%" height="15" fill="rgb(253,135,41)" fg:x="6667" fg:w="35"/><text x="19.2346%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41 samples, 0.12%)</title><rect x="18.9789%" y="133" width="0.1167%" height="15" fill="rgb(224,194,14)" fg:x="6665" fg:w="41"/><text x="19.2289%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4 samples, 0.01%)</title><rect x="19.0956%" y="133" width="0.0114%" height="15" fill="rgb(206,58,6)" fg:x="6706" fg:w="4"/><text x="19.3456%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (48 samples, 0.14%)</title><rect x="19.1212%" y="101" width="0.1367%" height="15" fill="rgb(246,75,33)" fg:x="6715" fg:w="48"/><text x="19.3712%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (5 samples, 0.01%)</title><rect x="19.2579%" y="101" width="0.0142%" height="15" fill="rgb(251,131,17)" fg:x="6763" fg:w="5"/><text x="19.5079%" y="111.50"></text></g><g><title>_malloc_zone_malloc (25 samples, 0.07%)</title><rect x="19.2779%" y="101" width="0.0712%" height="15" fill="rgb(227,101,24)" fg:x="6770" fg:w="25"/><text x="19.5279%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (7 samples, 0.02%)</title><rect x="19.3491%" y="101" width="0.0199%" height="15" fill="rgb(214,103,16)" fg:x="6795" fg:w="7"/><text x="19.5991%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (48 samples, 0.14%)</title><rect x="19.3690%" y="101" width="0.1367%" height="15" fill="rgb(230,62,6)" fg:x="6802" fg:w="48"/><text x="19.6190%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (142 samples, 0.40%)</title><rect x="19.1070%" y="133" width="0.4044%" height="15" fill="rgb(241,80,18)" fg:x="6710" fg:w="142"/><text x="19.3570%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (141 samples, 0.40%)</title><rect x="19.1099%" y="117" width="0.4015%" height="15" fill="rgb(237,133,22)" fg:x="6711" fg:w="141"/><text x="19.3599%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (14 samples, 0.04%)</title><rect x="19.5199%" y="133" width="0.0399%" height="15" fill="rgb(228,217,33)" fg:x="6855" fg:w="14"/><text x="19.7699%" y="143.50"></text></g><g><title>codecrafters_redis::network::server::extract_command (29 samples, 0.08%)</title><rect x="19.6651%" y="117" width="0.0826%" height="15" fill="rgb(239,143,12)" fg:x="6906" fg:w="29"/><text x="19.9151%" y="127.50"></text></g><g><title>&lt;codecrafters_redis::types::Command as core::str::traits::FromStr&gt;::from_str (21 samples, 0.06%)</title><rect x="19.6879%" y="101" width="0.0598%" height="15" fill="rgb(210,163,43)" fg:x="6914" fg:w="21"/><text x="19.9379%" y="111.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (119 samples, 0.34%)</title><rect x="19.7933%" y="85" width="0.3389%" height="15" fill="rgb(213,213,46)" fg:x="6951" fg:w="119"/><text x="20.0433%" y="95.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (47 samples, 0.13%)</title><rect x="19.9983%" y="69" width="0.1338%" height="15" fill="rgb(211,106,52)" fg:x="7023" fg:w="47"/><text x="20.2483%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.09%)</title><rect x="20.0382%" y="53" width="0.0940%" height="15" fill="rgb(236,225,40)" fg:x="7037" fg:w="33"/><text x="20.2882%" y="63.50"></text></g><g><title>codecrafters_redis::network::server::handle_get (142 samples, 0.40%)</title><rect x="19.7477%" y="117" width="0.4044%" height="15" fill="rgb(220,129,50)" fg:x="6935" fg:w="142"/><text x="19.9977%" y="127.50"></text></g><g><title>codecrafters_redis::data::db::Store::get (137 samples, 0.39%)</title><rect x="19.7619%" y="101" width="0.3901%" height="15" fill="rgb(228,160,30)" fg:x="6940" fg:w="137"/><text x="20.0119%" y="111.50"></text></g><g><title>core::fmt::write (7 samples, 0.02%)</title><rect x="20.1321%" y="85" width="0.0199%" height="15" fill="rgb(248,210,20)" fg:x="7070" fg:w="7"/><text x="20.3821%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.02%)</title><rect x="20.1350%" y="69" width="0.0171%" height="15" fill="rgb(237,176,18)" fg:x="7071" fg:w="6"/><text x="20.3850%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="20.1407%" y="53" width="0.0114%" height="15" fill="rgb(233,212,1)" fg:x="7073" fg:w="4"/><text x="20.3907%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="20.1407%" y="37" width="0.0114%" height="15" fill="rgb(237,133,22)" fg:x="7073" fg:w="4"/><text x="20.3907%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="20.2318%" y="53" width="0.0228%" height="15" fill="rgb(236,225,40)" fg:x="7105" fg:w="8"/><text x="20.4818%" y="63.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (36 samples, 0.10%)</title><rect x="20.1578%" y="101" width="0.1025%" height="15" fill="rgb(208,194,20)" fg:x="7079" fg:w="36"/><text x="20.4078%" y="111.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (26 samples, 0.07%)</title><rect x="20.1862%" y="85" width="0.0740%" height="15" fill="rgb(247,2,1)" fg:x="7089" fg:w="26"/><text x="20.4362%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.06%)</title><rect x="20.2033%" y="69" width="0.0570%" height="15" fill="rgb(237,102,14)" fg:x="7095" fg:w="20"/><text x="20.4533%" y="79.50"></text></g><g><title>codecrafters_redis::network::server::Server::process::_{{closure}} (254 samples, 0.72%)</title><rect x="19.5712%" y="133" width="0.7233%" height="15" fill="rgb(227,131,3)" fg:x="6873" fg:w="254"/><text x="19.8212%" y="143.50"></text></g><g><title>codecrafters_redis::network::server::handle_set (50 samples, 0.14%)</title><rect x="20.1521%" y="117" width="0.1424%" height="15" fill="rgb(209,222,37)" fg:x="7077" fg:w="50"/><text x="20.4021%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (9 samples, 0.03%)</title><rect x="20.2688%" y="101" width="0.0256%" height="15" fill="rgb(230,62,6)" fg:x="7118" fg:w="9"/><text x="20.5188%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (4 samples, 0.01%)</title><rect x="20.3001%" y="133" width="0.0114%" height="15" fill="rgb(212,134,26)" fg:x="7129" fg:w="4"/><text x="20.5501%" y="143.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="20.3286%" y="117" width="0.0114%" height="15" fill="rgb(243,145,5)" fg:x="7139" fg:w="4"/><text x="20.5786%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt; (48 samples, 0.14%)</title><rect x="20.3144%" y="133" width="0.1367%" height="15" fill="rgb(253,58,13)" fg:x="7134" fg:w="48"/><text x="20.5644%" y="143.50"></text></g><g><title>_xzm_free (39 samples, 0.11%)</title><rect x="20.3400%" y="117" width="0.1111%" height="15" fill="rgb(211,172,22)" fg:x="7143" fg:w="39"/><text x="20.5900%" y="127.50"></text></g><g><title>mach_absolute_time (11 samples, 0.03%)</title><rect x="20.4197%" y="101" width="0.0313%" height="15" fill="rgb(226,185,10)" fg:x="7171" fg:w="11"/><text x="20.6697%" y="111.50"></text></g><g><title>_xzm_free (28 samples, 0.08%)</title><rect x="20.4881%" y="117" width="0.0797%" height="15" fill="rgb(211,172,22)" fg:x="7195" fg:w="28"/><text x="20.7381%" y="127.50"></text></g><g><title>mach_absolute_time (4 samples, 0.01%)</title><rect x="20.5564%" y="101" width="0.0114%" height="15" fill="rgb(226,185,10)" fg:x="7219" fg:w="4"/><text x="20.8064%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;resp::value::Value&gt; (39 samples, 0.11%)</title><rect x="20.4653%" y="133" width="0.1111%" height="15" fill="rgb(246,159,31)" fg:x="7187" fg:w="39"/><text x="20.7153%" y="143.50"></text></g><g><title>free (4 samples, 0.01%)</title><rect x="20.5792%" y="133" width="0.0114%" height="15" fill="rgb(226,114,54)" fg:x="7227" fg:w="4"/><text x="20.8292%" y="143.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="20.5906%" y="133" width="0.0171%" height="15" fill="rgb(250,195,53)" fg:x="7231" fg:w="6"/><text x="20.8406%" y="143.50"></text></g><g><title>_xzm_free (7 samples, 0.02%)</title><rect x="20.6902%" y="117" width="0.0199%" height="15" fill="rgb(211,172,22)" fg:x="7266" fg:w="7"/><text x="20.9402%" y="127.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="20.7159%" y="101" width="0.0171%" height="15" fill="rgb(246,75,33)" fg:x="7275" fg:w="6"/><text x="20.9659%" y="111.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.01%)</title><rect x="20.7330%" y="101" width="0.0142%" height="15" fill="rgb(227,101,24)" fg:x="7281" fg:w="5"/><text x="20.9830%" y="111.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.14%)</title><rect x="20.7159%" y="117" width="0.1367%" height="15" fill="rgb(253,135,41)" fg:x="7275" fg:w="48"/><text x="20.9659%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (34 samples, 0.10%)</title><rect x="20.7557%" y="101" width="0.0968%" height="15" fill="rgb(230,62,6)" fg:x="7289" fg:w="34"/><text x="21.0057%" y="111.50"></text></g><g><title>DYLD-STUB$$free (9 samples, 0.03%)</title><rect x="20.8526%" y="101" width="0.0256%" height="15" fill="rgb(231,148,5)" fg:x="7323" fg:w="9"/><text x="21.1026%" y="111.50"></text></g><g><title>_free (25 samples, 0.07%)</title><rect x="20.8810%" y="101" width="0.0712%" height="15" fill="rgb(243,145,5)" fg:x="7333" fg:w="25"/><text x="21.1310%" y="111.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (6 samples, 0.02%)</title><rect x="21.1658%" y="85" width="0.0171%" height="15" fill="rgb(206,76,43)" fg:x="7433" fg:w="6"/><text x="21.4158%" y="95.50"></text></g><g><title>__bzero (9 samples, 0.03%)</title><rect x="21.1829%" y="85" width="0.0256%" height="15" fill="rgb(226,151,36)" fg:x="7439" fg:w="9"/><text x="21.4329%" y="95.50"></text></g><g><title>_platform_memset (5 samples, 0.01%)</title><rect x="21.2085%" y="85" width="0.0142%" height="15" fill="rgb(217,168,42)" fg:x="7448" fg:w="5"/><text x="21.4585%" y="95.50"></text></g><g><title>_xzm_free (168 samples, 0.48%)</title><rect x="20.9522%" y="101" width="0.4784%" height="15" fill="rgb(211,172,22)" fg:x="7358" fg:w="168"/><text x="21.2022%" y="111.50"></text></g><g><title>mach_absolute_time (73 samples, 0.21%)</title><rect x="21.2227%" y="85" width="0.2079%" height="15" fill="rgb(226,185,10)" fg:x="7453" fg:w="73"/><text x="21.4727%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (211 samples, 0.60%)</title><rect x="20.8526%" y="117" width="0.6008%" height="15" fill="rgb(227,15,28)" fg:x="7323" fg:w="211"/><text x="21.1026%" y="127.50"></text></g><g><title>free (8 samples, 0.02%)</title><rect x="21.4306%" y="101" width="0.0228%" height="15" fill="rgb(226,114,54)" fg:x="7526" fg:w="8"/><text x="21.6806%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.02%)</title><rect x="21.4762%" y="85" width="0.0228%" height="15" fill="rgb(246,75,33)" fg:x="7542" fg:w="8"/><text x="21.7262%" y="95.50"></text></g><g><title>DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="21.4989%" y="85" width="0.0171%" height="15" fill="rgb(251,131,17)" fg:x="7550" fg:w="6"/><text x="21.7489%" y="95.50"></text></g><g><title>_malloc_zone_malloc (20 samples, 0.06%)</title><rect x="21.5246%" y="85" width="0.0570%" height="15" fill="rgb(227,101,24)" fg:x="7559" fg:w="20"/><text x="21.7746%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (9 samples, 0.03%)</title><rect x="21.5815%" y="85" width="0.0256%" height="15" fill="rgb(214,103,16)" fg:x="7579" fg:w="9"/><text x="21.8315%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (40 samples, 0.11%)</title><rect x="21.6072%" y="85" width="0.1139%" height="15" fill="rgb(230,62,6)" fg:x="7588" fg:w="40"/><text x="21.8572%" y="95.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.25%)</title><rect x="21.4762%" y="101" width="0.2477%" height="15" fill="rgb(253,135,41)" fg:x="7542" fg:w="87"/><text x="21.7262%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5 samples, 0.01%)</title><rect x="21.7239%" y="101" width="0.0142%" height="15" fill="rgb(237,144,15)" fg:x="7629" fg:w="5"/><text x="21.9739%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="21.7467%" y="85" width="0.0171%" height="15" fill="rgb(213,192,6)" fg:x="7637" fg:w="6"/><text x="21.9967%" y="95.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec_in (119 samples, 0.34%)</title><rect x="21.4591%" y="117" width="0.3389%" height="15" fill="rgb(240,13,45)" fg:x="7536" fg:w="119"/><text x="21.7091%" y="127.50"></text></g><g><title>core::ptr::copy_nonoverlapping (20 samples, 0.06%)</title><rect x="21.7410%" y="101" width="0.0570%" height="15" fill="rgb(209,27,20)" fg:x="7635" fg:w="20"/><text x="21.9910%" y="111.50"></text></g><g><title>_platform_memmove (12 samples, 0.03%)</title><rect x="21.7638%" y="85" width="0.0342%" height="15" fill="rgb(229,3,50)" fg:x="7643" fg:w="12"/><text x="22.0138%" y="95.50"></text></g><g><title>alloc::string::String::from_utf8 (14 samples, 0.04%)</title><rect x="21.7979%" y="117" width="0.0399%" height="15" fill="rgb(245,23,15)" fg:x="7655" fg:w="14"/><text x="22.0479%" y="127.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.03%)</title><rect x="21.8093%" y="101" width="0.0285%" height="15" fill="rgb(248,147,30)" fg:x="7659" fg:w="10"/><text x="22.0593%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.01%)</title><rect x="21.8378%" y="117" width="0.0114%" height="15" fill="rgb(249,117,32)" fg:x="7669" fg:w="4"/><text x="22.0878%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.01%)</title><rect x="21.8720%" y="117" width="0.0142%" height="15" fill="rgb(206,149,53)" fg:x="7681" fg:w="5"/><text x="22.1220%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (19 samples, 0.05%)</title><rect x="22.0428%" y="101" width="0.0541%" height="15" fill="rgb(231,155,33)" fg:x="7741" fg:w="19"/><text x="22.2928%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="22.1140%" y="85" width="0.0171%" height="15" fill="rgb(246,75,33)" fg:x="7766" fg:w="6"/><text x="22.3640%" y="95.50"></text></g><g><title>_malloc_zone_malloc (16 samples, 0.05%)</title><rect x="22.1368%" y="85" width="0.0456%" height="15" fill="rgb(227,101,24)" fg:x="7774" fg:w="16"/><text x="22.3868%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="22.1824%" y="85" width="0.0171%" height="15" fill="rgb(214,103,16)" fg:x="7790" fg:w="6"/><text x="22.4324%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (32 samples, 0.09%)</title><rect x="22.1994%" y="85" width="0.0911%" height="15" fill="rgb(230,62,6)" fg:x="7796" fg:w="32"/><text x="22.4494%" y="95.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.18%)</title><rect x="22.1112%" y="101" width="0.1822%" height="15" fill="rgb(253,135,41)" fg:x="7765" fg:w="64"/><text x="22.3612%" y="111.50"></text></g><g><title>_free (8 samples, 0.02%)</title><rect x="22.3048%" y="85" width="0.0228%" height="15" fill="rgb(243,145,5)" fg:x="7833" fg:w="8"/><text x="22.5548%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (86 samples, 0.24%)</title><rect x="22.2934%" y="101" width="0.2449%" height="15" fill="rgb(227,15,28)" fg:x="7829" fg:w="86"/><text x="22.5434%" y="111.50"></text></g><g><title>_xzm_free (74 samples, 0.21%)</title><rect x="22.3276%" y="85" width="0.2107%" height="15" fill="rgb(211,172,22)" fg:x="7841" fg:w="74"/><text x="22.5776%" y="95.50"></text></g><g><title>mach_absolute_time (54 samples, 0.15%)</title><rect x="22.3845%" y="69" width="0.1538%" height="15" fill="rgb(226,185,10)" fg:x="7861" fg:w="54"/><text x="22.6345%" y="79.50"></text></g><g><title>_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="22.5668%" y="53" width="0.0228%" height="15" fill="rgb(227,101,24)" fg:x="7925" fg:w="8"/><text x="22.8168%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (54 samples, 0.15%)</title><rect x="22.5468%" y="85" width="0.1538%" height="15" fill="rgb(241,80,18)" fg:x="7918" fg:w="54"/><text x="22.7968%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.15%)</title><rect x="22.5497%" y="69" width="0.1509%" height="15" fill="rgb(237,133,22)" fg:x="7919" fg:w="53"/><text x="22.7997%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (34 samples, 0.10%)</title><rect x="22.6038%" y="53" width="0.0968%" height="15" fill="rgb(230,62,6)" fg:x="7938" fg:w="34"/><text x="22.8538%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (61 samples, 0.17%)</title><rect x="22.5440%" y="101" width="0.1737%" height="15" fill="rgb(216,76,46)" fg:x="7917" fg:w="61"/><text x="22.7940%" y="111.50"></text></g><g><title>alloc::string::String::from_utf8 (14 samples, 0.04%)</title><rect x="22.7234%" y="101" width="0.0399%" height="15" fill="rgb(245,23,15)" fg:x="7980" fg:w="14"/><text x="22.9734%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.03%)</title><rect x="22.7291%" y="85" width="0.0342%" height="15" fill="rgb(248,147,30)" fg:x="7982" fg:w="12"/><text x="22.9791%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.01%)</title><rect x="22.7633%" y="101" width="0.0142%" height="15" fill="rgb(228,217,33)" fg:x="7994" fg:w="5"/><text x="23.0133%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (8 samples, 0.02%)</title><rect x="22.7775%" y="101" width="0.0228%" height="15" fill="rgb(249,199,35)" fg:x="7999" fg:w="8"/><text x="23.0275%" y="111.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_ascii_radix (6 samples, 0.02%)</title><rect x="22.8003%" y="101" width="0.0171%" height="15" fill="rgb(234,155,9)" fg:x="8007" fg:w="6"/><text x="23.0503%" y="111.50"></text></g><g><title>core::ptr::copy_nonoverlapping (17 samples, 0.05%)</title><rect x="22.8202%" y="101" width="0.0484%" height="15" fill="rgb(209,27,20)" fg:x="8014" fg:w="17"/><text x="23.0702%" y="111.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="22.8316%" y="85" width="0.0370%" height="15" fill="rgb(229,3,50)" fg:x="8018" fg:w="13"/><text x="23.0816%" y="95.50"></text></g><g><title>core::ptr::write (10 samples, 0.03%)</title><rect x="22.8686%" y="101" width="0.0285%" height="15" fill="rgb(209,143,44)" fg:x="8031" fg:w="10"/><text x="23.1186%" y="111.50"></text></g><g><title>_platform_memset (8 samples, 0.02%)</title><rect x="22.8743%" y="85" width="0.0228%" height="15" fill="rgb(217,168,42)" fg:x="8033" fg:w="8"/><text x="23.1243%" y="95.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (4 samples, 0.01%)</title><rect x="22.9056%" y="101" width="0.0114%" height="15" fill="rgb(212,212,0)" fg:x="8044" fg:w="4"/><text x="23.1556%" y="111.50"></text></g><g><title>std::io::default_read_exact (8 samples, 0.02%)</title><rect x="22.9256%" y="101" width="0.0228%" height="15" fill="rgb(223,139,4)" fg:x="8051" fg:w="8"/><text x="23.1756%" y="111.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (374 samples, 1.06%)</title><rect x="21.8862%" y="117" width="1.0650%" height="15" fill="rgb(242,183,16)" fg:x="7686" fg:w="374"/><text x="22.1362%" y="127.50"></text></g><g><title>resp::serialize::parse_string (54 samples, 0.15%)</title><rect x="22.9597%" y="117" width="0.1538%" height="15" fill="rgb(227,103,23)" fg:x="8063" fg:w="54"/><text x="23.2097%" y="127.50"></text></g><g><title>alloc::string::String::from_utf8 (51 samples, 0.15%)</title><rect x="22.9683%" y="101" width="0.1452%" height="15" fill="rgb(245,23,15)" fg:x="8066" fg:w="51"/><text x="23.2183%" y="111.50"></text></g><g><title>core::str::converts::from_utf8 (45 samples, 0.13%)</title><rect x="22.9854%" y="85" width="0.1281%" height="15" fill="rgb(248,147,30)" fg:x="8072" fg:w="45"/><text x="23.2354%" y="95.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="23.1562%" y="53" width="0.0199%" height="15" fill="rgb(246,75,33)" fg:x="8132" fg:w="7"/><text x="23.4062%" y="63.50"></text></g><g><title>_malloc_zone_malloc (13 samples, 0.04%)</title><rect x="23.1932%" y="53" width="0.0370%" height="15" fill="rgb(227,101,24)" fg:x="8145" fg:w="13"/><text x="23.4432%" y="63.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="23.2303%" y="53" width="0.0171%" height="15" fill="rgb(214,103,16)" fg:x="8158" fg:w="6"/><text x="23.4803%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (72 samples, 0.21%)</title><rect x="23.1534%" y="85" width="0.2050%" height="15" fill="rgb(241,80,18)" fg:x="8131" fg:w="72"/><text x="23.4034%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (72 samples, 0.21%)</title><rect x="23.1534%" y="69" width="0.2050%" height="15" fill="rgb(237,133,22)" fg:x="8131" fg:w="72"/><text x="23.4034%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (39 samples, 0.11%)</title><rect x="23.2473%" y="53" width="0.1111%" height="15" fill="rgb(230,62,6)" fg:x="8164" fg:w="39"/><text x="23.4973%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (5 samples, 0.01%)</title><rect x="23.3612%" y="85" width="0.0142%" height="15" fill="rgb(212,134,26)" fg:x="8204" fg:w="5"/><text x="23.6112%" y="95.50"></text></g><g><title>core::intrinsics::unlikely (4 samples, 0.01%)</title><rect x="23.3755%" y="85" width="0.0114%" height="15" fill="rgb(209,190,26)" fg:x="8209" fg:w="4"/><text x="23.6255%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (85 samples, 0.24%)</title><rect x="23.1477%" y="101" width="0.2420%" height="15" fill="rgb(216,76,46)" fg:x="8129" fg:w="85"/><text x="23.3977%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (14 samples, 0.04%)</title><rect x="23.4324%" y="85" width="0.0399%" height="15" fill="rgb(213,192,6)" fg:x="8229" fg:w="14"/><text x="23.6824%" y="95.50"></text></g><g><title>core::ptr::copy_nonoverlapping (76 samples, 0.22%)</title><rect x="23.3954%" y="101" width="0.2164%" height="15" fill="rgb(209,27,20)" fg:x="8216" fg:w="76"/><text x="23.6454%" y="111.50"></text></g><g><title>_platform_memmove (49 samples, 0.14%)</title><rect x="23.4723%" y="85" width="0.1395%" height="15" fill="rgb(229,3,50)" fg:x="8243" fg:w="49"/><text x="23.7223%" y="95.50"></text></g><g><title>core::slice::memchr::memchr_naive (27 samples, 0.08%)</title><rect x="23.6147%" y="101" width="0.0769%" height="15" fill="rgb(251,103,8)" fg:x="8293" fg:w="27"/><text x="23.8647%" y="111.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (7 samples, 0.02%)</title><rect x="23.6916%" y="101" width="0.0199%" height="15" fill="rgb(229,103,7)" fg:x="8320" fg:w="7"/><text x="23.9416%" y="111.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (24 samples, 0.07%)</title><rect x="23.7115%" y="101" width="0.0683%" height="15" fill="rgb(246,87,35)" fg:x="8327" fg:w="24"/><text x="23.9615%" y="111.50"></text></g><g><title>std::io::BufRead::read_until (243 samples, 0.69%)</title><rect x="23.1135%" y="117" width="0.6920%" height="15" fill="rgb(210,43,53)" fg:x="8117" fg:w="243"/><text x="23.3635%" y="127.50"></text></g><g><title>std::io::read_until (9 samples, 0.03%)</title><rect x="23.7798%" y="101" width="0.0256%" height="15" fill="rgb(205,92,54)" fg:x="8351" fg:w="9"/><text x="24.0298%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.03%)</title><rect x="23.8539%" y="101" width="0.0342%" height="15" fill="rgb(246,75,33)" fg:x="8377" fg:w="12"/><text x="24.1039%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (8 samples, 0.02%)</title><rect x="23.8909%" y="101" width="0.0228%" height="15" fill="rgb(254,82,43)" fg:x="8390" fg:w="8"/><text x="24.1409%" y="111.50"></text></g><g><title>_malloc_zone_malloc (9 samples, 0.03%)</title><rect x="23.9137%" y="101" width="0.0256%" height="15" fill="rgb(227,101,24)" fg:x="8398" fg:w="9"/><text x="24.1637%" y="111.50"></text></g><g><title>_platform_memmove (11 samples, 0.03%)</title><rect x="23.9393%" y="101" width="0.0313%" height="15" fill="rgb(229,3,50)" fg:x="8407" fg:w="11"/><text x="24.1893%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (7 samples, 0.02%)</title><rect x="23.9706%" y="101" width="0.0199%" height="15" fill="rgb(214,103,16)" fg:x="8418" fg:w="7"/><text x="24.2206%" y="111.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (1,247 samples, 3.55%)</title><rect x="20.6077%" y="133" width="3.5509%" height="15" fill="rgb(242,183,16)" fg:x="7237" fg:w="1247"/><text x="20.8577%" y="143.50">resp..</text></g><g><title>std::io::error::Error::new (121 samples, 0.34%)</title><rect x="23.8140%" y="117" width="0.3446%" height="15" fill="rgb(228,148,18)" fg:x="8363" fg:w="121"/><text x="24.0640%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (59 samples, 0.17%)</title><rect x="23.9905%" y="101" width="0.1680%" height="15" fill="rgb(230,62,6)" fg:x="8425" fg:w="59"/><text x="24.2405%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (32 samples, 0.09%)</title><rect x="24.2354%" y="101" width="0.0911%" height="15" fill="rgb(241,226,9)" fg:x="8511" fg:w="32"/><text x="24.4854%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.09%)</title><rect x="24.2383%" y="85" width="0.0883%" height="15" fill="rgb(237,133,22)" fg:x="8512" fg:w="31"/><text x="24.4883%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (23 samples, 0.07%)</title><rect x="24.2611%" y="69" width="0.0655%" height="15" fill="rgb(230,62,6)" fg:x="8520" fg:w="23"/><text x="24.5111%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (10 samples, 0.03%)</title><rect x="24.3864%" y="69" width="0.0285%" height="15" fill="rgb(246,75,33)" fg:x="8564" fg:w="10"/><text x="24.6364%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (61 samples, 0.17%)</title><rect x="24.3266%" y="101" width="0.1737%" height="15" fill="rgb(233,212,1)" fg:x="8543" fg:w="61"/><text x="24.5766%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.13%)</title><rect x="24.3693%" y="85" width="0.1310%" height="15" fill="rgb(237,133,22)" fg:x="8558" fg:w="46"/><text x="24.6193%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (23 samples, 0.07%)</title><rect x="24.4348%" y="69" width="0.0655%" height="15" fill="rgb(230,62,6)" fg:x="8581" fg:w="23"/><text x="24.6848%" y="79.50"></text></g><g><title>resp::value::Value::encode (120 samples, 0.34%)</title><rect x="24.1614%" y="133" width="0.3417%" height="15" fill="rgb(247,227,24)" fg:x="8485" fg:w="120"/><text x="24.4114%" y="143.50"></text></g><g><title>resp::serialize::buf_encode (116 samples, 0.33%)</title><rect x="24.1728%" y="117" width="0.3303%" height="15" fill="rgb(250,49,43)" fg:x="8489" fg:w="116"/><text x="24.4228%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (11 samples, 0.03%)</title><rect x="24.5088%" y="117" width="0.0313%" height="15" fill="rgb(249,18,52)" fg:x="8607" fg:w="11"/><text x="24.7588%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6 samples, 0.02%)</title><rect x="24.5401%" y="117" width="0.0171%" height="15" fill="rgb(215,214,9)" fg:x="8618" fg:w="6"/><text x="24.7901%" y="127.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="24.6056%" y="69" width="0.0199%" height="15" fill="rgb(246,75,33)" fg:x="8641" fg:w="7"/><text x="24.8556%" y="79.50"></text></g><g><title>_malloc_zone_malloc (19 samples, 0.05%)</title><rect x="24.6455%" y="69" width="0.0541%" height="15" fill="rgb(227,101,24)" fg:x="8655" fg:w="19"/><text x="24.8955%" y="79.50"></text></g><g><title>_xzm_xzone_malloc (8 samples, 0.02%)</title><rect x="24.6996%" y="69" width="0.0228%" height="15" fill="rgb(214,103,16)" fg:x="8674" fg:w="8"/><text x="24.9496%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (29 samples, 0.08%)</title><rect x="24.7224%" y="69" width="0.0826%" height="15" fill="rgb(230,62,6)" fg:x="8682" fg:w="29"/><text x="24.9724%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (82 samples, 0.23%)</title><rect x="24.5743%" y="101" width="0.2335%" height="15" fill="rgb(241,80,18)" fg:x="8630" fg:w="82"/><text x="24.8243%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (80 samples, 0.23%)</title><rect x="24.5800%" y="85" width="0.2278%" height="15" fill="rgb(237,133,22)" fg:x="8632" fg:w="80"/><text x="24.8300%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (95 samples, 0.27%)</title><rect x="24.5572%" y="117" width="0.2705%" height="15" fill="rgb(216,76,46)" fg:x="8624" fg:w="95"/><text x="24.8072%" y="127.50"></text></g><g><title>core::ptr::copy_nonoverlapping (54 samples, 0.15%)</title><rect x="24.8306%" y="117" width="0.1538%" height="15" fill="rgb(209,27,20)" fg:x="8720" fg:w="54"/><text x="25.0806%" y="127.50"></text></g><g><title>_platform_memmove (48 samples, 0.14%)</title><rect x="24.8477%" y="101" width="0.1367%" height="15" fill="rgb(229,3,50)" fg:x="8726" fg:w="48"/><text x="25.0977%" y="111.50"></text></g><g><title>core::slice::memchr::memchr_naive (9 samples, 0.03%)</title><rect x="24.9872%" y="117" width="0.0256%" height="15" fill="rgb(251,103,8)" fg:x="8775" fg:w="9"/><text x="25.2372%" y="127.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (13 samples, 0.04%)</title><rect x="25.0128%" y="117" width="0.0370%" height="15" fill="rgb(246,87,35)" fg:x="8784" fg:w="13"/><text x="25.2628%" y="127.50"></text></g><g><title>std::io::BufRead::read_until (204 samples, 0.58%)</title><rect x="24.5031%" y="133" width="0.5809%" height="15" fill="rgb(210,43,53)" fg:x="8605" fg:w="204"/><text x="24.7531%" y="143.50"></text></g><g><title>std::io::read_until (11 samples, 0.03%)</title><rect x="25.0527%" y="117" width="0.0313%" height="15" fill="rgb(205,92,54)" fg:x="8798" fg:w="11"/><text x="25.3027%" y="127.50"></text></g><g><title>std::io::error::Error::new (4 samples, 0.01%)</title><rect x="25.0840%" y="133" width="0.0114%" height="15" fill="rgb(228,148,18)" fg:x="8809" fg:w="4"/><text x="25.3340%" y="143.50"></text></g><g><title>__recvfrom (10,277 samples, 29.26%)</title><rect x="25.2919%" y="85" width="29.2642%" height="15" fill="rgb(224,160,53)" fg:x="8882" fg:w="10277"/><text x="25.5419%" y="95.50">__recvfrom</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (10,298 samples, 29.32%)</title><rect x="25.2549%" y="101" width="29.3240%" height="15" fill="rgb(213,217,36)" fg:x="8869" fg:w="10298"/><text x="25.5049%" y="111.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::r..</text></g><g><title>recv (8 samples, 0.02%)</title><rect x="54.5561%" y="85" width="0.0228%" height="15" fill="rgb(227,69,32)" fg:x="19159" fg:w="8"/><text x="54.8061%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (10,428 samples, 29.69%)</title><rect x="25.2321%" y="117" width="29.6942%" height="15" fill="rgb(205,209,50)" fg:x="8861" fg:w="10428"/><text x="25.4821%" y="127.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::R..</text></g><g><title>__recvfrom (122 samples, 0.35%)</title><rect x="54.5788%" y="101" width="0.3474%" height="15" fill="rgb(224,160,53)" fg:x="19167" fg:w="122"/><text x="54.8288%" y="111.50"></text></g><g><title>_tlv_get_addr (7 samples, 0.02%)</title><rect x="54.9946%" y="101" width="0.0199%" height="15" fill="rgb(226,77,8)" fg:x="19313" fg:w="7"/><text x="55.2446%" y="111.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (48 samples, 0.14%)</title><rect x="54.9262%" y="117" width="0.1367%" height="15" fill="rgb(226,221,19)" fg:x="19289" fg:w="48"/><text x="55.1762%" y="127.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (17 samples, 0.05%)</title><rect x="55.0145%" y="101" width="0.0484%" height="15" fill="rgb(216,63,32)" fg:x="19320" fg:w="17"/><text x="55.2645%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (10,525 samples, 29.97%)</title><rect x="25.1011%" y="133" width="29.9704%" height="15" fill="rgb(235,57,13)" fg:x="8815" fg:w="10525"/><text x="25.3511%" y="143.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_re..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (15,462 samples, 44.03%)</title><rect x="55.1541%" y="101" width="44.0287%" height="15" fill="rgb(252,79,41)" fg:x="19369" fg:w="15462"/><text x="55.4041%" y="111.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write</text></g><g><title>__sendto (15,452 samples, 44.00%)</title><rect x="55.1825%" y="85" width="44.0002%" height="15" fill="rgb(205,164,36)" fg:x="19379" fg:w="15452"/><text x="55.4325%" y="95.50">__sendto</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (15,664 samples, 44.60%)</title><rect x="55.1284%" y="117" width="44.6039%" height="15" fill="rgb(209,219,12)" fg:x="19360" fg:w="15664"/><text x="55.3784%" y="127.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write</text></g><g><title>__sendto (193 samples, 0.55%)</title><rect x="99.1828%" y="101" width="0.5496%" height="15" fill="rgb(205,164,36)" fg:x="34831" fg:w="193"/><text x="99.4328%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (15,689 samples, 44.68%)</title><rect x="55.0715%" y="133" width="44.6751%" height="15" fill="rgb(229,85,47)" fg:x="19340" fg:w="15689"/><text x="55.3215%" y="143.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.01%)</title><rect x="99.7323%" y="117" width="0.0142%" height="15" fill="rgb(226,221,19)" fg:x="35024" fg:w="5"/><text x="99.9823%" y="127.50"></text></g><g><title>codecrafters_redis::main::_{{closure}}::_{{closure}} (29,133 samples, 82.96%)</title><rect x="16.8090%" y="149" width="82.9575%" height="15" fill="rgb(234,78,39)" fg:x="5903" fg:w="29133"/><text x="17.0590%" y="159.50">codecrafters_redis::main::_{{closure}}::_{{closure}}</text></g><g><title>xzm_malloc_zone_malloc_type_malloc (6 samples, 0.02%)</title><rect x="99.7494%" y="133" width="0.0171%" height="15" fill="rgb(243,149,16)" fg:x="35030" fg:w="6"/><text x="99.9994%" y="143.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (5 samples, 0.01%)</title><rect x="99.7722%" y="149" width="0.0142%" height="15" fill="rgb(242,183,16)" fg:x="35038" fg:w="5"/><text x="100.0222%" y="159.50"></text></g><g><title>0x1025911cf (29,157 samples, 83.03%)</title><rect x="16.7806%" y="165" width="83.0258%" height="15" fill="rgb(206,219,29)" fg:x="5893" fg:w="29157"/><text x="17.0306%" y="175.50">0x1025911cf</text></g><g><title>0x1025911d1 (5 samples, 0.01%)</title><rect x="99.8064%" y="165" width="0.0142%" height="15" fill="rgb(229,219,38)" fg:x="35050" fg:w="5"/><text x="100.0564%" y="175.50"></text></g><g><title>0x1025911db (4 samples, 0.01%)</title><rect x="99.8235%" y="165" width="0.0114%" height="15" fill="rgb(205,219,38)" fg:x="35056" fg:w="4"/><text x="100.0735%" y="175.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="99.8235%" y="149" width="0.0114%" height="15" fill="rgb(216,206,8)" fg:x="35056" fg:w="4"/><text x="100.0735%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (29,189 samples, 83.12%)</title><rect x="16.7293%" y="181" width="83.1169%" height="15" fill="rgb(250,43,28)" fg:x="5875" fg:w="29189"/><text x="16.9793%" y="191.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (30,018 samples, 85.48%)</title><rect x="14.3829%" y="197" width="85.4775%" height="15" fill="rgb(246,72,13)" fg:x="5051" fg:w="30018"/><text x="14.6329%" y="207.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.01%)</title><rect x="99.8462%" y="181" width="0.0142%" height="15" fill="rgb(232,67,51)" fg:x="35064" fg:w="5"/><text x="100.0962%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (44 samples, 0.13%)</title><rect x="99.8605%" y="197" width="0.1253%" height="15" fill="rgb(229,53,9)" fg:x="35069" fg:w="44"/><text x="100.1105%" y="207.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (35,107 samples, 99.97%)</title><rect x="0.0228%" y="213" width="99.9687%" height="15" fill="rgb(252,134,48)" fg:x="8" fg:w="35107"/><text x="0.2728%" y="223.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>all (35,118 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="35118"/><text x="0.2500%" y="399.50"></text></g><g><title>thread_start (35,111 samples, 99.98%)</title><rect x="0.0199%" y="373" width="99.9801%" height="15" fill="rgb(213,48,3)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="383.50">thread_start</text></g><g><title>_pthread_start (35,111 samples, 99.98%)</title><rect x="0.0199%" y="357" width="99.9801%" height="15" fill="rgb(229,126,26)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="367.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (35,111 samples, 99.98%)</title><rect x="0.0199%" y="341" width="99.9801%" height="15" fill="rgb(206,117,35)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="351.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35,111 samples, 99.98%)</title><rect x="0.0199%" y="325" width="99.9801%" height="15" fill="rgb(218,104,40)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="335.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (35,111 samples, 99.98%)</title><rect x="0.0199%" y="309" width="99.9801%" height="15" fill="rgb(208,179,44)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35,111 samples, 99.98%)</title><rect x="0.0199%" y="293" width="99.9801%" height="15" fill="rgb(249,26,43)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="303.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35,111 samples, 99.98%)</title><rect x="0.0199%" y="277" width="99.9801%" height="15" fill="rgb(244,44,31)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="287.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (35,111 samples, 99.98%)</title><rect x="0.0199%" y="261" width="99.9801%" height="15" fill="rgb(227,84,42)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="271.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (35,111 samples, 99.98%)</title><rect x="0.0199%" y="245" width="99.9801%" height="15" fill="rgb(234,183,34)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="255.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (35,111 samples, 99.98%)</title><rect x="0.0199%" y="229" width="99.9801%" height="15" fill="rgb(250,218,41)" fg:x="7" fg:w="35111"/><text x="0.2699%" y="239.50">tokio::runtime::context::runtime::enter_runtime</text></g></svg></svg>