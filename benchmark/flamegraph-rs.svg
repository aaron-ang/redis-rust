<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Redis Rust Implementation</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="39560"><g><title>pow (11 samples, 0.03%)</title><rect x="0.3362%" y="245" width="0.0278%" height="15" fill="rgb(251,107,30)" fg:x="133" fg:w="11"/><text x="0.5862%" y="255.50"></text></g><g><title>mach_absolute_time (84 samples, 0.21%)</title><rect x="0.4323%" y="197" width="0.2123%" height="15" fill="rgb(226,185,10)" fg:x="171" fg:w="84"/><text x="0.6823%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (121 samples, 0.31%)</title><rect x="0.3640%" y="245" width="0.3059%" height="15" fill="rgb(237,94,26)" fg:x="144" fg:w="121"/><text x="0.6140%" y="255.50"></text></g><g><title>clock_gettime (115 samples, 0.29%)</title><rect x="0.3792%" y="229" width="0.2907%" height="15" fill="rgb(246,151,37)" fg:x="150" fg:w="115"/><text x="0.6292%" y="239.50"></text></g><g><title>clock_gettime_nsec_np (100 samples, 0.25%)</title><rect x="0.4171%" y="213" width="0.2528%" height="15" fill="rgb(251,12,28)" fg:x="165" fg:w="100"/><text x="0.6671%" y="223.50"></text></g><g><title>mach_timebase_info (10 samples, 0.03%)</title><rect x="0.6446%" y="197" width="0.0253%" height="15" fill="rgb(254,128,11)" fg:x="255" fg:w="10"/><text x="0.8946%" y="207.50"></text></g><g><title>mach_absolute_time (39 samples, 0.10%)</title><rect x="0.7305%" y="181" width="0.0986%" height="15" fill="rgb(226,185,10)" fg:x="289" fg:w="39"/><text x="0.9805%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (66 samples, 0.17%)</title><rect x="0.6749%" y="229" width="0.1668%" height="15" fill="rgb(237,94,26)" fg:x="267" fg:w="66"/><text x="0.9249%" y="239.50"></text></g><g><title>clock_gettime (61 samples, 0.15%)</title><rect x="0.6876%" y="213" width="0.1542%" height="15" fill="rgb(246,151,37)" fg:x="272" fg:w="61"/><text x="0.9376%" y="223.50"></text></g><g><title>clock_gettime_nsec_np (54 samples, 0.14%)</title><rect x="0.7053%" y="197" width="0.1365%" height="15" fill="rgb(251,12,28)" fg:x="279" fg:w="54"/><text x="0.9553%" y="207.50"></text></g><g><title>mach_timebase_info (5 samples, 0.01%)</title><rect x="0.8291%" y="181" width="0.0126%" height="15" fill="rgb(254,128,11)" fg:x="328" fg:w="5"/><text x="1.0791%" y="191.50"></text></g><g><title>std::time::Instant::elapsed (77 samples, 0.19%)</title><rect x="0.6699%" y="245" width="0.1946%" height="15" fill="rgb(215,12,10)" fg:x="265" fg:w="77"/><text x="0.9199%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (9 samples, 0.02%)</title><rect x="0.8418%" y="229" width="0.0228%" height="15" fill="rgb(231,110,18)" fg:x="333" fg:w="9"/><text x="1.0918%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (5 samples, 0.01%)</title><rect x="0.8670%" y="245" width="0.0126%" height="15" fill="rgb(237,121,30)" fg:x="343" fg:w="5"/><text x="1.1170%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (9 samples, 0.02%)</title><rect x="0.8797%" y="245" width="0.0228%" height="15" fill="rgb(237,96,40)" fg:x="348" fg:w="9"/><text x="1.1297%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (77 samples, 0.19%)</title><rect x="0.9024%" y="245" width="0.1946%" height="15" fill="rgb(227,39,2)" fg:x="357" fg:w="77"/><text x="1.1524%" y="255.50"></text></g><g><title>__psynch_cvsignal (49 samples, 0.12%)</title><rect x="1.1451%" y="197" width="0.1239%" height="15" fill="rgb(248,136,42)" fg:x="453" fg:w="49"/><text x="1.3951%" y="207.50"></text></g><g><title>pthread_cond_signal (51 samples, 0.13%)</title><rect x="1.1426%" y="213" width="0.1289%" height="15" fill="rgb(214,44,32)" fg:x="452" fg:w="51"/><text x="1.3926%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (59 samples, 0.15%)</title><rect x="1.1400%" y="229" width="0.1491%" height="15" fill="rgb(221,89,13)" fg:x="451" fg:w="59"/><text x="1.3900%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (6 samples, 0.02%)</title><rect x="1.2740%" y="213" width="0.0152%" height="15" fill="rgb(237,94,26)" fg:x="504" fg:w="6"/><text x="1.5240%" y="223.50"></text></g><g><title>clock_gettime (5 samples, 0.01%)</title><rect x="1.2765%" y="197" width="0.0126%" height="15" fill="rgb(246,151,37)" fg:x="505" fg:w="5"/><text x="1.5265%" y="207.50"></text></g><g><title>clock_gettime_nsec_np (5 samples, 0.01%)</title><rect x="1.2765%" y="181" width="0.0126%" height="15" fill="rgb(251,12,28)" fg:x="505" fg:w="5"/><text x="1.5265%" y="191.50"></text></g><g><title>mach_absolute_time (5 samples, 0.01%)</title><rect x="1.2765%" y="165" width="0.0126%" height="15" fill="rgb(226,185,10)" fg:x="505" fg:w="5"/><text x="1.5265%" y="175.50"></text></g><g><title>__psynch_cvwait (575 samples, 1.45%)</title><rect x="1.4636%" y="181" width="1.4535%" height="15" fill="rgb(238,95,5)" fg:x="579" fg:w="575"/><text x="1.7136%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.02%)</title><rect x="2.9196%" y="181" width="0.0152%" height="15" fill="rgb(245,182,31)" fg:x="1155" fg:w="6"/><text x="3.1696%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (6 samples, 0.02%)</title><rect x="2.9196%" y="165" width="0.0152%" height="15" fill="rgb(223,122,28)" fg:x="1155" fg:w="6"/><text x="3.1696%" y="175.50"></text></g><g><title>__psynch_mutexwait (6 samples, 0.02%)</title><rect x="2.9196%" y="149" width="0.0152%" height="15" fill="rgb(212,49,40)" fg:x="1155" fg:w="6"/><text x="3.1696%" y="159.50"></text></g><g><title>pthread_mutex_lock (5 samples, 0.01%)</title><rect x="2.9348%" y="181" width="0.0126%" height="15" fill="rgb(208,75,8)" fg:x="1161" fg:w="5"/><text x="3.1848%" y="191.50"></text></g><g><title>_pthread_cond_wait (602 samples, 1.52%)</title><rect x="1.4459%" y="197" width="1.5217%" height="15" fill="rgb(223,125,3)" fg:x="572" fg:w="602"/><text x="1.6959%" y="207.50"></text></g><g><title>pthread_testcancel (8 samples, 0.02%)</title><rect x="2.9474%" y="181" width="0.0202%" height="15" fill="rgb(235,154,26)" fg:x="1166" fg:w="8"/><text x="3.1974%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (617 samples, 1.56%)</title><rect x="1.4181%" y="213" width="1.5597%" height="15" fill="rgb(237,57,41)" fg:x="561" fg:w="617"/><text x="1.6681%" y="223.50"></text></g><g><title>mach_absolute_time (41 samples, 0.10%)</title><rect x="3.0233%" y="149" width="0.1036%" height="15" fill="rgb(226,185,10)" fg:x="1196" fg:w="41"/><text x="3.2733%" y="159.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (50 samples, 0.13%)</title><rect x="3.0081%" y="197" width="0.1264%" height="15" fill="rgb(237,94,26)" fg:x="1190" fg:w="50"/><text x="3.2581%" y="207.50"></text></g><g><title>clock_gettime (50 samples, 0.13%)</title><rect x="3.0081%" y="181" width="0.1264%" height="15" fill="rgb(246,151,37)" fg:x="1190" fg:w="50"/><text x="3.2581%" y="191.50"></text></g><g><title>clock_gettime_nsec_np (49 samples, 0.12%)</title><rect x="3.0106%" y="165" width="0.1239%" height="15" fill="rgb(251,12,28)" fg:x="1191" fg:w="49"/><text x="3.2606%" y="175.50"></text></g><g><title>std::time::Instant::duration_since (4 samples, 0.01%)</title><rect x="3.1345%" y="197" width="0.0101%" height="15" fill="rgb(253,46,32)" fg:x="1240" fg:w="4"/><text x="3.3845%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (4 samples, 0.01%)</title><rect x="3.1345%" y="181" width="0.0101%" height="15" fill="rgb(231,110,18)" fg:x="1240" fg:w="4"/><text x="3.3845%" y="191.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (8 samples, 0.02%)</title><rect x="3.1471%" y="197" width="0.0202%" height="15" fill="rgb(231,124,28)" fg:x="1245" fg:w="8"/><text x="3.3971%" y="207.50"></text></g><g><title>mio::poll::Poll::poll (957 samples, 2.42%)</title><rect x="3.2609%" y="181" width="2.4191%" height="15" fill="rgb(231,221,3)" fg:x="1290" fg:w="957"/><text x="3.5109%" y="191.50">mi..</text></g><g><title>kevent (950 samples, 2.40%)</title><rect x="3.2786%" y="165" width="2.4014%" height="15" fill="rgb(208,215,22)" fg:x="1297" fg:w="950"/><text x="3.5286%" y="175.50">ke..</text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="5.8468%" y="117" width="0.0101%" height="15" fill="rgb(226,77,8)" fg:x="2313" fg:w="4"/><text x="6.0968%" y="127.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (29 samples, 0.07%)</title><rect x="5.8569%" y="117" width="0.0733%" height="15" fill="rgb(253,102,50)" fg:x="2317" fg:w="29"/><text x="6.1069%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (17 samples, 0.04%)</title><rect x="5.8873%" y="101" width="0.0430%" height="15" fill="rgb(233,50,29)" fg:x="2329" fg:w="17"/><text x="6.1373%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (50 samples, 0.13%)</title><rect x="5.8089%" y="149" width="0.1264%" height="15" fill="rgb(234,212,42)" fg:x="2298" fg:w="50"/><text x="6.0589%" y="159.50"></text></g><g><title>tokio::runtime::context::with_scheduler (44 samples, 0.11%)</title><rect x="5.8241%" y="133" width="0.1112%" height="15" fill="rgb(250,108,42)" fg:x="2304" fg:w="44"/><text x="6.0741%" y="143.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1,118 samples, 2.83%)</title><rect x="3.1673%" y="197" width="2.8261%" height="15" fill="rgb(252,67,46)" fg:x="1253" fg:w="1118"/><text x="3.4173%" y="207.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (124 samples, 0.31%)</title><rect x="5.6800%" y="181" width="0.3134%" height="15" fill="rgb(251,75,10)" fg:x="2247" fg:w="124"/><text x="5.9300%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (85 samples, 0.21%)</title><rect x="5.7786%" y="165" width="0.2149%" height="15" fill="rgb(252,227,42)" fg:x="2286" fg:w="85"/><text x="6.0286%" y="175.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (20 samples, 0.05%)</title><rect x="5.9429%" y="149" width="0.0506%" height="15" fill="rgb(244,98,3)" fg:x="2351" fg:w="20"/><text x="6.1929%" y="159.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1,199 samples, 3.03%)</title><rect x="2.9803%" y="213" width="3.0308%" height="15" fill="rgb(219,142,27)" fg:x="1179" fg:w="1199"/><text x="3.2303%" y="223.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1,878 samples, 4.75%)</title><rect x="1.2917%" y="229" width="4.7472%" height="15" fill="rgb(222,165,18)" fg:x="511" fg:w="1878"/><text x="1.5417%" y="239.50">tokio:..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (11 samples, 0.03%)</title><rect x="6.0111%" y="213" width="0.0278%" height="15" fill="rgb(212,46,11)" fg:x="2378" fg:w="11"/><text x="6.2611%" y="223.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (5 samples, 0.01%)</title><rect x="6.0263%" y="197" width="0.0126%" height="15" fill="rgb(252,61,7)" fg:x="2384" fg:w="5"/><text x="6.2763%" y="207.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.01%)</title><rect x="6.0288%" y="181" width="0.0101%" height="15" fill="rgb(252,219,36)" fg:x="2385" fg:w="4"/><text x="6.2788%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (4 samples, 0.01%)</title><rect x="6.0415%" y="229" width="0.0101%" height="15" fill="rgb(217,190,49)" fg:x="2390" fg:w="4"/><text x="6.2915%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (106 samples, 0.27%)</title><rect x="6.0592%" y="197" width="0.2679%" height="15" fill="rgb(231,221,3)" fg:x="2397" fg:w="106"/><text x="6.3092%" y="207.50"></text></g><g><title>kevent (106 samples, 0.27%)</title><rect x="6.0592%" y="181" width="0.2679%" height="15" fill="rgb(208,215,22)" fg:x="2397" fg:w="106"/><text x="6.3092%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (9 samples, 0.02%)</title><rect x="6.3650%" y="165" width="0.0228%" height="15" fill="rgb(234,212,42)" fg:x="2518" fg:w="9"/><text x="6.6150%" y="175.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 0.02%)</title><rect x="6.3675%" y="149" width="0.0202%" height="15" fill="rgb(250,108,42)" fg:x="2519" fg:w="8"/><text x="6.6175%" y="159.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (136 samples, 0.34%)</title><rect x="6.0516%" y="229" width="0.3438%" height="15" fill="rgb(219,142,27)" fg:x="2394" fg:w="136"/><text x="6.3016%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (136 samples, 0.34%)</title><rect x="6.0516%" y="213" width="0.3438%" height="15" fill="rgb(252,67,46)" fg:x="2394" fg:w="136"/><text x="6.3016%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (27 samples, 0.07%)</title><rect x="6.3271%" y="197" width="0.0683%" height="15" fill="rgb(251,75,10)" fg:x="2503" fg:w="27"/><text x="6.5771%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 0.03%)</title><rect x="6.3650%" y="181" width="0.0303%" height="15" fill="rgb(252,227,42)" fg:x="2518" fg:w="12"/><text x="6.6150%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (2,099 samples, 5.31%)</title><rect x="1.0971%" y="245" width="5.3059%" height="15" fill="rgb(244,9,18)" fg:x="434" fg:w="2099"/><text x="1.3471%" y="255.50">tokio:..</text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="6.4914%" y="229" width="0.0101%" height="15" fill="rgb(226,77,8)" fg:x="2568" fg:w="4"/><text x="6.7414%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (4 samples, 0.01%)</title><rect x="6.5293%" y="213" width="0.0101%" height="15" fill="rgb(246,212,26)" fg:x="2583" fg:w="4"/><text x="6.7793%" y="223.50"></text></g><g><title>__psynch_cvsignal (270 samples, 0.68%)</title><rect x="6.5571%" y="197" width="0.6825%" height="15" fill="rgb(248,136,42)" fg:x="2594" fg:w="270"/><text x="6.8071%" y="207.50"></text></g><g><title>pthread_cond_signal (279 samples, 0.71%)</title><rect x="6.5394%" y="213" width="0.7053%" height="15" fill="rgb(214,44,32)" fg:x="2587" fg:w="279"/><text x="6.7894%" y="223.50"></text></g><g><title>mach_absolute_time (22 samples, 0.06%)</title><rect x="7.2523%" y="165" width="0.0556%" height="15" fill="rgb(226,185,10)" fg:x="2869" fg:w="22"/><text x="7.5023%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (320 samples, 0.81%)</title><rect x="6.5015%" y="229" width="0.8089%" height="15" fill="rgb(221,89,13)" fg:x="2572" fg:w="320"/><text x="6.7515%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (24 samples, 0.06%)</title><rect x="7.2497%" y="213" width="0.0607%" height="15" fill="rgb(237,94,26)" fg:x="2868" fg:w="24"/><text x="7.4997%" y="223.50"></text></g><g><title>clock_gettime (24 samples, 0.06%)</title><rect x="7.2497%" y="197" width="0.0607%" height="15" fill="rgb(246,151,37)" fg:x="2868" fg:w="24"/><text x="7.4997%" y="207.50"></text></g><g><title>clock_gettime_nsec_np (24 samples, 0.06%)</title><rect x="7.2497%" y="181" width="0.0607%" height="15" fill="rgb(251,12,28)" fg:x="2868" fg:w="24"/><text x="7.4997%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (4 samples, 0.01%)</title><rect x="7.3129%" y="229" width="0.0101%" height="15" fill="rgb(205,37,19)" fg:x="2893" fg:w="4"/><text x="7.5629%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (5 samples, 0.01%)</title><rect x="7.3231%" y="229" width="0.0126%" height="15" fill="rgb(217,190,49)" fg:x="2897" fg:w="5"/><text x="7.5731%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.01%)</title><rect x="7.3357%" y="229" width="0.0101%" height="15" fill="rgb(244,44,31)" fg:x="2902" fg:w="4"/><text x="7.5857%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (5 samples, 0.01%)</title><rect x="7.3483%" y="213" width="0.0126%" height="15" fill="rgb(238,69,32)" fg:x="2907" fg:w="5"/><text x="7.5983%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (17 samples, 0.04%)</title><rect x="7.3458%" y="229" width="0.0430%" height="15" fill="rgb(247,157,24)" fg:x="2906" fg:w="17"/><text x="7.5958%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (11 samples, 0.03%)</title><rect x="7.3610%" y="213" width="0.0278%" height="15" fill="rgb(206,157,30)" fg:x="2912" fg:w="11"/><text x="7.6110%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.01%)</title><rect x="7.3888%" y="229" width="0.0101%" height="15" fill="rgb(212,45,22)" fg:x="2923" fg:w="4"/><text x="7.6388%" y="239.50"></text></g><g><title>0x1026895df (5 samples, 0.01%)</title><rect x="7.4039%" y="213" width="0.0126%" height="15" fill="rgb(215,74,17)" fg:x="2929" fg:w="5"/><text x="7.6539%" y="223.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (5 samples, 0.01%)</title><rect x="7.4039%" y="197" width="0.0126%" height="15" fill="rgb(209,16,8)" fg:x="2929" fg:w="5"/><text x="7.6539%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.05%)</title><rect x="7.8438%" y="181" width="0.0480%" height="15" fill="rgb(245,132,34)" fg:x="3103" fg:w="19"/><text x="8.0938%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (24 samples, 0.06%)</title><rect x="7.8994%" y="181" width="0.0607%" height="15" fill="rgb(246,75,33)" fg:x="3125" fg:w="24"/><text x="8.1494%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (9 samples, 0.02%)</title><rect x="8.0030%" y="149" width="0.0228%" height="15" fill="rgb(246,75,33)" fg:x="3166" fg:w="9"/><text x="8.2530%" y="159.50"></text></g><g><title>_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="8.0410%" y="149" width="0.0228%" height="15" fill="rgb(227,101,24)" fg:x="3181" fg:w="9"/><text x="8.2910%" y="159.50"></text></g><g><title>_platform_memmove (9 samples, 0.02%)</title><rect x="8.0637%" y="149" width="0.0228%" height="15" fill="rgb(229,3,50)" fg:x="3190" fg:w="9"/><text x="8.3137%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (9 samples, 0.02%)</title><rect x="8.0865%" y="149" width="0.0228%" height="15" fill="rgb(214,103,16)" fg:x="3199" fg:w="9"/><text x="8.3365%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (79 samples, 0.20%)</title><rect x="8.1092%" y="149" width="0.1997%" height="15" fill="rgb(230,62,6)" fg:x="3208" fg:w="79"/><text x="8.3592%" y="159.50"></text></g><g><title>&lt;resp::value::Value as core::clone::Clone&gt;::clone (142 samples, 0.36%)</title><rect x="7.9601%" y="181" width="0.3589%" height="15" fill="rgb(210,191,4)" fg:x="3149" fg:w="142"/><text x="8.2101%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (129 samples, 0.33%)</title><rect x="7.9929%" y="165" width="0.3261%" height="15" fill="rgb(251,65,42)" fg:x="3162" fg:w="129"/><text x="8.2429%" y="175.50"></text></g><g><title>DYLD-STUB$$free (7 samples, 0.02%)</title><rect x="8.3342%" y="181" width="0.0177%" height="15" fill="rgb(231,148,5)" fg:x="3297" fg:w="7"/><text x="8.5842%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (5 samples, 0.01%)</title><rect x="8.3569%" y="181" width="0.0126%" height="15" fill="rgb(254,82,43)" fg:x="3306" fg:w="5"/><text x="8.6069%" y="191.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (5 samples, 0.01%)</title><rect x="8.3923%" y="181" width="0.0126%" height="15" fill="rgb(223,97,51)" fg:x="3320" fg:w="5"/><text x="8.6423%" y="191.50"></text></g><g><title>_free (58 samples, 0.15%)</title><rect x="8.4050%" y="181" width="0.1466%" height="15" fill="rgb(243,145,5)" fg:x="3325" fg:w="58"/><text x="8.6550%" y="191.50"></text></g><g><title>_malloc_zone_calloc (9 samples, 0.02%)</title><rect x="8.5516%" y="181" width="0.0228%" height="15" fill="rgb(222,126,1)" fg:x="3383" fg:w="9"/><text x="8.8016%" y="191.50"></text></g><g><title>_malloc_zone_malloc (26 samples, 0.07%)</title><rect x="8.5743%" y="181" width="0.0657%" height="15" fill="rgb(227,101,24)" fg:x="3392" fg:w="26"/><text x="8.8243%" y="191.50"></text></g><g><title>_platform_memmove (86 samples, 0.22%)</title><rect x="8.6400%" y="181" width="0.2174%" height="15" fill="rgb(229,3,50)" fg:x="3418" fg:w="86"/><text x="8.8900%" y="191.50"></text></g><g><title>_xzm_chunk_batch_list_push (5 samples, 0.01%)</title><rect x="8.8574%" y="181" width="0.0126%" height="15" fill="rgb(221,187,26)" fg:x="3504" fg:w="5"/><text x="9.1074%" y="191.50"></text></g><g><title>_xzm_chunk_list_slot_push (30 samples, 0.08%)</title><rect x="8.8701%" y="181" width="0.0758%" height="15" fill="rgb(210,201,6)" fg:x="3509" fg:w="30"/><text x="9.1201%" y="191.50"></text></g><g><title>_xzm_chunk_list_push (13 samples, 0.03%)</title><rect x="8.9130%" y="165" width="0.0329%" height="15" fill="rgb(234,189,1)" fg:x="3526" fg:w="13"/><text x="9.1630%" y="175.50"></text></g><g><title>__bzero (5 samples, 0.01%)</title><rect x="9.6613%" y="165" width="0.0126%" height="15" fill="rgb(226,151,36)" fg:x="3822" fg:w="5"/><text x="9.9113%" y="175.50"></text></g><g><title>_platform_memset (59 samples, 0.15%)</title><rect x="9.6739%" y="165" width="0.1491%" height="15" fill="rgb(217,168,42)" fg:x="3827" fg:w="59"/><text x="9.9239%" y="175.50"></text></g><g><title>_xzm_free (432 samples, 1.09%)</title><rect x="8.9459%" y="181" width="1.0920%" height="15" fill="rgb(211,172,22)" fg:x="3539" fg:w="432"/><text x="9.1959%" y="191.50"></text></g><g><title>mach_absolute_time (85 samples, 0.21%)</title><rect x="9.8231%" y="165" width="0.2149%" height="15" fill="rgb(226,185,10)" fg:x="3886" fg:w="85"/><text x="10.0731%" y="175.50"></text></g><g><title>_xzm_free_outlined (14 samples, 0.04%)</title><rect x="10.0379%" y="181" width="0.0354%" height="15" fill="rgb(226,131,50)" fg:x="3971" fg:w="14"/><text x="10.2879%" y="191.50"></text></g><g><title>_xzm_malloc_zone_malloc_type_calloc_entry (12 samples, 0.03%)</title><rect x="10.0733%" y="181" width="0.0303%" height="15" fill="rgb(211,57,53)" fg:x="3985" fg:w="12"/><text x="10.3233%" y="191.50"></text></g><g><title>_xzm_xzone_free_freelist (39 samples, 0.10%)</title><rect x="10.1062%" y="181" width="0.0986%" height="15" fill="rgb(206,184,17)" fg:x="3998" fg:w="39"/><text x="10.3562%" y="191.50"></text></g><g><title>mach_absolute_time (19 samples, 0.05%)</title><rect x="10.1567%" y="165" width="0.0480%" height="15" fill="rgb(226,185,10)" fg:x="4018" fg:w="19"/><text x="10.4067%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (23 samples, 0.06%)</title><rect x="10.2048%" y="181" width="0.0581%" height="15" fill="rgb(214,103,16)" fg:x="4037" fg:w="23"/><text x="10.4548%" y="191.50"></text></g><g><title>__ulock_wait (9 samples, 0.02%)</title><rect x="10.2856%" y="165" width="0.0228%" height="15" fill="rgb(243,158,53)" fg:x="4069" fg:w="9"/><text x="10.5356%" y="175.50"></text></g><g><title>__ulock_wake (10 samples, 0.03%)</title><rect x="10.3084%" y="165" width="0.0253%" height="15" fill="rgb(244,158,49)" fg:x="4078" fg:w="10"/><text x="10.5584%" y="175.50"></text></g><g><title>_xzm_chunk_list_pop (4 samples, 0.01%)</title><rect x="10.3665%" y="149" width="0.0101%" height="15" fill="rgb(246,33,33)" fg:x="4101" fg:w="4"/><text x="10.6165%" y="159.50"></text></g><g><title>_xzm_xzone_find_and_malloc_from_freelist_chunk (35 samples, 0.09%)</title><rect x="10.3387%" y="165" width="0.0885%" height="15" fill="rgb(232,111,6)" fg:x="4090" fg:w="35"/><text x="10.5887%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_from_freelist_chunk (20 samples, 0.05%)</title><rect x="10.3766%" y="149" width="0.0506%" height="15" fill="rgb(241,176,45)" fg:x="4105" fg:w="20"/><text x="10.6266%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (80 samples, 0.20%)</title><rect x="10.2629%" y="181" width="0.2022%" height="15" fill="rgb(236,1,49)" fg:x="4060" fg:w="80"/><text x="10.5129%" y="191.50"></text></g><g><title>_xzm_xzone_malloc_from_freelist_chunk (15 samples, 0.04%)</title><rect x="10.4272%" y="165" width="0.0379%" height="15" fill="rgb(241,176,45)" fg:x="4125" fg:w="15"/><text x="10.6772%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_small_freelist (30 samples, 0.08%)</title><rect x="10.4651%" y="181" width="0.0758%" height="15" fill="rgb(222,86,11)" fg:x="4140" fg:w="30"/><text x="10.7151%" y="191.50"></text></g><g><title>_xzm_xzone_malloc_tiny (62 samples, 0.16%)</title><rect x="10.5410%" y="181" width="0.1567%" height="15" fill="rgb(230,62,6)" fg:x="4170" fg:w="62"/><text x="10.7910%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="10.6977%" y="165" width="0.0101%" height="15" fill="rgb(246,75,33)" fg:x="4232" fg:w="4"/><text x="10.9477%" y="175.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="10.7128%" y="165" width="0.0101%" height="15" fill="rgb(227,101,24)" fg:x="4238" fg:w="4"/><text x="10.9628%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (9 samples, 0.02%)</title><rect x="10.7230%" y="165" width="0.0228%" height="15" fill="rgb(214,103,16)" fg:x="4242" fg:w="9"/><text x="10.9730%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_tiny (31 samples, 0.08%)</title><rect x="10.7508%" y="165" width="0.0784%" height="15" fill="rgb(230,62,6)" fg:x="4253" fg:w="31"/><text x="11.0008%" y="175.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.13%)</title><rect x="10.6977%" y="181" width="0.1340%" height="15" fill="rgb(253,135,41)" fg:x="4232" fg:w="53"/><text x="10.9477%" y="191.50"></text></g><g><title>_xzm_free (5 samples, 0.01%)</title><rect x="10.8392%" y="165" width="0.0126%" height="15" fill="rgb(211,172,22)" fg:x="4288" fg:w="5"/><text x="11.0892%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="10.8316%" y="181" width="0.0253%" height="15" fill="rgb(227,15,28)" fg:x="4285" fg:w="10"/><text x="11.0816%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="10.8595%" y="149" width="0.0152%" height="15" fill="rgb(246,75,33)" fg:x="4296" fg:w="6"/><text x="11.1095%" y="159.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="10.8797%" y="149" width="0.0101%" height="15" fill="rgb(227,101,24)" fg:x="4304" fg:w="4"/><text x="11.1297%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (64 samples, 0.16%)</title><rect x="10.8974%" y="149" width="0.1618%" height="15" fill="rgb(230,62,6)" fg:x="4311" fg:w="64"/><text x="11.1474%" y="159.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 0.20%)</title><rect x="10.8595%" y="165" width="0.2022%" height="15" fill="rgb(253,135,41)" fg:x="4296" fg:w="80"/><text x="11.1095%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="11.0693%" y="165" width="0.0101%" height="15" fill="rgb(235,15,45)" fg:x="4379" fg:w="4"/><text x="11.3193%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 0.22%)</title><rect x="10.8595%" y="181" width="0.2224%" height="15" fill="rgb(224,194,14)" fg:x="4296" fg:w="88"/><text x="11.1095%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.02%)</title><rect x="11.0920%" y="149" width="0.0202%" height="15" fill="rgb(246,75,33)" fg:x="4388" fg:w="8"/><text x="11.3420%" y="159.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="11.1148%" y="149" width="0.0101%" height="15" fill="rgb(227,101,24)" fg:x="4397" fg:w="4"/><text x="11.3648%" y="159.50"></text></g><g><title>_xzm_free (4 samples, 0.01%)</title><rect x="11.1527%" y="117" width="0.0101%" height="15" fill="rgb(211,172,22)" fg:x="4412" fg:w="4"/><text x="11.4027%" y="127.50"></text></g><g><title>_xzm_free (25 samples, 0.06%)</title><rect x="11.1957%" y="101" width="0.0632%" height="15" fill="rgb(211,172,22)" fg:x="4429" fg:w="25"/><text x="11.4457%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="11.2588%" y="101" width="0.0152%" height="15" fill="rgb(214,103,16)" fg:x="4454" fg:w="6"/><text x="11.5088%" y="111.50"></text></g><g><title>_xzm_chunk_list_pop (6 samples, 0.02%)</title><rect x="11.3119%" y="69" width="0.0152%" height="15" fill="rgb(246,33,33)" fg:x="4475" fg:w="6"/><text x="11.5619%" y="79.50"></text></g><g><title>_xzm_xzone_find_and_malloc_from_freelist_chunk (12 samples, 0.03%)</title><rect x="11.3018%" y="85" width="0.0303%" height="15" fill="rgb(232,111,6)" fg:x="4471" fg:w="12"/><text x="11.5518%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (29 samples, 0.07%)</title><rect x="11.2740%" y="101" width="0.0733%" height="15" fill="rgb(236,1,49)" fg:x="4460" fg:w="29"/><text x="11.5240%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_from_freelist_chunk (6 samples, 0.02%)</title><rect x="11.3322%" y="85" width="0.0152%" height="15" fill="rgb(241,176,45)" fg:x="4483" fg:w="6"/><text x="11.5822%" y="95.50"></text></g><g><title>_malloc_zone_realloc (137 samples, 0.35%)</title><rect x="11.1350%" y="133" width="0.3463%" height="15" fill="rgb(206,76,7)" fg:x="4405" fg:w="137"/><text x="11.3850%" y="143.50"></text></g><g><title>xzm_realloc (122 samples, 0.31%)</title><rect x="11.1729%" y="117" width="0.3084%" height="15" fill="rgb(240,178,36)" fg:x="4420" fg:w="122"/><text x="11.4229%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (53 samples, 0.13%)</title><rect x="11.3473%" y="101" width="0.1340%" height="15" fill="rgb(230,62,6)" fg:x="4489" fg:w="53"/><text x="11.5973%" y="111.50"></text></g><g><title>xzm_malloc_zone_size (17 samples, 0.04%)</title><rect x="11.4813%" y="133" width="0.0430%" height="15" fill="rgb(240,58,39)" fg:x="4542" fg:w="17"/><text x="11.7313%" y="143.50"></text></g><g><title>_realloc (160 samples, 0.40%)</title><rect x="11.1249%" y="149" width="0.4044%" height="15" fill="rgb(248,188,4)" fg:x="4401" fg:w="160"/><text x="11.3749%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (16 samples, 0.04%)</title><rect x="11.5293%" y="149" width="0.0404%" height="15" fill="rgb(214,103,16)" fg:x="4561" fg:w="16"/><text x="11.7793%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (25 samples, 0.06%)</title><rect x="11.5698%" y="149" width="0.0632%" height="15" fill="rgb(230,62,6)" fg:x="4577" fg:w="25"/><text x="11.8198%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (219 samples, 0.55%)</title><rect x="11.0844%" y="181" width="0.5536%" height="15" fill="rgb(241,80,18)" fg:x="4385" fg:w="219"/><text x="11.3344%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (218 samples, 0.55%)</title><rect x="11.0870%" y="165" width="0.5511%" height="15" fill="rgb(237,133,22)" fg:x="4386" fg:w="218"/><text x="11.3370%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4 samples, 0.01%)</title><rect x="11.6380%" y="181" width="0.0101%" height="15" fill="rgb(215,214,9)" fg:x="4604" fg:w="4"/><text x="11.8880%" y="191.50"></text></g><g><title>codecrafters_redis::network::server::extract_command (15 samples, 0.04%)</title><rect x="11.7998%" y="165" width="0.0379%" height="15" fill="rgb(239,143,12)" fg:x="4668" fg:w="15"/><text x="12.0498%" y="175.50"></text></g><g><title>&lt;codecrafters_redis::types::Command as core::str::traits::FromStr&gt;::from_str (7 samples, 0.02%)</title><rect x="11.8200%" y="149" width="0.0177%" height="15" fill="rgb(210,163,43)" fg:x="4676" fg:w="7"/><text x="12.0700%" y="159.50"></text></g><g><title>_platform_memmove (144 samples, 0.36%)</title><rect x="12.0349%" y="133" width="0.3640%" height="15" fill="rgb(229,3,50)" fg:x="4761" fg:w="144"/><text x="12.2849%" y="143.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="12.4292%" y="101" width="0.0152%" height="15" fill="rgb(227,101,24)" fg:x="4917" fg:w="6"/><text x="12.6792%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="12.4444%" y="101" width="0.0152%" height="15" fill="rgb(214,103,16)" fg:x="4923" fg:w="6"/><text x="12.6944%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (75 samples, 0.19%)</title><rect x="12.4596%" y="101" width="0.1896%" height="15" fill="rgb(230,62,6)" fg:x="4929" fg:w="75"/><text x="12.7096%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (252 samples, 0.64%)</title><rect x="12.0147%" y="149" width="0.6370%" height="15" fill="rgb(237,176,18)" fg:x="4753" fg:w="252"/><text x="12.2647%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (100 samples, 0.25%)</title><rect x="12.3989%" y="133" width="0.2528%" height="15" fill="rgb(233,212,1)" fg:x="4905" fg:w="100"/><text x="12.6489%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (96 samples, 0.24%)</title><rect x="12.4090%" y="117" width="0.2427%" height="15" fill="rgb(237,133,22)" fg:x="4909" fg:w="96"/><text x="12.6590%" y="127.50"></text></g><g><title>_platform_memcmp (123 samples, 0.31%)</title><rect x="33.3847%" y="117" width="0.3109%" height="15" fill="rgb(246,44,11)" fg:x="13207" fg:w="123"/><text x="33.6347%" y="127.50"></text></g><g><title>codecrafters_redis::data::db::Store::get (8,385 samples, 21.20%)</title><rect x="12.6542%" y="149" width="21.1957%" height="15" fill="rgb(228,160,30)" fg:x="5006" fg:w="8385"/><text x="12.9042%" y="159.50">codecrafters_redis::data::db::Sto..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (2,728 samples, 6.90%)</title><rect x="26.9540%" y="133" width="6.8959%" height="15" fill="rgb(213,213,46)" fg:x="10663" fg:w="2728"/><text x="27.2040%" y="143.50">&lt;dashmap:..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (61 samples, 0.15%)</title><rect x="33.6957%" y="117" width="0.1542%" height="15" fill="rgb(211,106,52)" fg:x="13330" fg:w="61"/><text x="33.9457%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.12%)</title><rect x="33.7260%" y="101" width="0.1239%" height="15" fill="rgb(236,225,40)" fg:x="13342" fg:w="49"/><text x="33.9760%" y="111.50"></text></g><g><title>codecrafters_redis::network::server::Server::process::_{{closure}} (8,768 samples, 22.16%)</title><rect x="11.6936%" y="181" width="22.1638%" height="15" fill="rgb(227,131,3)" fg:x="4626" fg:w="8768"/><text x="11.9436%" y="191.50">codecrafters_redis::network::server..</text></g><g><title>codecrafters_redis::network::server::handle_get (8,711 samples, 22.02%)</title><rect x="11.8377%" y="165" width="22.0197%" height="15" fill="rgb(220,129,50)" fg:x="4683" fg:w="8711"/><text x="12.0877%" y="175.50">codecrafters_redis::network::server..</text></g><g><title>core::intrinsics::unlikely (5 samples, 0.01%)</title><rect x="33.8574%" y="181" width="0.0126%" height="15" fill="rgb(209,190,26)" fg:x="13394" fg:w="5"/><text x="34.1074%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;codecrafters_redis::network::server::Connection::read_values::{{closure}}&gt; (27 samples, 0.07%)</title><rect x="33.8777%" y="181" width="0.0683%" height="15" fill="rgb(230,77,8)" fg:x="13402" fg:w="27"/><text x="34.1277%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;codecrafters_redis::network::server::Server::process::{{closure}}&gt; (8 samples, 0.02%)</title><rect x="33.9484%" y="181" width="0.0202%" height="15" fill="rgb(221,222,3)" fg:x="13430" fg:w="8"/><text x="34.1984%" y="191.50"></text></g><g><title>_free (14 samples, 0.04%)</title><rect x="33.9939%" y="165" width="0.0354%" height="15" fill="rgb(243,145,5)" fg:x="13448" fg:w="14"/><text x="34.2439%" y="175.50"></text></g><g><title>_xzm_free (55 samples, 0.14%)</title><rect x="34.0293%" y="165" width="0.1390%" height="15" fill="rgb(211,172,22)" fg:x="13462" fg:w="55"/><text x="34.2793%" y="175.50"></text></g><g><title>mach_absolute_time (15 samples, 0.04%)</title><rect x="34.1304%" y="149" width="0.0379%" height="15" fill="rgb(226,185,10)" fg:x="13502" fg:w="15"/><text x="34.3804%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;resp::value::Value&gt; (17 samples, 0.04%)</title><rect x="34.1684%" y="165" width="0.0430%" height="15" fill="rgb(246,159,31)" fg:x="13517" fg:w="17"/><text x="34.4184%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;resp::value::Value&gt; (97 samples, 0.25%)</title><rect x="33.9687%" y="181" width="0.2452%" height="15" fill="rgb(246,159,31)" fg:x="13438" fg:w="97"/><text x="34.2187%" y="191.50"></text></g><g><title>free (5 samples, 0.01%)</title><rect x="34.2139%" y="181" width="0.0126%" height="15" fill="rgb(226,114,54)" fg:x="13535" fg:w="5"/><text x="34.4639%" y="191.50"></text></g><g><title>malloc (7 samples, 0.02%)</title><rect x="34.2265%" y="181" width="0.0177%" height="15" fill="rgb(250,195,53)" fg:x="13540" fg:w="7"/><text x="34.4765%" y="191.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="34.3200%" y="149" width="0.0152%" height="15" fill="rgb(227,101,24)" fg:x="13577" fg:w="6"/><text x="34.5700%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (19 samples, 0.05%)</title><rect x="34.3377%" y="149" width="0.0480%" height="15" fill="rgb(230,62,6)" fg:x="13584" fg:w="19"/><text x="34.5877%" y="159.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.08%)</title><rect x="34.3099%" y="165" width="0.0809%" height="15" fill="rgb(253,135,41)" fg:x="13573" fg:w="32"/><text x="34.5599%" y="175.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.02%)</title><rect x="34.3959%" y="149" width="0.0152%" height="15" fill="rgb(231,148,5)" fg:x="13607" fg:w="6"/><text x="34.6459%" y="159.50"></text></g><g><title>_free (30 samples, 0.08%)</title><rect x="34.4186%" y="149" width="0.0758%" height="15" fill="rgb(243,145,5)" fg:x="13616" fg:w="30"/><text x="34.6686%" y="159.50"></text></g><g><title>_xzm_free (80 samples, 0.20%)</title><rect x="34.4944%" y="149" width="0.2022%" height="15" fill="rgb(211,172,22)" fg:x="13646" fg:w="80"/><text x="34.7444%" y="159.50"></text></g><g><title>mach_absolute_time (4 samples, 0.01%)</title><rect x="34.6866%" y="133" width="0.0101%" height="15" fill="rgb(226,185,10)" fg:x="13722" fg:w="4"/><text x="34.9366%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (125 samples, 0.32%)</title><rect x="34.3908%" y="165" width="0.3160%" height="15" fill="rgb(227,15,28)" fg:x="13605" fg:w="125"/><text x="34.6408%" y="175.50"></text></g><g><title>free (4 samples, 0.01%)</title><rect x="34.6967%" y="149" width="0.0101%" height="15" fill="rgb(226,114,54)" fg:x="13726" fg:w="4"/><text x="34.9467%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4 samples, 0.01%)</title><rect x="34.7144%" y="165" width="0.0101%" height="15" fill="rgb(237,144,15)" fg:x="13733" fg:w="4"/><text x="34.9644%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (4 samples, 0.01%)</title><rect x="34.7321%" y="149" width="0.0101%" height="15" fill="rgb(245,135,48)" fg:x="13740" fg:w="4"/><text x="34.9821%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="34.7422%" y="133" width="0.0177%" height="15" fill="rgb(246,75,33)" fg:x="13744" fg:w="7"/><text x="34.9922%" y="143.50"></text></g><g><title>_malloc_zone_malloc (12 samples, 0.03%)</title><rect x="34.7700%" y="133" width="0.0303%" height="15" fill="rgb(227,101,24)" fg:x="13755" fg:w="12"/><text x="35.0200%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (5 samples, 0.01%)</title><rect x="34.8003%" y="133" width="0.0126%" height="15" fill="rgb(214,103,16)" fg:x="13767" fg:w="5"/><text x="35.0503%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (38 samples, 0.10%)</title><rect x="34.8180%" y="133" width="0.0961%" height="15" fill="rgb(230,62,6)" fg:x="13774" fg:w="38"/><text x="35.0680%" y="143.50"></text></g><g><title>alloc::alloc::alloc (70 samples, 0.18%)</title><rect x="34.7422%" y="149" width="0.1769%" height="15" fill="rgb(253,135,41)" fg:x="13744" fg:w="70"/><text x="34.9922%" y="159.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec_in (88 samples, 0.22%)</title><rect x="34.7245%" y="165" width="0.2224%" height="15" fill="rgb(240,13,45)" fg:x="13737" fg:w="88"/><text x="34.9745%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (9 samples, 0.02%)</title><rect x="34.9242%" y="149" width="0.0228%" height="15" fill="rgb(209,27,20)" fg:x="13816" fg:w="9"/><text x="35.1742%" y="159.50"></text></g><g><title>_platform_memmove (9 samples, 0.02%)</title><rect x="34.9242%" y="133" width="0.0228%" height="15" fill="rgb(229,3,50)" fg:x="13816" fg:w="9"/><text x="35.1742%" y="143.50"></text></g><g><title>alloc::string::String::from_utf8 (4 samples, 0.01%)</title><rect x="34.9469%" y="165" width="0.0101%" height="15" fill="rgb(245,23,15)" fg:x="13825" fg:w="4"/><text x="35.1969%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (5 samples, 0.01%)</title><rect x="34.9570%" y="165" width="0.0126%" height="15" fill="rgb(249,199,35)" fg:x="13829" fg:w="5"/><text x="35.2070%" y="175.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_ascii_radix (8 samples, 0.02%)</title><rect x="34.9722%" y="165" width="0.0202%" height="15" fill="rgb(234,155,9)" fg:x="13835" fg:w="8"/><text x="35.2222%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (21 samples, 0.05%)</title><rect x="35.1365%" y="133" width="0.0531%" height="15" fill="rgb(246,75,33)" fg:x="13900" fg:w="21"/><text x="35.3865%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (14 samples, 0.04%)</title><rect x="35.1946%" y="133" width="0.0354%" height="15" fill="rgb(254,82,43)" fg:x="13923" fg:w="14"/><text x="35.4446%" y="143.50"></text></g><g><title>_malloc_zone_malloc (55 samples, 0.14%)</title><rect x="35.2300%" y="133" width="0.1390%" height="15" fill="rgb(227,101,24)" fg:x="13937" fg:w="55"/><text x="35.4800%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="35.3691%" y="133" width="0.0152%" height="15" fill="rgb(214,103,16)" fg:x="13992" fg:w="6"/><text x="35.6191%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (33 samples, 0.08%)</title><rect x="35.3842%" y="133" width="0.0834%" height="15" fill="rgb(230,62,6)" fg:x="13998" fg:w="33"/><text x="35.6342%" y="143.50"></text></g><g><title>alloc::alloc::alloc (143 samples, 0.36%)</title><rect x="35.1138%" y="149" width="0.3615%" height="15" fill="rgb(253,135,41)" fg:x="13891" fg:w="143"/><text x="35.3638%" y="159.50"></text></g><g><title>_free (11 samples, 0.03%)</title><rect x="35.4778%" y="133" width="0.0278%" height="15" fill="rgb(243,145,5)" fg:x="14035" fg:w="11"/><text x="35.7278%" y="143.50"></text></g><g><title>_xzm_free (13 samples, 0.03%)</title><rect x="35.5056%" y="133" width="0.0329%" height="15" fill="rgb(211,172,22)" fg:x="14046" fg:w="13"/><text x="35.7556%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.07%)</title><rect x="35.4752%" y="149" width="0.0683%" height="15" fill="rgb(227,15,28)" fg:x="14034" fg:w="27"/><text x="35.7252%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (5 samples, 0.01%)</title><rect x="35.5435%" y="149" width="0.0126%" height="15" fill="rgb(249,18,52)" fg:x="14061" fg:w="5"/><text x="35.7935%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.02%)</title><rect x="35.5637%" y="101" width="0.0152%" height="15" fill="rgb(246,75,33)" fg:x="14069" fg:w="6"/><text x="35.8137%" y="111.50"></text></g><g><title>_malloc_zone_malloc (10 samples, 0.03%)</title><rect x="35.5789%" y="101" width="0.0253%" height="15" fill="rgb(227,101,24)" fg:x="14075" fg:w="10"/><text x="35.8289%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="35.6041%" y="101" width="0.0152%" height="15" fill="rgb(214,103,16)" fg:x="14085" fg:w="6"/><text x="35.8541%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (68 samples, 0.17%)</title><rect x="35.5612%" y="133" width="0.1719%" height="15" fill="rgb(241,80,18)" fg:x="14068" fg:w="68"/><text x="35.8112%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (68 samples, 0.17%)</title><rect x="35.5612%" y="117" width="0.1719%" height="15" fill="rgb(237,133,22)" fg:x="14068" fg:w="68"/><text x="35.8112%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (45 samples, 0.11%)</title><rect x="35.6193%" y="101" width="0.1138%" height="15" fill="rgb(230,62,6)" fg:x="14091" fg:w="45"/><text x="35.8693%" y="111.50"></text></g><g><title>core::intrinsics::unlikely (4 samples, 0.01%)</title><rect x="35.7406%" y="133" width="0.0101%" height="15" fill="rgb(209,190,26)" fg:x="14139" fg:w="4"/><text x="35.9906%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (79 samples, 0.20%)</title><rect x="35.5586%" y="149" width="0.1997%" height="15" fill="rgb(216,76,46)" fg:x="14067" fg:w="79"/><text x="35.8086%" y="159.50"></text></g><g><title>alloc::string::String::from_utf8 (7 samples, 0.02%)</title><rect x="35.7583%" y="149" width="0.0177%" height="15" fill="rgb(245,23,15)" fg:x="14146" fg:w="7"/><text x="36.0083%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.02%)</title><rect x="35.7609%" y="133" width="0.0152%" height="15" fill="rgb(248,147,30)" fg:x="14147" fg:w="6"/><text x="36.0109%" y="143.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_ascii_radix (9 samples, 0.02%)</title><rect x="35.7887%" y="149" width="0.0228%" height="15" fill="rgb(234,155,9)" fg:x="14158" fg:w="9"/><text x="36.0387%" y="159.50"></text></g><g><title>core::ptr::copy_nonoverlapping (17 samples, 0.04%)</title><rect x="35.8140%" y="149" width="0.0430%" height="15" fill="rgb(209,27,20)" fg:x="14168" fg:w="17"/><text x="36.0640%" y="159.50"></text></g><g><title>_platform_memmove (15 samples, 0.04%)</title><rect x="35.8190%" y="133" width="0.0379%" height="15" fill="rgb(229,3,50)" fg:x="14170" fg:w="15"/><text x="36.0690%" y="143.50"></text></g><g><title>core::ptr::write (9 samples, 0.02%)</title><rect x="35.8569%" y="149" width="0.0228%" height="15" fill="rgb(209,143,44)" fg:x="14185" fg:w="9"/><text x="36.1069%" y="159.50"></text></g><g><title>_platform_memset (6 samples, 0.02%)</title><rect x="35.8645%" y="133" width="0.0152%" height="15" fill="rgb(217,168,42)" fg:x="14188" fg:w="6"/><text x="36.1145%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (6 samples, 0.02%)</title><rect x="35.8847%" y="149" width="0.0152%" height="15" fill="rgb(212,212,0)" fg:x="14196" fg:w="6"/><text x="36.1347%" y="159.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (357 samples, 0.90%)</title><rect x="35.0000%" y="165" width="0.9024%" height="15" fill="rgb(242,183,16)" fg:x="13846" fg:w="357"/><text x="35.2500%" y="175.50"></text></g><g><title>resp::serialize::parse_integer (6 samples, 0.02%)</title><rect x="35.9024%" y="165" width="0.0152%" height="15" fill="rgb(207,134,14)" fg:x="14203" fg:w="6"/><text x="36.1524%" y="175.50"></text></g><g><title>resp::serialize::parse_string (40 samples, 0.10%)</title><rect x="35.9176%" y="165" width="0.1011%" height="15" fill="rgb(227,103,23)" fg:x="14209" fg:w="40"/><text x="36.1676%" y="175.50"></text></g><g><title>alloc::string::String::from_utf8 (40 samples, 0.10%)</title><rect x="35.9176%" y="149" width="0.1011%" height="15" fill="rgb(245,23,15)" fg:x="14209" fg:w="40"/><text x="36.1676%" y="159.50"></text></g><g><title>core::str::converts::from_utf8 (40 samples, 0.10%)</title><rect x="35.9176%" y="133" width="0.1011%" height="15" fill="rgb(248,147,30)" fg:x="14209" fg:w="40"/><text x="36.1676%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (10 samples, 0.03%)</title><rect x="36.0465%" y="101" width="0.0253%" height="15" fill="rgb(246,75,33)" fg:x="14260" fg:w="10"/><text x="36.2965%" y="111.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="36.0743%" y="101" width="0.0152%" height="15" fill="rgb(227,101,24)" fg:x="14271" fg:w="6"/><text x="36.3243%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (5 samples, 0.01%)</title><rect x="36.0895%" y="101" width="0.0126%" height="15" fill="rgb(214,103,16)" fg:x="14277" fg:w="5"/><text x="36.3395%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_tiny (32 samples, 0.08%)</title><rect x="36.1021%" y="101" width="0.0809%" height="15" fill="rgb(230,62,6)" fg:x="14282" fg:w="32"/><text x="36.3521%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (60 samples, 0.15%)</title><rect x="36.0364%" y="133" width="0.1517%" height="15" fill="rgb(241,80,18)" fg:x="14256" fg:w="60"/><text x="36.2864%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (59 samples, 0.15%)</title><rect x="36.0389%" y="117" width="0.1491%" height="15" fill="rgb(237,133,22)" fg:x="14257" fg:w="59"/><text x="36.2889%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="36.1881%" y="133" width="0.0101%" height="15" fill="rgb(233,212,1)" fg:x="14316" fg:w="4"/><text x="36.4381%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (73 samples, 0.18%)</title><rect x="36.0288%" y="149" width="0.1845%" height="15" fill="rgb(216,76,46)" fg:x="14253" fg:w="73"/><text x="36.2788%" y="159.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="36.2184%" y="149" width="0.0177%" height="15" fill="rgb(209,27,20)" fg:x="14328" fg:w="7"/><text x="36.4684%" y="159.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="36.2209%" y="133" width="0.0152%" height="15" fill="rgb(229,3,50)" fg:x="14329" fg:w="6"/><text x="36.4709%" y="143.50"></text></g><g><title>core::slice::memchr::memchr (24 samples, 0.06%)</title><rect x="36.2361%" y="149" width="0.0607%" height="15" fill="rgb(217,73,38)" fg:x="14335" fg:w="24"/><text x="36.4861%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_aligned (22 samples, 0.06%)</title><rect x="36.2412%" y="133" width="0.0556%" height="15" fill="rgb(243,148,11)" fg:x="14337" fg:w="22"/><text x="36.4912%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (12 samples, 0.03%)</title><rect x="36.2968%" y="149" width="0.0303%" height="15" fill="rgb(246,87,35)" fg:x="14359" fg:w="12"/><text x="36.5468%" y="159.50"></text></g><g><title>std::io::BufRead::read_until (143 samples, 0.36%)</title><rect x="36.0187%" y="165" width="0.3615%" height="15" fill="rgb(210,43,53)" fg:x="14249" fg:w="143"/><text x="36.2687%" y="175.50"></text></g><g><title>std::io::read_until (21 samples, 0.05%)</title><rect x="36.3271%" y="149" width="0.0531%" height="15" fill="rgb(205,92,54)" fg:x="14371" fg:w="21"/><text x="36.5771%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (23 samples, 0.06%)</title><rect x="36.3953%" y="149" width="0.0581%" height="15" fill="rgb(246,75,33)" fg:x="14398" fg:w="23"/><text x="36.6453%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (4 samples, 0.01%)</title><rect x="36.4560%" y="149" width="0.0101%" height="15" fill="rgb(254,82,43)" fg:x="14422" fg:w="4"/><text x="36.7060%" y="159.50"></text></g><g><title>_malloc_zone_malloc (19 samples, 0.05%)</title><rect x="36.4737%" y="149" width="0.0480%" height="15" fill="rgb(227,101,24)" fg:x="14429" fg:w="19"/><text x="36.7237%" y="159.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="36.5217%" y="149" width="0.0177%" height="15" fill="rgb(229,3,50)" fg:x="14448" fg:w="7"/><text x="36.7717%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (12 samples, 0.03%)</title><rect x="36.5394%" y="149" width="0.0303%" height="15" fill="rgb(214,103,16)" fg:x="14455" fg:w="12"/><text x="36.7894%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (99 samples, 0.25%)</title><rect x="36.5698%" y="149" width="0.2503%" height="15" fill="rgb(230,62,6)" fg:x="14467" fg:w="99"/><text x="36.8198%" y="159.50"></text></g><g><title>std::io::error::Error::new (175 samples, 0.44%)</title><rect x="36.3802%" y="165" width="0.4424%" height="15" fill="rgb(228,148,18)" fg:x="14392" fg:w="175"/><text x="36.6302%" y="175.50"></text></g><g><title>resp::serialize::Decoder&lt;R&gt;::decode (1,021 samples, 2.58%)</title><rect x="34.2442%" y="181" width="2.5809%" height="15" fill="rgb(242,183,16)" fg:x="13547" fg:w="1021"/><text x="34.4942%" y="191.50">re..</text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="36.9262%" y="149" width="0.0177%" height="15" fill="rgb(246,75,33)" fg:x="14608" fg:w="7"/><text x="37.1762%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.01%)</title><rect x="36.9515%" y="149" width="0.0126%" height="15" fill="rgb(213,192,6)" fg:x="14618" fg:w="5"/><text x="37.2015%" y="159.50"></text></g><g><title>_free (12 samples, 0.03%)</title><rect x="36.9692%" y="149" width="0.0303%" height="15" fill="rgb(243,145,5)" fg:x="14625" fg:w="12"/><text x="37.2192%" y="159.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="36.9995%" y="149" width="0.0152%" height="15" fill="rgb(227,101,24)" fg:x="14637" fg:w="6"/><text x="37.2495%" y="159.50"></text></g><g><title>_platform_memmove (52 samples, 0.13%)</title><rect x="37.0147%" y="149" width="0.1314%" height="15" fill="rgb(229,3,50)" fg:x="14643" fg:w="52"/><text x="37.2647%" y="159.50"></text></g><g><title>_xzm_free (48 samples, 0.12%)</title><rect x="37.1461%" y="149" width="0.1213%" height="15" fill="rgb(211,172,22)" fg:x="14695" fg:w="48"/><text x="37.3961%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (5 samples, 0.01%)</title><rect x="37.2674%" y="149" width="0.0126%" height="15" fill="rgb(214,103,16)" fg:x="14743" fg:w="5"/><text x="37.5174%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (50 samples, 0.13%)</title><rect x="37.2801%" y="149" width="0.1264%" height="15" fill="rgb(230,62,6)" fg:x="14748" fg:w="50"/><text x="37.5301%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.01%)</title><rect x="37.4722%" y="117" width="0.0126%" height="15" fill="rgb(246,75,33)" fg:x="14824" fg:w="5"/><text x="37.7222%" y="127.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="37.4949%" y="117" width="0.0101%" height="15" fill="rgb(227,101,24)" fg:x="14833" fg:w="4"/><text x="37.7449%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (33 samples, 0.08%)</title><rect x="37.5101%" y="117" width="0.0834%" height="15" fill="rgb(230,62,6)" fg:x="14839" fg:w="33"/><text x="37.7601%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (75 samples, 0.19%)</title><rect x="37.4065%" y="149" width="0.1896%" height="15" fill="rgb(241,226,9)" fg:x="14798" fg:w="75"/><text x="37.6565%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (61 samples, 0.15%)</title><rect x="37.4419%" y="133" width="0.1542%" height="15" fill="rgb(237,133,22)" fg:x="14812" fg:w="61"/><text x="37.6919%" y="143.50"></text></g><g><title>_realloc (4 samples, 0.01%)</title><rect x="37.6188%" y="133" width="0.0101%" height="15" fill="rgb(248,188,4)" fg:x="14882" fg:w="4"/><text x="37.8688%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (14 samples, 0.04%)</title><rect x="37.8438%" y="69" width="0.0354%" height="15" fill="rgb(246,75,33)" fg:x="14971" fg:w="14"/><text x="38.0938%" y="79.50"></text></g><g><title>_platform_memmove (60 samples, 0.15%)</title><rect x="37.8817%" y="69" width="0.1517%" height="15" fill="rgb(229,3,50)" fg:x="14986" fg:w="60"/><text x="38.1317%" y="79.50"></text></g><g><title>_xzm_free (84 samples, 0.21%)</title><rect x="38.0334%" y="69" width="0.2123%" height="15" fill="rgb(211,172,22)" fg:x="15046" fg:w="84"/><text x="38.2834%" y="79.50"></text></g><g><title>mach_absolute_time (43 samples, 0.11%)</title><rect x="38.1370%" y="53" width="0.1087%" height="15" fill="rgb(226,185,10)" fg:x="15087" fg:w="43"/><text x="38.3870%" y="63.50"></text></g><g><title>_xzm_xzone_malloc (5 samples, 0.01%)</title><rect x="38.2457%" y="69" width="0.0126%" height="15" fill="rgb(214,103,16)" fg:x="15130" fg:w="5"/><text x="38.4957%" y="79.50"></text></g><g><title>_malloc_zone_realloc (263 samples, 0.66%)</title><rect x="37.7300%" y="101" width="0.6648%" height="15" fill="rgb(206,76,7)" fg:x="14926" fg:w="263"/><text x="37.9800%" y="111.50"></text></g><g><title>xzm_realloc (246 samples, 0.62%)</title><rect x="37.7730%" y="85" width="0.6218%" height="15" fill="rgb(240,178,36)" fg:x="14943" fg:w="246"/><text x="38.0230%" y="95.50"></text></g><g><title>_xzm_xzone_malloc_tiny (52 samples, 0.13%)</title><rect x="38.2634%" y="69" width="0.1314%" height="15" fill="rgb(230,62,6)" fg:x="15137" fg:w="52"/><text x="38.5134%" y="79.50"></text></g><g><title>xzm_malloc_zone_size (20 samples, 0.05%)</title><rect x="38.3948%" y="101" width="0.0506%" height="15" fill="rgb(240,58,39)" fg:x="15189" fg:w="20"/><text x="38.6448%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (338 samples, 0.85%)</title><rect x="37.5961%" y="149" width="0.8544%" height="15" fill="rgb(233,212,1)" fg:x="14873" fg:w="338"/><text x="37.8461%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (325 samples, 0.82%)</title><rect x="37.6289%" y="133" width="0.8215%" height="15" fill="rgb(237,133,22)" fg:x="14886" fg:w="325"/><text x="37.8789%" y="143.50"></text></g><g><title>_realloc (287 samples, 0.73%)</title><rect x="37.7250%" y="117" width="0.7255%" height="15" fill="rgb(248,188,4)" fg:x="14924" fg:w="287"/><text x="37.9750%" y="127.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (8 samples, 0.02%)</title><rect x="38.4505%" y="149" width="0.0202%" height="15" fill="rgb(210,54,8)" fg:x="15211" fg:w="8"/><text x="38.7005%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.01%)</title><rect x="38.5566%" y="133" width="0.0126%" height="15" fill="rgb(246,75,33)" fg:x="15253" fg:w="5"/><text x="38.8066%" y="143.50"></text></g><g><title>__rustc::__rdl_alloc (4 samples, 0.01%)</title><rect x="38.5819%" y="133" width="0.0101%" height="15" fill="rgb(254,82,43)" fg:x="15263" fg:w="4"/><text x="38.8319%" y="143.50"></text></g><g><title>_free (5 samples, 0.01%)</title><rect x="38.5945%" y="133" width="0.0126%" height="15" fill="rgb(243,145,5)" fg:x="15268" fg:w="5"/><text x="38.8445%" y="143.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="38.6072%" y="133" width="0.0152%" height="15" fill="rgb(227,101,24)" fg:x="15273" fg:w="6"/><text x="38.8572%" y="143.50"></text></g><g><title>_platform_memmove (20 samples, 0.05%)</title><rect x="38.6223%" y="133" width="0.0506%" height="15" fill="rgb(229,3,50)" fg:x="15279" fg:w="20"/><text x="38.8723%" y="143.50"></text></g><g><title>_xzm_free (11 samples, 0.03%)</title><rect x="38.6729%" y="133" width="0.0278%" height="15" fill="rgb(211,172,22)" fg:x="15299" fg:w="11"/><text x="38.9229%" y="143.50"></text></g><g><title>_xzm_xzone_malloc (8 samples, 0.02%)</title><rect x="38.7007%" y="133" width="0.0202%" height="15" fill="rgb(214,103,16)" fg:x="15310" fg:w="8"/><text x="38.9507%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (41 samples, 0.10%)</title><rect x="38.7209%" y="133" width="0.1036%" height="15" fill="rgb(230,62,6)" fg:x="15318" fg:w="41"/><text x="38.9709%" y="143.50"></text></g><g><title>default_zone_realloc (4 samples, 0.01%)</title><rect x="39.0344%" y="69" width="0.0101%" height="15" fill="rgb(242,10,41)" fg:x="15442" fg:w="4"/><text x="39.2844%" y="79.50"></text></g><g><title>xzm_malloc_zone_realloc (6 samples, 0.02%)</title><rect x="39.0445%" y="69" width="0.0152%" height="15" fill="rgb(237,131,9)" fg:x="15446" fg:w="6"/><text x="39.2945%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.01%)</title><rect x="39.2139%" y="53" width="0.0126%" height="15" fill="rgb(246,75,33)" fg:x="15513" fg:w="5"/><text x="39.4639%" y="63.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="39.2315%" y="53" width="0.0101%" height="15" fill="rgb(229,3,50)" fg:x="15520" fg:w="4"/><text x="39.4815%" y="63.50"></text></g><g><title>_xzm_free (103 samples, 0.26%)</title><rect x="39.2417%" y="53" width="0.2604%" height="15" fill="rgb(211,172,22)" fg:x="15524" fg:w="103"/><text x="39.4917%" y="63.50"></text></g><g><title>mach_absolute_time (43 samples, 0.11%)</title><rect x="39.3933%" y="37" width="0.1087%" height="15" fill="rgb(226,185,10)" fg:x="15584" fg:w="43"/><text x="39.6433%" y="47.50"></text></g><g><title>_xzm_xzone_malloc (6 samples, 0.02%)</title><rect x="39.5020%" y="53" width="0.0152%" height="15" fill="rgb(214,103,16)" fg:x="15627" fg:w="6"/><text x="39.7520%" y="63.50"></text></g><g><title>_malloc_zone_realloc (276 samples, 0.70%)</title><rect x="38.9813%" y="85" width="0.6977%" height="15" fill="rgb(206,76,7)" fg:x="15421" fg:w="276"/><text x="39.2313%" y="95.50"></text></g><g><title>xzm_realloc (245 samples, 0.62%)</title><rect x="39.0597%" y="69" width="0.6193%" height="15" fill="rgb(240,178,36)" fg:x="15452" fg:w="245"/><text x="39.3097%" y="79.50"></text></g><g><title>_xzm_xzone_malloc_tiny (64 samples, 0.16%)</title><rect x="39.5172%" y="53" width="0.1618%" height="15" fill="rgb(230,62,6)" fg:x="15633" fg:w="64"/><text x="39.7672%" y="63.50"></text></g><g><title>xzm_malloc_zone_size (43 samples, 0.11%)</title><rect x="39.6790%" y="85" width="0.1087%" height="15" fill="rgb(240,58,39)" fg:x="15697" fg:w="43"/><text x="39.9290%" y="95.50"></text></g><g><title>_realloc (341 samples, 0.86%)</title><rect x="38.9307%" y="101" width="0.8620%" height="15" fill="rgb(248,188,4)" fg:x="15401" fg:w="341"/><text x="39.1807%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (385 samples, 0.97%)</title><rect x="38.8246%" y="133" width="0.9732%" height="15" fill="rgb(233,212,1)" fg:x="15359" fg:w="385"/><text x="39.0746%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (360 samples, 0.91%)</title><rect x="38.8878%" y="117" width="0.9100%" height="15" fill="rgb(237,133,22)" fg:x="15384" fg:w="360"/><text x="39.1378%" y="127.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (10 samples, 0.03%)</title><rect x="39.8003%" y="133" width="0.0253%" height="15" fill="rgb(210,54,8)" fg:x="15745" fg:w="10"/><text x="40.0503%" y="143.50"></text></g><g><title>resp::value::Value::encode (1,188 samples, 3.00%)</title><rect x="36.8301%" y="181" width="3.0030%" height="15" fill="rgb(247,227,24)" fg:x="14570" fg:w="1188"/><text x="37.0801%" y="191.50">res..</text></g><g><title>resp::serialize::buf_encode (1,180 samples, 2.98%)</title><rect x="36.8504%" y="165" width="2.9828%" height="15" fill="rgb(250,49,43)" fg:x="14578" fg:w="1180"/><text x="37.1004%" y="175.50">res..</text></g><g><title>resp::serialize::buf_encode (538 samples, 1.36%)</title><rect x="38.4732%" y="149" width="1.3600%" height="15" fill="rgb(250,49,43)" fg:x="15220" fg:w="538"/><text x="38.7232%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="39.8332%" y="165" width="0.0101%" height="15" fill="rgb(228,6,24)" fg:x="15758" fg:w="4"/><text x="40.0832%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.01%)</title><rect x="39.8761%" y="117" width="0.0101%" height="15" fill="rgb(246,75,33)" fg:x="15775" fg:w="4"/><text x="40.1261%" y="127.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="39.8938%" y="117" width="0.0177%" height="15" fill="rgb(227,101,24)" fg:x="15782" fg:w="7"/><text x="40.1438%" y="127.50"></text></g><g><title>_xzm_xzone_malloc (5 samples, 0.01%)</title><rect x="39.9115%" y="117" width="0.0126%" height="15" fill="rgb(214,103,16)" fg:x="15789" fg:w="5"/><text x="40.1615%" y="127.50"></text></g><g><title>_xzm_xzone_malloc_tiny (26 samples, 0.07%)</title><rect x="39.9242%" y="117" width="0.0657%" height="15" fill="rgb(230,62,6)" fg:x="15794" fg:w="26"/><text x="40.1742%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (54 samples, 0.14%)</title><rect x="39.8559%" y="149" width="0.1365%" height="15" fill="rgb(241,80,18)" fg:x="15767" fg:w="54"/><text x="40.1059%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (54 samples, 0.14%)</title><rect x="39.8559%" y="133" width="0.1365%" height="15" fill="rgb(237,133,22)" fg:x="15767" fg:w="54"/><text x="40.1059%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (65 samples, 0.16%)</title><rect x="39.8509%" y="165" width="0.1643%" height="15" fill="rgb(216,76,46)" fg:x="15765" fg:w="65"/><text x="40.1009%" y="175.50"></text></g><g><title>core::cmp::Ord::min (17 samples, 0.04%)</title><rect x="40.0202%" y="165" width="0.0430%" height="15" fill="rgb(224,229,41)" fg:x="15832" fg:w="17"/><text x="40.2702%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (13 samples, 0.03%)</title><rect x="40.0632%" y="165" width="0.0329%" height="15" fill="rgb(209,27,20)" fg:x="15849" fg:w="13"/><text x="40.3132%" y="175.50"></text></g><g><title>_platform_memmove (11 samples, 0.03%)</title><rect x="40.0683%" y="149" width="0.0278%" height="15" fill="rgb(229,3,50)" fg:x="15851" fg:w="11"/><text x="40.3183%" y="159.50"></text></g><g><title>core::slice::memchr::memchr (12 samples, 0.03%)</title><rect x="40.0961%" y="165" width="0.0303%" height="15" fill="rgb(217,73,38)" fg:x="15862" fg:w="12"/><text x="40.3461%" y="175.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12 samples, 0.03%)</title><rect x="40.0961%" y="149" width="0.0303%" height="15" fill="rgb(243,148,11)" fg:x="15862" fg:w="12"/><text x="40.3461%" y="159.50"></text></g><g><title>std::io::BufRead::read_until (127 samples, 0.32%)</title><rect x="39.8332%" y="181" width="0.3210%" height="15" fill="rgb(210,43,53)" fg:x="15758" fg:w="127"/><text x="40.0832%" y="191.50"></text></g><g><title>std::io::read_until (10 samples, 0.03%)</title><rect x="40.1289%" y="165" width="0.0253%" height="15" fill="rgb(205,92,54)" fg:x="15875" fg:w="10"/><text x="40.3789%" y="175.50"></text></g><g><title>__recvfrom (8,955 samples, 22.64%)</title><rect x="40.2679%" y="133" width="22.6365%" height="15" fill="rgb(224,160,53)" fg:x="15930" fg:w="8955"/><text x="40.5179%" y="143.50">__recvfrom</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (8,969 samples, 22.67%)</title><rect x="40.2427%" y="149" width="22.6719%" height="15" fill="rgb(213,217,36)" fg:x="15920" fg:w="8969"/><text x="40.4927%" y="159.50">&lt;&amp;std::net::tcp::TcpStream as std::i..</text></g><g><title>recv (4 samples, 0.01%)</title><rect x="62.9044%" y="133" width="0.0101%" height="15" fill="rgb(227,69,32)" fg:x="24885" fg:w="4"/><text x="63.1544%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (8,981 samples, 22.70%)</title><rect x="40.2351%" y="165" width="22.7022%" height="15" fill="rgb(205,209,50)" fg:x="15917" fg:w="8981"/><text x="40.4851%" y="175.50">&lt;&amp;mio::net::tcp::stream::TcpStream a..</text></g><g><title>__recvfrom (9 samples, 0.02%)</title><rect x="62.9146%" y="149" width="0.0228%" height="15" fill="rgb(224,160,53)" fg:x="24889" fg:w="9"/><text x="63.1646%" y="159.50"></text></g><g><title>_tlv_get_addr (13 samples, 0.03%)</title><rect x="63.0106%" y="149" width="0.0329%" height="15" fill="rgb(226,77,8)" fg:x="24927" fg:w="13"/><text x="63.2606%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (103 samples, 0.26%)</title><rect x="62.9373%" y="165" width="0.2604%" height="15" fill="rgb(226,221,19)" fg:x="24898" fg:w="103"/><text x="63.1873%" y="175.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (61 samples, 0.15%)</title><rect x="63.0435%" y="149" width="0.1542%" height="15" fill="rgb(216,63,32)" fg:x="24940" fg:w="61"/><text x="63.2935%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (9 samples, 0.02%)</title><rect x="63.1749%" y="133" width="0.0228%" height="15" fill="rgb(242,141,45)" fg:x="24992" fg:w="9"/><text x="63.4249%" y="143.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (9,112 samples, 23.03%)</title><rect x="40.1668%" y="181" width="23.0334%" height="15" fill="rgb(235,57,13)" fg:x="15890" fg:w="9112"/><text x="40.4168%" y="191.50">tokio::io::poll_evented::PollEvented&lt;..</text></g><g><title>__sendto (14,434 samples, 36.49%)</title><rect x="63.2963%" y="133" width="36.4863%" height="15" fill="rgb(205,164,36)" fg:x="25040" fg:w="14434"/><text x="63.5463%" y="143.50">__sendto</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (14,454 samples, 36.54%)</title><rect x="63.2482%" y="165" width="36.5369%" height="15" fill="rgb(209,219,12)" fg:x="25021" fg:w="14454"/><text x="63.4982%" y="175.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (14,446 samples, 36.52%)</title><rect x="63.2685%" y="149" width="36.5167%" height="15" fill="rgb(252,79,41)" fg:x="25029" fg:w="14446"/><text x="63.5185%" y="159.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write</text></g><g><title>_tlv_get_addr (5 samples, 0.01%)</title><rect x="99.8231%" y="149" width="0.0126%" height="15" fill="rgb(226,77,8)" fg:x="39490" fg:w="5"/><text x="100.0731%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (14,497 samples, 36.65%)</title><rect x="63.2002%" y="181" width="36.6456%" height="15" fill="rgb(229,85,47)" fg:x="25002" fg:w="14497"/><text x="63.4502%" y="191.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (24 samples, 0.06%)</title><rect x="99.7851%" y="165" width="0.0607%" height="15" fill="rgb(226,221,19)" fg:x="39475" fg:w="24"/><text x="100.0351%" y="175.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (4 samples, 0.01%)</title><rect x="99.8357%" y="149" width="0.0101%" height="15" fill="rgb(216,63,32)" fg:x="39495" fg:w="4"/><text x="100.0857%" y="159.50"></text></g><g><title>codecrafters_redis::main::_{{closure}}::_{{closure}} (36,563 samples, 92.42%)</title><rect x="7.4343%" y="197" width="92.4242%" height="15" fill="rgb(234,78,39)" fg:x="2941" fg:w="36563"/><text x="7.6843%" y="207.50">codecrafters_redis::main::_{{closure}}::_{{closure}}</text></g><g><title>0x1026895ef (36,577 samples, 92.46%)</title><rect x="7.4166%" y="213" width="92.4596%" height="15" fill="rgb(233,74,19)" fg:x="2934" fg:w="36577"/><text x="7.6666%" y="223.50">0x1026895ef</text></g><g><title>0x1026895fb (5 samples, 0.01%)</title><rect x="99.8761%" y="213" width="0.0126%" height="15" fill="rgb(240,74,14)" fg:x="39511" fg:w="5"/><text x="100.1261%" y="223.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="99.8761%" y="197" width="0.0126%" height="15" fill="rgb(216,206,8)" fg:x="39511" fg:w="5"/><text x="100.1261%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (36,594 samples, 92.50%)</title><rect x="7.3989%" y="229" width="92.5025%" height="15" fill="rgb(250,43,28)" fg:x="2927" fg:w="36594"/><text x="7.6489%" y="239.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>codecrafters_redis::main::_{{closure}}::_{{closure}} (5 samples, 0.01%)</title><rect x="99.8888%" y="213" width="0.0126%" height="15" fill="rgb(234,78,39)" fg:x="39516" fg:w="5"/><text x="100.1388%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (37,004 samples, 93.54%)</title><rect x="6.4029%" y="245" width="93.5389%" height="15" fill="rgb(246,72,13)" fg:x="2533" fg:w="37004"/><text x="6.6529%" y="255.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (16 samples, 0.04%)</title><rect x="99.9014%" y="229" width="0.0404%" height="15" fill="rgb(232,67,51)" fg:x="39521" fg:w="16"/><text x="100.1514%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (22 samples, 0.06%)</title><rect x="99.9419%" y="245" width="0.0556%" height="15" fill="rgb(229,53,9)" fg:x="39537" fg:w="22"/><text x="100.1919%" y="255.50"></text></g><g><title>all (39,560 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="447.50"></text></g><g><title>thread_start (39,560 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(213,48,3)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="431.50">thread_start</text></g><g><title>_pthread_start (39,560 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(229,126,26)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="415.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (39,560 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(206,117,35)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="399.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39,560 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(218,104,40)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (39,560 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(208,179,44)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (39,560 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,26,43)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="351.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (39,560 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(244,44,31)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (39,560 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(227,84,42)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (39,560 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,183,34)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="303.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (39,560 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(250,218,41)" fg:x="0" fg:w="39560"/><text x="0.2500%" y="287.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (39,559 samples, 100.00%)</title><rect x="0.0025%" y="261" width="99.9975%" height="15" fill="rgb(252,134,48)" fg:x="1" fg:w="39559"/><text x="0.2525%" y="271.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g></svg></svg>